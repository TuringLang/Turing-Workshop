#+SETUPFILE: ~/org-blog/setup.org
#+OPTIONS: tex:t toc:nil date:nil
#+PROPERTY: header-args:R :session :exports both
#+PROPERTY: header-args:julia :session geilo-winter-school :tangle tmp.jl :exports both :kernel julia-4-threads-1.8
#+EXCLUDE_TAGS: noexport
#+TODO: TODO(t) TASK(q) WARNING(w) | DONE(d) SOLUTION(s)

#+REVEAL_ROOT: file:///home/tor/Projects/mine/presentations/2021-10-31-turing-demo/assets/reveal.js-4.1.0/
#+REVEAL_MATHJAX_URL: file:///home/tor/Projects/mine/presentations/2021-10-31-turing-demo/assets/MathJax-2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_TITLE_SLIDE: <div><div style="margin: -200px auto; opacity: 0.2;"><p><object data="https://turing.ml/dev/assets/images/turing-logo-wide.svg"></object></p></div><h1>Bayesian inference and other things</h1><h2>with the TuringLang ecosystem</h2><p><a href="https://github.com/TuringLang">https://github.com/TuringLang</a></p></div>
#+REVEAL_EXTRA_CSS: custom.css
#+REVEAL_THEME: white
#+REVEAL_PLUGINS: (markdown zoom)
#+HTML_HEAD: <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

#+AUTHOR: Tor Erlend Fjelde
#+TITLE: =Turing.jl=

* Activate                                                         :noexport:

#+BEGIN_SRC julia
using Pkg
Pkg.activate(".")
#+END_SRC

#+RESULTS:
:   Activating project at `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing`

#+BEGIN_SRC julia
Pkg.status()
#+END_SRC

#+RESULTS:
#+begin_example
Status `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
  [6e4b80f9] BenchmarkTools v1.3.2
  [336ed68f] CSV v0.10.9
  [b0b7db55] ComponentArrays v0.13.6
  [a93c6f00] DataFrames v1.4.4
  [2b5f629d] DiffEqBase v6.114.1
  [0c46a032] DifferentialEquations v7.6.0
  [31c24e10] Distributions v0.25.80
  [ced4e74d] DistributionsAD v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf`
  [f6369f11] ForwardDiff v0.10.34
  [6fdf6af0] LogDensityProblems v2.1.0
  [996a588d] LogDensityProblemsAD v1.1.1
  [429524aa] Optim v1.7.4
  [d330b81b] PyPlot v2.11.0
  [37e2e3b7] ReverseDiff v1.14.4 `https://github.com/torfjelde/ReverseDiff.jl#torfjelde/sort-of-support-non-linear-indexing`
  [0bca4576] SciMLBase v1.81.0
⌃ [1ed8b502] SciMLSensitivity v7.17.1
  [f3b207a7] StatsPlots v0.15.4
  [fce5fe82] Turing v0.24.0 `../../../Turing.jl`
  [0db1332d] TuringBenchmarking v0.1.1
  [e88e6eb3] Zygote v0.6.55
Info Packages marked with ⌃ have new versions available and may be upgradable.
#+end_example

* Debugging                                                        :noexport:
- [[/home/tor/.julia/packages/SciMLSensitivity/DSyJO/src/reversediff.jl::67]]
  - [ ] Add definition for =AbstractArray{<:ReverseDiff.TrackedReal}=?
- [[/home/tor/.julia/packages/SciMLSensitivity/DSyJO/src/reversediff.jl::99]]
  - Adjoint definition
- [[~/.julia/packages/ReverseDiff/YkVxM/src/tracked.jl::77]]
  - Complains because =IndexStyle= is incorrect

* Hacks                                                            :noexport:
:PROPERTIES:
:header-args:julia: :session geilo-winter-school :tangle utils.jl :exports both
:END:
** ReverseDiff.jl
*** Allow support of linear indexing
#+BEGIN_SRC julia
Pkg.add(url="https://github.com/torfjelde/ReverseDiff.jl", rev="torfjelde/sort-of-support-non-linear-indexing")
#+END_SRC

#+RESULTS:
#+begin_example
    Updating git-repo `https://github.com/torfjelde/ReverseDiff.jl`
    Updating registry at `~/.julia/registries/General`
    Updating git-repo `https://github.com/JuliaRegistries/General.git`
   Resolving package versions...
  No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
  No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
Precompiling project...
  ✓ Turing
  ✓ TuringBenchmarking
  2 dependencies successfully precompiled in 18 seconds. 356 already precompiled.
#+end_example

** SciMLSensitivity.jl
*** DONE Allow =AbstractArray{<:ReverseDiff.TrackedReal}=
#+BEGIN_SRC julia
# Also allow `AbstractArray{<:ReverseDiff.TrackedReal}`.
# PR: https://github.com/SciML/SciMLSensitivity.jl/pull/769
using ReverseDiff: ReverseDiff

using DiffEqBase: DiffEqBase
using SciMLSensitivity: SciMLSensitivity
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0::AbstractArray{<:ReverseDiff.TrackedReal},
    p::AbstractArray{<:ReverseDiff.TrackedReal},
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0,
    p::AbstractArray{<:ReverseDiff.TrackedReal},
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0::AbstractArray{<:ReverseDiff.TrackedReal},
    p,
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end
#+END_SRC

#+RESULTS:

*** TODO Allow =TrackedArray(::ODESolution)= (depends on https://github.com/JuliaDiff/ReverseDiff.jl/pull/216)
#+BEGIN_SRC julia
if isdefined(ReverseDiff, :supports_linear_indexing)
    using DiffEqBase
    ReverseDiff.supports_linear_indexing(::DiffEqBase.ODESolution) = true
end
#+END_SRC

#+RESULTS:

** DONE TuringBenchmarking.jl
#+BEGIN_SRC julia
Pkg.add(url="https://github.com/torfjelde/TuringBenchmarking.jl.git")
#+END_SRC

#+RESULTS:
:     Updating git-repo `https://github.com/torfjelde/TuringBenchmarking.jl.git`
:    Resolving package versions...
:   No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
:   No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`

** TODO DistributionsAD.jl
#+BEGIN_SRC julia
Pkg.add(url="https://github.com/TuringLang/DistributionsAD.jl.git", rev="torfjelde/lazy-array-perf")
#+END_SRC

#+RESULTS:
#+begin_example
    Updating git-repo `https://github.com/TuringLang/DistributionsAD.jl.git`
   Resolving package versions...
    Updating `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
  [ced4e74d] ~ DistributionsAD v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf` ⇒ v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf`
    Updating `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
  [ced4e74d] ~ DistributionsAD v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf` ⇒ v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf`
Precompiling project...
  ✓ DistributionsAD
  ✓ AdvancedVI
  ✓ Turing
  ✓ TuringBenchmarking
  4 dependencies successfully precompiled in 26 seconds. 352 already precompiled.
#+end_example

** MCMCChains.jl
*** Converting into a =Matrix{<:NamedTuple}= into =MCMCChains.Chains=
#+BEGIN_SRC julia
using Turing

function unravel(x::NamedTuple, vns=Iterators.map(DynamicPPL.VarName, keys(x)))
    vn_iter = Iterators.flatten(DynamicPPL.TestUtils.varname_leaves(vn, get(x, vn)) for vn in vns)
    return vn_iter, Iterators.map(Base.Fix1(get, x), vn_iter)
end

"""
    to_chains(results; exclude, include)

Return a `MCMCChains.Chains` constructed from `results`.

If `exclude` is specified, then those keys will be excluded.
If `include` is specified, then those keys will be included.
"""
function to_chains(results::AbstractVector{<:NamedTuple}; exclude=nothing, include=nothing)
    @assert !isempty(results)

    # TODO: Handle ragged arrays.
    # Probably best done my first just mapping everything to flatten dictionaries, e.g.
    #
    #     x_vns, x_vals = unravel(x)
    #     OrderedDict(zip(map(Symbol, x_vns), x_vals))
    #
    # (or using Dictionaries.jl for better perf), and then basically `hcat`ing these
    # and insertin `missing` where necessary.

    example = first(results)

    # Construct names once.
    syms = collect(keys(example))
    # Filter out if desired.
    if !isnothing(include)
        syms = filter(∈(include), syms)
    end
    if !isnothing(exclude)
        syms = filter(∉(exclude), syms)
    end
    # Convert to `VarName`.
    names = collect(first(unravel(example, map(DynamicPPL.VarName, syms))))

    # Extract the values.
    vals = mapreduce(hcat, results) do x
        # NOTE: Providing the `names` here assumes every sample has the same variables.
        collect(last(unravel(x, names)))
    end
    vals_transposed = transpose(vals)
    # Shape: iterations × num_vars × num_chains
    chain_array = reshape(vals_transposed, size(vals_transposed)..., 1)
    return MCMCChains.Chains(chain_array, names)
end

function to_chains(results::AbstractMatrix{<:NamedTuple}; kwargs...)
    return reduce(MCMCChains.chainscat, map(col -> to_chains(col; kwargs...), eachcol(results));)
end
#+END_SRC

#+RESULTS:
: to_chains (generic function with 2 methods)

#+BEGIN_SRC julia
# TODO: Make PR to DPPL.
function DynamicPPL.TestUtils.varname_leaves(vn::DynamicPPL.VarName, val::NamedTuple)
    iter = Iterators.map(keys(val)) do sym
        lens = DynamicPPL.Setfield.PropertyLens{sym}()
        DynamicPPL.TestUtils.varname_leaves(vn ∘ lens, get(val, lens))
    end
    return Iterators.flatten(iter)
end
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia
to_chains([(x = 1, y = [2,2], z = (w = [5],)), (x = 3, y = [4,4], z = (w = [6],))])
#+END_SRC

#+RESULTS:
#+begin_example
Chains MCMC chain (2×4×1 reshape(transpose(::Matrix{Int64}), 2, 4, 1) with eltype Int64):

Iterations        = 1:1:2
Number of chains  = 1
Samples per chain = 2
parameters        = x, y[1], y[2], z.w[1]

Summary Statistics
  parameters      mean       std   naive_se      mcse       ess      rhat 
      Symbol   Float64   Float64    Float64   Float64   Missing   Missing 

           x    2.0000    1.4142     1.0000    1.0000   missing   missing
        y[1]    3.0000    1.4142     1.0000    1.0000   missing   missing
        y[2]    3.0000    1.4142     1.0000    1.0000   missing   missing
      z.w[1]    5.5000    0.7071     0.5000    0.5000   missing   missing

Quantiles
  parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
      Symbol   Float64   Float64   Float64   Float64   Float64 

           x    1.0500    1.5000    2.0000    2.5000    2.9500
        y[1]    2.0500    2.5000    3.0000    3.5000    3.9500
        y[2]    2.0500    2.5000    3.0000    3.5000    3.9500
      z.w[1]    5.0250    5.2500    5.5000    5.7500    5.9750
#+end_example

** Turing.jl
* The story of a little Norwegian boy

#+REVEAL: split

There once was a little Norwegian boy

#+DOWNLOADED: file:///home/tor/Downloads/471337_3317365246956_1262712540_o.jpg @ 2023-01-18 14:49:24
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-49-24_471337_3317365246956_1262712540_o.jpg]]


#+REVEAL: split

When this little boy was 20 years old, he was working as a parking guard near Preikestolen/Pulpit rock


#+DOWNLOADED: file:///home/tor/Downloads/Preikestolen-plateau-Go-Fjords-Bob-Engelsen-P1026771_kljg5o.jpeg @ 2023-01-18 14:57:08
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-57-08_Preikestolen-plateau-Go-Fjords-Bob-Engelsen-P1026771_kljg5o.jpeg]]


#+REVEAL: split

One day when there was it was raining and there was no one hiking, the little boy had an amazing idea

#+begin_quote
Maybe I can use this method of Mr. Bayes I learned a bit about yesteday to model Premier League?
#+end_quote

The little boy got very excited and started looking for stuff on the big interwebs

#+REVEAL: split

The little boy came across this

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230118_144454.png @ 2023-01-18 14:46:02
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-46-02_Screenshot_20230118_144454.png]]

And got _very_ excited

#+REVEAL: split

But at the time, the little boy knew next to _nothing_ about programming

The little boy couldn't write the code to do the inference

Whence the little boy became a _sad_ little boy :(

#+REVEAL: split

But time heals all wounds, and at some point the little boy learned Python

And in Python, the boy found the /probabilistic programming language/ =pymc3=

#+begin_quote
Maybe I can use =pymc3= to perform inference in that Premier League model?
#+end_quote

And so the sad boy once more became an excited little boy :)

#+REVEAL: split

But there was a problem

The boy wanted to write a for-loop in his model, but the model didn't want it to be so and complained!

#+ATTR_REVEAL: :frag (appear)
The boy got frustrated and gave up, once more becoming a sad little boy :(

#+ATTR_REVEAL: :frag (appear)
The boy should have known that the computational backend =theano= that was used by =pymc3= at the time couldn't handle for-loop, and instead he should have used =scan=. But the boy was only 20-something years old; he didn't know.

#+REVEAL: split

Some years later the boy discovers a programming language called _Julia_

#+HTML: <div class="fragment (appear)">
Julia makes a few promises
#+ATTR_REVEAL: :frag (appear)
1. It's fast. Like /really/ fast.
2. It's interactive; doesn't require full compilation for you to play with it.
3. It's (sort of) dynamically typed, so you don't have to specify types everywhere.
#+HTML: </div>

#+HTML: <div class="fragment (appear)">
The boy thinks

#+begin_quote
Wait, but this sounds like Python but the only difference is that...I CAN WRITE FOR-LOOPS WITHOUT FEELING BAD ABOUT IT?!
#+end_quote

Yes, yes he could

#+ATTR_REVEAL: :frag (appear)
And 3.5 years later, he's still writing for-loops. Well, sort of.
#+HTML: </div>

** But it really is fast


#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230118_153122.png @ 2023-01-18 15:31:28
#+CAPTION: https://julialang.org/benchmarks/ (2023-01-18)
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_15-31-28_Screenshot_20230118_153122.png]]

#+REVEAL: split

And the consequences are
#+ATTR_REVEAL: :frag (appear)
- Even a naive implementation will be fast; and if you want to go faster, you just optimize the code /in Julia/!
  - No need to drop down to C(++)
- ⟹ "Every" package is written in Julia, so when you encounter a bug you can more easily debug because /the code is in the same language as you're writing code in/!
- ⟹ Same for /extending/ packages!
  - Moreover, thanks to multiple dispatch, you can change a function /on the fly/ to experiment with code you don't even own!
* Why Turing.jl?
The main benefit of Turing.jl is of course that *it's just Julia*.

** But Why Julia?
Fair enough.

- It goes vroom, vroom!
- 

* Set up

#+BEGIN_SRC julia
include("utils.jl")
#+END_SRC

#+RESULTS:
: Matrix (generic function with 1 method)

** Getting the data                                                :noexport:
#+BEGIN_SRC sh
mkdir -p data
#+END_SRC

#+BEGIN_SRC R
install.packages("outbreaks")
#+END_SRC

#+BEGIN_SRC R
library(outbreaks)
#+END_SRC

#+BEGIN_SRC R
influenza_england_1978_school
#+END_SRC

#+RESULTS:
| 1978-01-22 |   3 |   0 |
| 1978-01-23 |   8 |   0 |
| 1978-01-24 |  26 |   0 |
| 1978-01-25 |  76 |   0 |
| 1978-01-26 | 225 |   9 |
| 1978-01-27 | 298 |  17 |
| 1978-01-28 | 258 | 105 |
| 1978-01-29 | 233 | 162 |
| 1978-01-30 | 189 | 176 |
| 1978-01-31 | 128 | 166 |
| 1978-02-01 |  68 | 150 |
| 1978-02-02 |  29 |  85 |
| 1978-02-03 |  14 |  47 |
| 1978-02-04 |   4 |  20 |

#+BEGIN_SRC R
write.csv(influenza_england_1978_school, file="data/influenza_england_1978_school.csv")
#+END_SRC

** Load into Julia

#+BEGIN_SRC julia
# Load the dataframe.
using Dates
using DataFrames, CSV

N = 763
data = DataFrame(CSV.File("data/influenza_england_1978_school.csv"));
print(data)
#+END_SRC

#+RESULTS:
#+begin_example
14×4 DataFrame
 Row │ Column1  date        in_bed  convalescent 
     │ Int64    Date        Int64   Int64        
─────┼───────────────────────────────────────────
   1 │       1  1978-01-22       3             0
   2 │       2  1978-01-23       8             0
   3 │       3  1978-01-24      26             0
   4 │       4  1978-01-25      76             0
   5 │       5  1978-01-26     225             9
   6 │       6  1978-01-27     298            17
   7 │       7  1978-01-28     258           105
   8 │       8  1978-01-29     233           162
   9 │       9  1978-01-30     189           176
  10 │      10  1978-01-31     128           166
  11 │      11  1978-02-01      68           150
  12 │      12  1978-02-02      29            85
  13 │      13  1978-02-03      14            47
  14 │      14  1978-02-04       4            20
#+end_example

Notice that each of the columns have associated types

#+REVEAL: split

Let's visualize the samples:

#+BEGIN_SRC julia
using StatsPlots
pyplot()  # TODO: Overload show with the corresponding `MIME` for GR instead
#+END_SRC

#+RESULTS:
: Plots.PyPlotBackend()

#+BEGIN_SRC julia
@df data scatter(:date, :in_bed, label=nothing, ylabel="Number of students in bed")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/40ec3a382b6a8be7d42c862e3d31d11596326ae9.png]]

* Differential equations

#+REVEAL: split

Suppose we have some function $f$ which describes how a state $x$ evolves wrt. $t$
\begin{equation*}
\dv{x}{t} = f(x, t)
\end{equation*}
which we then need to integrate to obtain the actual state at some time $t$
\begin{equation*}
x(t) = \int_{0}^{t} \dv{x}{t} \dd{t} = \int_{0}^{t} f(x, t) \dd{t}
\end{equation*}

In many interesting scenarios numerical methods are required to obtain $x(t)$

** In Julia
Everything related to differential equations is provided by =DifferentialEquations.jl=

#+REVEAL: split

And I really do mean [[https://docs.sciml.ai/DiffEqDocs/stable/][/everything/]]

#+HTML: <div class="side-by-side">

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230119_194737.png @ 2023-01-19 19:48:23
[[file:.notes/attachments/Differential_equations/2023-01-19_19-48-23_Screenshot_20230119_194737.png]]

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230119_194838.png @ 2023-01-19 19:48:41
[[file:.notes/attachments/Differential_equations/2023-01-19_19-48-41_Screenshot_20230119_194838.png]]

#+HTML: </div>

** Example: SIR model
One particular example of an (ordinary) differential equation that you might have seen recently is the *SIR model* used in epidemiology

#+DOWNLOADED: file:///home/tor/Downloads/sir_illu.png @ 2023-01-19 19:56:00
#+ATTR_ORG: :width 600
#+CAPTION: https://covid19.uclaml.org/model.html (2023-01-19)
[[file:.notes/attachments/Differential_equations/2023-01-19_19-56-00_sir_illu.png]]

#+REVEAL: split

The temporal dynamics of the sizes of each of the compartments are governed by the following system of ODEs:
\begin{equation*}
\begin{split}
  \dv{S}{t} &= - \beta S \frac{I}{N} \\
  \dv{I}{t} &= \beta S \frac{I}{N} - \gamma I \\
  \dv{R}{t} &= \gamma I
\end{split}
\end{equation*}
where
- $S(t)$ is the number of people susceptible to becoming infected (no immunity),
- $I(t)$ is the number of people currently infected (and infectious),
- $R(t)$ is the number of recovered people (we assume they remain immune indefinitely),
- $β$ is the constant rate of infectious contact between people,
- $\gamma$ the constant recovery rate of infected individuals

#+REVEAL: split

Converting this ODE into code is just

#+BEGIN_SRC julia
using DifferentialEquations

function SIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population
    S, I, R = u
    β, γ = p

    du[1] = dS = -β * I * S / N
    du[2] = dI = β * I * S / N - γ * I
    du[3] = dR = γ * I
end
#+END_SRC

#+RESULTS:
: SIR! (generic function with 1 method)


Not too bad!

#+REVEAL: split

#+BEGIN_SRC julia
# Figure out the timespan we're working with.
last(data.date) - first(data.date) + Day(1) # add 1 since we have an observation for every day
#+END_SRC

#+RESULTS:
: 14 days

That is, we have 14 days of observations.

#+BEGIN_SRC julia
# Include 0 because that's the initial condition before any observations.
tspan = (0.0, 14.0)

# Initial conditions are:
#   S(0) = N - 1; I(0) = 1; R(0) = 0
u0 = [N - 1, 1, 0.0]
#+END_SRC

#+RESULTS:
: 3-element Vector{Float64}:
:  762.0
:    1.0
:    0.0

#+REVEAL: split

Now we just need to define the overall problem and we can solve:

#+BEGIN_SRC julia
# Just to check that everything works, we'll just use some "totally random" values for β and γ:
problem = let β = 2.0, γ = 0.6
    ODEProblem(SIR!, u0, tspan, (β, γ))
end
#+END_SRC

#+RESULTS:
: ODEProblem with uType Vector{Float64} and tType Float64. In-place: true
: timespan: (0.0, 14.0)
: u0: 3-element Vector{Float64}:
:  762.0
:    1.0
:    0.0

#+REVEAL: split

Aaaand

#+BEGIN_SRC julia
sol = solve(problem)
#+END_SRC

#+RESULTS:
#+begin_example
retcode: Success
Interpolation: specialized 4th order "free" interpolation, specialized 2nd order "free" stiffness-aware interpolation
t: 23-element Vector{Float64}:
  0.0
  0.0023558376404244326
  0.025914214044668756
  0.11176872871946908
  0.26714420676761075
  0.47653584778586056
  0.7436981238065388
  1.0701182881347182
  1.4556696154809898
  1.8994815718103506
  2.4015425820305163
  2.9657488203418048
  3.6046024613854746
  4.325611232479916
  5.234036476235002
  6.073132270491685
  7.323851265223563
  8.23100744184026
  9.66046960467715
 11.027717843180652
 12.506967592177675
 13.98890399536329
 14.0
u: 23-element Vector{Vector{Float64}}:
 [762.0, 1.0, 0.0]
 [761.9952867607622, 1.003297407481751, 0.001415831756055325]
 [761.9472927630898, 1.036873767352754, 0.015833469557440357]
 [761.7584189579304, 1.1690001128296739, 0.0725809292398516]
 [761.353498610305, 1.4522140137552049, 0.19428737593979384]
 [760.6490369821046, 1.9447820690728455, 0.4061809488225752]
 [759.3950815454128, 2.8210768113583082, 0.7838416432288186]
 [757.0795798160242, 4.437564277195732, 1.4828559067800167]
 [752.6094742865345, 7.552145919430467, 2.8383797940350495]
 [743.573784947305, 13.823077731564027, 5.603137321131049]
 [724.5575481927715, 26.909267078762316, 11.533184728466205]
 [683.6474029897502, 54.51612001957392, 24.836476990675976]
 [598.1841629858786, 109.41164143668018, 55.40419557744127]
 [450.08652743810205, 192.396449154863, 120.51702340703504]
 [259.11626253270623, 256.9925778114915, 246.89115965580237]
 [148.3573731526537, 240.10301213899098, 374.53961470835543]
 [76.52998017846475, 160.6373332952353, 525.8326865263001]
 [55.70519994004921, 108.7634182279299, 598.531381832021]
 [41.39587834423381, 55.09512088924873, 666.5090007665176]
 [35.87067243374374, 27.821838135708532, 699.3074894305479]
 [33.252184333490774, 13.087185981359177, 716.6606296851502]
 [32.08996839417716, 6.105264616193066, 724.8047669896299]
 [32.08428686823946, 6.070415830241046, 724.8452973015196]
#+end_example

#+REVEAL: split

We didn't specify a solver

DifferentialEquations.jl uses =AutoTsit5(Rosenbrock32())= by default 

Which is a composition between

- =Tsit5= (4th order Runge-Kutta), and
- =Rosenbrock32= (3rd order stiff solver)

with automatic switching between the two

#+REVEAL: split

=AutoTsit5(Rosenbrock32())= covers many use-cases well, but see

- https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/
- https://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/

for more info on choosing a solver

#+REVEAL: split

But this is the resulting solution

#+BEGIN_SRC julia
plot(
    sol,
    linewidth=2, xaxis="Time in days", label=["Suspectible" "Infected" "Recovered"],
    alpha=0.5, size=(500, 300)
)
scatter!(1:14, data.in_bed, label="Data", color="black")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/cd1bb1a21d3412fd689378b07ab893406ba0e463.png]]

Doesn't really match the data; let's do better

#+REVEAL: split

We can also find the optimal values for $\beta$ and $\gamma$ by just minimizing some loss, e.g. sum-of-squares

\begin{equation*}
\ell(\beta, \gamma) = \sum_{i = 1}^{14} \bigg( F(u_0, t_i;\ \beta, \gamma) - y_i \bigg)^2
\end{equation*}

where $\big( y_i \big)_{i = 1}^{14}$ are the observations, $F$ is the integrated system

First we define the loss

#+BEGIN_SRC julia
# Define the loss function.
function loss(problem, p)
    # `remake` just, well, remakes the `problem` with `p` replaced.
    problem = remake(problem, p=p)
    # To ensure we get solutions _exactly_ at the timesteps of interest,
    # i.e. every day we have observations, we use `saveat=1` to tell `solve`
    # to save at every timestep (which is one day).
    sol = solve(problem, saveat=1)
    # Extract the 2nd state, the (I)infected, for the dates with observations.
    sol_for_observed = sol[2, 2:15]
    # Compute the sum-of-squares of the infected vs. data.
    return sum(abs2.(sol_for_observed - data.in_bed))
end
#+END_SRC

#+RESULTS:
: loss (generic function with 1 method)

#+REVEAL: split

And the go-to for optimization in Julia is [[https://julianlsolvers.github.io/Optim.jl/stable/][Optim.jl]]

#+BEGIN_SRC julia
using Optim
# An alternative to writing `y -> f(x, y)` is `Base.Fix1(f, x)` which
# avoids potential performance issues with global variables (as our `problem` here).
opt = optimize(
    p -> loss(problem, p), # function to minimize
    [0, 0],                # lower bounds on variables
    [Inf, Inf],            # upper bounds on variables
    [2.0, 0.5],            # initial values
    Fminbox(NelderMead())  # optimization alg
) 
#+END_SRC

#+RESULTS:
#+begin_example
,* Status: success

,* Candidate solution
   Final objective value:     4.116433e+03

,* Found with
   Algorithm:     Fminbox with Nelder-Mead

,* Convergence measures
   |x - x'|               = 0.00e+00 ≤ 0.0e+00
   |x - x'|/|x'|          = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|         = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|/|f(x')| = 0.00e+00 ≤ 0.0e+00
   |g(x)|                 = 7.86e+04 ≰ 1.0e-08

,* Work counters
   Seconds run:   4  (vs limit Inf)
   Iterations:    4
   f(x) calls:    565
   ∇f(x) calls:   1
#+end_example

#+REVEAL: split

#+BEGIN_SRC julia
β, λ = Optim.minimizer(opt)
#+END_SRC

#+RESULTS:
: 2-element Vector{Float64}:
:  1.6692320164955483
:  0.44348639177622445

#+REVEAL: split

#+BEGIN_SRC julia
# Solve for the obtained parameters.
problem = remake(problem, p=(β, λ))
sol = solve(problem)

# Plot the solution.
plot(sol, linewidth=2, xaxis="Time in days", label=["Suspectible" "Infected" "Recovered"], alpha=0.5)
# And the data.
scatter!(1:14, data.in_bed, label="Data", color="black")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/d16ee5c3ab7072e15e7efe28a8f390104175913c.png]]

That's better than our /totally/ "random" guess from earlier!

** Example: SEIR model

Now we're going to add another compartment to our SIR model: the /(E)xposed/ state

\begin{equation*}
\begin{split}
  \dv{S}{t} &= - \beta S \frac{I}{N} \\
  \dv{E}{t} &= \frac{\beta I S}{N} - \sigma E \\
  \dv{I}{t} &= \sigma E - \gamma I \\
  \dv{R}{t} &= \gamma I
\end{split}
\end{equation*}

where we've added a new parameter $\sigma$ describing the fraction of people who develop observable symptoms in this time

** TASK Solve the SEIR model using Julia

#+BEGIN_SRC julia
function SEIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population

    S, E, I, R = u  # have ourselves an additional state!
    β, γ, σ = p     # and an additional parameter!

    # TODO: Implement yah fool!
    du[1] = nothing
    du[2] = nothing
    du[3] = nothing
    du[4] = nothing
end
#+END_SRC

*BONUS:* Use =Optim.jl= to find minimizers of sum-of-squares

** SOLUTION Solve the SEIR model using Julia

#+BEGIN_SRC julia
function SEIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population
    S, E, I, R = u  # have ourselves an additional state!
    β, γ, σ = p     # and an additional parameter!

    # Might as well cache these computations.
    βSI = β * S * I / N
    σE = σ * E
    γI = γ * I

    du[1] = -βSI
    du[2] = βSI - σE
    du[3] = σE - γI
    du[4] = γI
end
#+END_SRC

#+RESULTS:
: SEIR! (generic function with 1 method)

#+REVEAL: split

#+BEGIN_SRC julia
problem_seir = let u0 = [N - 1, 0, 1, 0], β = 2.0, γ = 0.6, σ = 0.8
    ODEProblem(SEIR!, u0, tspan, (β, γ, σ))
end
#+END_SRC

#+RESULTS:
: ODEProblem with uType Vector{Int64} and tType Float64. In-place: true
: timespan: (0.0, 14.0)
: u0: 4-element Vector{Int64}:
:  762
:    0
:    1
:    0

#+BEGIN_SRC julia
sol_seir = solve(problem_seir, saveat=1)
#+END_SRC

#+RESULTS:
#+begin_example
retcode: Success
Interpolation: 1st order linear
t: 15-element Vector{Float64}:
  0.0
  1.0
  2.0
  3.0
  4.0
  5.0
  6.0
  7.0
  8.0
  9.0
 10.0
 11.0
 12.0
 13.0
 14.0
u: 15-element Vector{Vector{Float64}}:
 [762.0, 0.0, 1.0, 0.0]
 [760.1497035901518, 1.277915971753478, 1.0158871356490553, 0.5564933024456415]
 [757.5476928906271, 2.425869618233348, 1.6850698824327135, 1.341367608706787]
 [753.081189706403, 4.277014534677882, 2.9468385687120784, 2.6949571902067637]
 [745.3234082630842, 7.455598293492679, 5.155811621098981, 5.065181822323938]
 [731.9851682751213, 12.855816151849933, 8.960337047554939, 9.198678525473571]
 [709.5042941973462, 21.77178343781762, 15.384985521594787, 16.338936843241182]
 [672.8733895183619, 35.77263271085456, 25.88133104438007, 28.472646726403138]
 [616.390571176038, 55.97177756967422, 42.09614416178476, 48.54150709250279]
 [536.453596476594, 81.2428045994271, 64.9673325777641, 80.33626634621449]
 [436.43708330634297, 106.04037246704702, 92.9550757379631, 127.56746848864664]
 [329.60092931771436, 121.08020372279418, 120.48402926084937, 191.83483769864185]
 [233.8471941518982, 119.43669383157659, 139.3233304893263, 270.3927815271987]
 [160.88805352426687, 102.7399386960996, 143.3826208089892, 355.9893869706441]
 [111.72261866282292, 79.02493776169311, 132.78384886713565, 439.46859470834806]
#+end_example

#+BEGIN_SRC julia
plot(sol_seir, linewidth=2, xaxis="Time in days", label=["Suspectible" "Exposed" "Infected" "Recovered"], alpha=0.5)
scatter!(1:14, data.in_bed, label="Data")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/9c5ac26d982f01e7094445522f39583d90db8c3f.png]]

Don't look so good. Let's try Optim.jl again.

#+REVEAL: split

#+BEGIN_SRC julia
function loss_seir(problem, p)
    problem = remake(problem, p=p)
    sol = solve(problem, saveat=1)
    # NOTE: 3rd state is now the (I)nfectious compartment!!!
    sol_for_observed = sol[3, 2:15]
    return sum(abs2.(sol_for_observed - data.in_bed))
end
#+END_SRC

#+RESULTS:
: loss_seir (generic function with 1 method)

#+BEGIN_SRC julia
opt = optimize(Base.Fix1(loss_seir, problem_seir), [0, 0, 0], [Inf, Inf, Inf], [2.0, 0.5, 0.9], Fminbox(NelderMead()))
#+END_SRC

#+RESULTS:
#+begin_example
,* Status: success (reached maximum number of iterations)

,* Candidate solution
   Final objective value:     3.115978e+03

,* Found with
   Algorithm:     Fminbox with Nelder-Mead

,* Convergence measures
   |x - x'|               = 0.00e+00 ≤ 0.0e+00
   |x - x'|/|x'|          = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|         = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|/|f(x')| = 0.00e+00 ≤ 0.0e+00
   |g(x)|                 = 1.77e+05 ≰ 1.0e-08

,* Work counters
   Seconds run:   2  (vs limit Inf)
   Iterations:    3
   f(x) calls:    13259
   ∇f(x) calls:   1
#+end_example

#+REVEAL: split

#+BEGIN_SRC julia
β, γ, σ = Optim.minimizer(opt)
#+END_SRC

#+RESULTS:
: 3-element Vector{Float64}:
:  4.853872993924619
:  0.4671485850111774
:  0.8150294098438762

#+BEGIN_SRC julia
sol_seir = solve(remake(problem_seir, p=(β, γ, σ)), saveat=1)
plot(sol_seir, linewidth=2, xaxis="Time in days", label=["Suspectible" "Exposed" "Infected" "Recovered"], alpha=0.5)
scatter!(1:14, data.in_bed, label="Data", color="black")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/76e3d91d3de473fb85975cd9a6e88513b634e79d.png]]

#+REVEAL: split

#+begin_quote
But...but these are _point estimates_! What about distributions? WHAT ABOUT UNCERTAINTY?!
#+end_quote

No, no that's fair.

Let's do some Bayesian inference then.

BUT FIRST!

** Making our future selves less annoyed

It's a bit annoying to have to have all these different functions for both =SIR!= and =SEIR!=

#+HTML: <div class="fragment (appear)">

#+BEGIN_SRC julia
# Abstract type which we can use to dispatch on.
abstract type AbstractEpidemicProblem end

struct SIRProblem{P} <: AbstractEpidemicProblem
    problem::P
    N::Int
end

function SIRProblem(N::Int; u0 = [N - 1, 1, 0.], tspan = (0, 14), p = [2.0, 0.6])
    return SIRProblem(ODEProblem(SIR!, u0, tspan, p), N)
end
#+END_SRC

#+RESULTS:
: SIRProblem

Then we can just construct the problem as

#+BEGIN_SRC julia
sir = SIRProblem(N);
#+END_SRC

#+RESULTS:

#+HTML: </div>

#+REVEAL: split

And to make it a bit easier to work with, we add some utility functions

#+BEGIN_SRC julia
# General.
parameters(prob::AbstractEpidemicProblem) = prob.problem.p
initial_state(prob::AbstractEpidemicProblem) = prob.problem.u0
population(prob::AbstractEpidemicProblem) = prob.N

# Specializations.
susceptible(::SIRProblem, u::AbstractMatrix) = u[1, :]
infected(::SIRProblem, u::AbstractMatrix) = u[2, :]
recovered(::SIRProblem, u::AbstractMatrix) = u[3, :]
#+END_SRC

#+RESULTS:
: recovered (generic function with 1 method)

So that once we've solved the problem, we can easily extract the compartment we want, e.g.

#+BEGIN_SRC julia
sol = solve(sir.problem, saveat=1)
infected(sir, sol)
#+END_SRC

#+RESULTS:
#+begin_example
15-element Vector{Float64}:
   1.0
   4.026799533924021
  15.824575905720002
  56.779007685250534
 154.4310579906169
 248.98982384839158
 243.67838619968524
 181.93939659551987
 120.64627375763271
  75.92085282572398
  46.58644927641269
  28.214678599716418
  16.96318676577873
  10.158687874394722
   6.070415830241046
#+end_example

** TASK Implement =SEIRProblem=

#+BEGIN_SRC julia
struct SEIRProblem <: AbstractEpidemicProblem
    # ...
end

function SEIRProblem end

susceptible
exposed
infected
recovered
#+END_SRC

** SOLUTION Implement =SEIRProblem=

#+BEGIN_SRC julia
struct SEIRProblem{P} <: AbstractEpidemicProblem
    problem::P
    N::Int
end

function SEIRProblem(N::Int; u0 = [N - 1, 0, 1, 0.], tspan = (0, 14), p = [4.5, 0.45, 0.8])
    return SEIRProblem(ODEProblem(SEIR!, u0, tspan, p), N)
end

susceptible(::SEIRProblem, u::AbstractMatrix) = u[1, :]
exposed(::SEIRProblem, u::AbstractMatrix) = u[2, :]
infected(::SEIRProblem, u::AbstractMatrix) = u[3, :]
recovered(::SEIRProblem, u::AbstractMatrix) = u[4, :]
#+END_SRC

#+RESULTS:
: recovered (generic function with 2 methods)

#+REVEAL: split

Now, given a =problem= and a =sol=, we can query the =sol= for the =infected= state without explicit handling of which =problem= we're working with

#+BEGIN_SRC julia
seir = SEIRProblem(N);
sol = solve(seir.problem, saveat=1)
infected(seir, sol)
#+END_SRC

#+RESULTS:
#+begin_example
15-element Vector{Float64}:
   1.0
   1.9941817088874336
   6.958582307202902
  23.9262335176065
  74.23638542794971
 176.98368495653585
 276.06126059898344
 293.92632518571605
 249.92836195453708
 189.07578975511504
 134.2373192679034
  91.82578430804273
  61.38108478932363
  40.42264366743211
  26.357816296754425
#+end_example


* Bayesian inference

#+REVEAL: split

First off

#+BEGIN_SRC julia
using Turing
#+END_SRC

#+RESULTS:

#+REVEAL: split

This dataset really doesn't have too many observations

#+BEGIN_SRC julia
nrow(data)
#+END_SRC

#+RESULTS:
: 14

So reporting a single number for parameters is maybe being a /bit/ too confident

#+REVEAL: split

We'll use the following model
\begin{equation*}
\begin{split}
  \beta &\sim \mathcal{N}_{ + }(2, 1) \\
  \gamma &\sim \mathcal{N}_{ + }(0.4, 0.5) \\
  \phi^{-1} &\sim \mathrm{Exponential}(1/5) \\
   y_i &\sim \mathrm{NegativeBinomial2}\big(F(u_0, t_i;\ \beta, \gamma), \phi \big)
\end{split}
\end{equation*}
where 
- $\big( y_i \big)_{i = 1}^{14}$ are the observations, 
- $F$ is the integrated system, and
- $\phi$ is the over-dispersion parameter.

#+REVEAL: split

#+BEGIN_SRC julia
plot(
    plot(truncated(Normal(2, 1); lower=0), label=nothing, title="β"),
    plot(truncated(Normal(0.4, 0.5); lower=0), label=nothing, title="γ"),
    plot(Exponential(1/5), label=nothing, title="ϕ⁻¹"),
    layout=(3, 1)
)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/c7a2ffd1b9f12c5932b50fe0c4b7923253c2d1bc.png]]

#+REVEAL: split

#+BEGIN_SRC julia
function NegativeBinomial2(mean, ϕ)
    p = 1/(1 + mean/ϕ)
    r = ϕ
    return NegativeBinomial(r, p)
end
#+END_SRC

#+RESULTS:
: NegativeBinomial2 (generic function with 1 method)

#+BEGIN_SRC julia
# Let's just make sure we didn't do something stupid.
μ = 2; ϕ = 3;
dist = NegativeBinomial2(μ, ϕ)
# Source: https://mc-stan.org/docs/2_20/functions-reference/nbalt.html
mean(dist) ≈ μ && var(dist) ≈ μ + μ^2 / ϕ
#+END_SRC

#+RESULTS:
: true

#+REVEAL: split

Can be considered a generalization of =Poisson=

#+BEGIN_SRC julia
μ = 2.0
anim = @animate for ϕ ∈ [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 25.0, 100.0]
    p = plot(size=(500, 300))
    plot!(p, Poisson(μ); label="Poisson($μ)")
    plot!(p, NegativeBinomial2(μ, ϕ), label="NegativeBinomial2($μ, $ϕ)")
    xlims!(0, 20); ylims!(0, 0.35);
    p
end
gif(anim, "negative_binomial.gif", fps=2);
#+END_SRC

#+RESULTS:
:RESULTS:
: [36m[1m[ [22m[39m[36m[1mInfo: [22m[39mSaved animation to /home/tor/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/negative_binomial.gif
[[file:./.ob-jupyter/75415f5b0c05009b61a3b811092fac87856c171f.png]]
:END:

[[./negative_binomial.gif]]

#+REVEAL: split

#+BEGIN_SRC julia
@model function sir_model(
    num_days;                                  # Number of days to model
    tspan = (0.0, float(num_days)),            # Timespan to model
    u0 = [N - 1, 1, 0.0],                      # Initial state
    p0 = [2.0, 0.6],                           # Placeholder parameters
    problem = ODEProblem(SIR!, u0, tspan, p0)  # Create problem once so we can `remake`.
)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)
    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem, p=[β, γ])  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)       # Solve!

    sol_for_observed = sol[2, 2:num_days + 1]  # Timesteps we have observations for.
    in_bed = Vector{Int}(undef, num_days)
    for i = 1:length(sol_for_observed)
        # Add a small constant to `sol_for_observed` to make things more stable.
        in_bed[i] ~ NegativeBinomial2(sol_for_observed[i] + 1e-5, ϕ)
    end

    # Some quantities we might be interested in.
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
end
#+END_SRC

#+RESULTS:
: sir_model (generic function with 2 methods)

#+REVEAL: split

Let's break it down

#+BEGIN_SRC julia
β ~ truncated(Normal(2, 1); lower=0)
γ ~ truncated(Normal(0.4, 0.5); lower=0)
ϕ⁻¹ ~ Exponential(1/5)
ϕ = inv(ϕ⁻¹)
#+END_SRC

defines our prior

=truncated= is just a way of restricting the domain of the distribution you pass it

#+REVEAL: split

#+BEGIN_SRC julia
problem_new = remake(problem, p=[β, γ])  # Replace parameters `p`.
sol = solve(problem_new, saveat=1)       # Solve!
#+END_SRC

We then remake the problem, now with the parameters =[β, γ]= sampled above

Remember the =saveat = 1= ensures we get solution at timesteps =[0, 1, 2, ..., 14]=

#+REVEAL: split

Then we extract the timesteps we have observations for

#+BEGIN_SRC julia
sol_for_observed = sol[2, 2:num_days + 1]  # Timesteps we have observations for.
#+END_SRC

and define what's going to be a likelihood (once we add observations)

#+BEGIN_SRC julia
in_bed = Vector{Int}(undef, num_days)
for i = 1:length(sol_for_observed)
    # Add a small constant to `sol_for_observed` to make things more stable.
    in_bed[i] ~ NegativeBinomial2(sol_for_observed[i] + 1e-5, ϕ)
end
#+END_SRC

#+REVEAL: split

Finally we return some values that might be of interest to

#+BEGIN_SRC julia
# Some quantities we might be interested in.
return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
#+END_SRC

This is useful for a post-sampling diagnostics, debugging, etc.

#+REVEAL: split

#+BEGIN_SRC julia
model = sir_model(length(data.in_bed))
#+END_SRC

#+RESULTS:
: Model(
:   args = (:num_days, :tspan, :u0, :p0, :problem)
:   defaults = (:tspan, :u0, :p0, :problem)
:   context = DynamicPPL.DefaultContext()
: )

The model is just another function, so we can call it to check that it works

#+HTML: <div class="fragment (appear)">

#+BEGIN_SRC julia
model().infected
#+END_SRC

#+RESULTS:
#+begin_example
14-element Vector{Float64}:
   3.1664025930805666
   9.798841386086416
  28.31455092148007
  68.31877539019936
 115.4174366684663
 124.74895879419394
  95.20892597910733
  59.60522553801775
  33.75389615433325
  18.17904383289882
   9.563348320777385
   4.96497417899723
   2.560551848705429
   1.317201355058522
#+end_example

Hey, it does!

#+HTML: </div>

** Is the prior reasonable?

Before we do any inference, we should check if the prior is reasonable

From domain knowledge we know that (for influenza at least)
#+ATTR_REVEAL: :frag (appear)
- $R_0$ is typically between 1 and 2
- =recovery_time= ($1 / \gamma$) is usually ~1 week

#+HTML: <div class="fragment (appear)">

We want to make sure that your prior belief reflects this knowledge while still being flexible enough to accommodate the observations

#+HTML: </div>

#+REVEAL: split

To check this we'll just simulate some draws from our prior model, i.e. the model /without/ conditioning on =in_bed=

There are two ways to sample form the prior

#+HTML: <div class="fragment (appear)">

#+BEGIN_SRC julia
# 1. By just calling the `model`, which returns a `NamedTuple` containing the quantities of interest
print(model())
#+END_SRC

#+RESULTS:
: (R0 = 1.2999290756779531, recovery_time = 0.6977054268642389, infected = [1.5292966105765635, 2.3223774580679386, 3.4895335689371967, 5.161081785767661, 7.459321870754651, 10.433526681897439, 13.956211547134568, 17.620261444577014, 20.74293231144959, 22.578921692450297, 22.667291359227267, 21.068926446896786, 18.29922357837848, 15.019852319846871])

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

Or by just calling =sample= using =Prior=

#+BEGIN_SRC julia
# Sample from prior.
chain_prior = sample(model, Prior(), 10_000);
#+END_SRC

#+RESULTS:
: [32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:01[39m

#+HTML: </div>

#+REVEAL: split

#+BEGIN_SRC julia
using StatsPlots

"""
    plot_trajectories!(p::Plots.Plot, chain::MCMCChains.Chains; kwargs...)

Plot trajectories in `chain`.

# Keyword arguents
n = 1000, trajectory_color="#BBBBBB", alpha=1/√n
- `n`: number of trajectories to sample. Default: 1000.
- `trajectory_color`: color of the trajectories to use. Default: "#BBBBBB".
- `alpha`: alpha to use when plotting the trajectories. Default: `1/√n`.
- `include_data`: include the data in the plot. Default: `false`.
- `tspan`: 2-tuple containing first and last time represented by `chain`. Default: (1, 14)
"""
function plot_trajectories!(
    p::Plots.Plot, chain::MCMCChains.Chains;
    n = 1000, include_data=false, tspan=(1, 14),
    trajectory_color="#BBBBBB", alpha=1/√n
)
    # Convert the `chain` into a flattened `Array`.
    chain_arr = Array(chain; append_chains=true)  # Shape: [num_chains × num_iterations, num_params]
    # Sample a subset of indices to use.
    total_num_samples = size(chain_arr, 1)
    indices = rand(1:total_num_samples, n)  # Shape: [n, ]
    # Plot 'em!
    chain_arr = chain_arr[indices, :]  # Shape: [n, num_params]
    for in_bed in eachrow(chain_arr)
        plot!(p, tspan[1]:tspan[2], in_bed, alpha=alpha, color=trajectory_color)
    end

    if include_data
        scatter!(p, 1:14, data.in_bed, label="Data", color="black")
    end

    return p
end

"""
    plot_trajectories(chain::MCMCChains.Chains; kwargs...)

Plot trajectories in `chain`.

See [`plot_trajectories!`](@ref) for more info.
"""
plot_trajectories(chain::MCMCChains.Chains; kwargs...) = plot_trajectories!(plot(), chain; kwargs...)
#+END_SRC

#+REVEAL: split

#+BEGIN_SRC julia
"""
    plot_trajectory_quantiles!(p::Plots.Plot, chain::MCMCChains.Chains; kwargs...)

Plot quantiles of trajectories in `chain`.

By default, the 95% quantiles are used.

# Keyword arguments
- q: quantiles to compute (only three ordered values supported). Default: `[0.025, 0.5, 0.975]`.
- `include_data`: if `true`, include the data in the plot. Default: `false`.
- `tspan`: 2-tuple containing first and last time represented by `chain`. Default: (1, 14)
"""
function plot_trajectory_quantiles!(
    p::Plots.Plot, chain::MCMCChains.Chains;
    q=[0.025, 0.5, 0.975], include_data=false, tspan=(1, 14)
)
    # Compute quantiles.
    qs = Array(DataFrame(quantile(chain; q = q))[:, Not(:parameters)]);

    # Plot!
    num_timesteps = size(qs, 1)
    lb, mid, ub = qs[:, 1], qs[:, 2], qs[:, 3]
    plot!(p, tspan[1]:tspan[2], mid, ribbon=(mid - lb, ub - mid))

    if include_data
        scatter!(p, 1:14, data.in_bed, label="Data", color="black")
    end

    return p
end


"""
    plot_trajectory_quantiles(chain::MCMCChains.Chains; kwargs...)

Plot quantiles of trajectories in `chain`.

See [`plot_trajectory_quantiles!`](@ref) for more info.
"""
plot_trajectory_quantiles(chain::MCMCChains.Chains; kwargs...) = plot_trajectory_quantiles!(plot(), chain; kwargs...)
#+END_SRC

#+REVEAL: split

Let's have a look at the prior predictive

#+BEGIN_SRC julia
p = plot(legend=false, size=(600, 300))
plot_trajectories!(p, group(chain_prior, :in_bed); n = 1000)
hline!([N], color="red")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/898d8baf1113c3a719d020702e40e75c9c545b22.png]]

#+ATTR_REVEAL: :frag (appear)
For certain values we get number of infected /larger/ than the actual population

#+ATTR_REVEAL: :frag (appear)
But this is includes the randomness from =NegativeBinomial2= likelihood

#+ATTR_REVEAL: :frag (appear)
Maybe more useful to inspect the (I)nfected state from the ODE solution?

#+REVEAL: split

We can also look at the =generated_quantities=, i.e. the values from the =return= statement in our model

#+BEGIN_SRC julia
quantities_prior = generated_quantities(model, MCMCChains.get_sections(chain_prior, :parameters))
print(quantities_prior[1])
#+END_SRC

#+RESULTS:
: (R0 = 31.06593882253981, recovery_time = 9.924227728868157, infected = [20.135496891976175, 267.5387933367594, 638.3259546937711, 632.4208659251071, 575.6411969096877, 520.778868925039, 470.89294272632065, 425.7604715323202, 384.95061249728093, 348.05199150979433, 314.6901297730605, 284.52608963917, 257.25336296664375, 232.59481447030583])

This is simply a =Matrix= of =NamedTuple=

#+BEGIN_SRC julia
typeof(quantities_prior)
#+END_SRC

#+RESULTS:
: Matrix{NamedTuple{(:R0, :recovery_time, :infected), Tuple{Float64, Float64, Vector{Float64}}}}[90m (alias for [39m[90mArray{NamedTuple{(:R0, :recovery_time, :infected), Tuple{Float64, Float64, Array{Float64, 1}}}, 2}[39m[90m)[39m

#+REVEAL: split

We can convert it into a =Chains= using a utility function of mine

#+BEGIN_SRC julia
chain_quantities_prior = to_chains(quantities_prior);

p = plot(legend=false, size=(600, 300))
plot_trajectories!(p, group(chain_quantities_prior, :infected); n = 1000)
hline!([N], color="red")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/5bc3a173351c09a67a80b68fdc2f3b9267ef7af4.png]]

#+HTML: <div class="x-small-text">

*NOTE:* =to_chains= is not part of "official" Turing.jl because the =return= can contain /whatever/ you want, and so it's not always possible to convert into a =Chains=

#+HTML: </div>

#+REVEAL: split

And the quantiles for the trajectories

#+BEGIN_SRC julia
p = plot(legend=false, size=(600, 300))
plot_trajectory_quantiles!(p, group(chain_quantities_prior, :infected))
hline!(p, [N], color="red")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/21acfe1e8d2d2784548d455e81fbae739072fd28.png]]

#+REVEAL: split


#+BEGIN_SRC julia
DataFrame(quantile(chain_quantities_prior[:, [:R0, :recovery_time], :]))
#+END_SRC

#+RESULTS:
#+begin_export html
<div><div style = "float: left;"><span>2×6 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">parameters</th><th style = "text-align: left;">2.5%</th><th style = "text-align: left;">25.0%</th><th style = "text-align: left;">50.0%</th><th style = "text-align: left;">75.0%</th><th style = "text-align: left;">97.5%</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Symbol" style = "text-align: left;">Symbol</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: left;">R0</td><td style = "text-align: right;">0.514661</td><td style = "text-align: right;">2.1126</td><td style = "text-align: right;">3.69669</td><td style = "text-align: right;">7.2244</td><td style = "text-align: right;">59.5376</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: left;">recovery_time</td><td style = "text-align: right;">0.705466</td><td style = "text-align: right;">1.19966</td><td style = "text-align: right;">1.8608</td><td style = "text-align: right;">3.44473</td><td style = "text-align: right;">29.4863</td></tr></tbody></table></div>
#+end_export

Compare to our prior knowledge of $R_0 \in [1, 2]$ and $(1/\gamma) \approx 1$ for influenza

Do we really need probability mass on $R_0 \ge 10$?

** TASK What's wrong with the current prior?

Here's the SIR model

\begin{equation*}
\begin{split}
  \dv{S}{t} &= - \beta S \frac{I}{N} \\
  \dv{I}{t} &= \beta S \frac{I}{N} - \gamma I \\
  \dv{R}{t} &= \gamma I
\end{split}
\end{equation*}

** SOLUTION Recovery time shouldn't be several years

We mentioned recovery time, which is expressed as $1 / \gamma$, is ~1 week

While we're clearly putting non-zero probability on regions near 0, i.e. /long/ recovery times

#+BEGIN_SRC julia
plot(truncated(Normal(0.4, 0.5); lower=0), label=nothing, title="γ", size=(500, 300))
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/0c811fb684f86d4d0f68b2e7a7d1836e293f54e2.png]]

We should probably be putting less probability mass near 0

** SOLUTION $\gamma$ should not be larger than 1

\begin{equation*}
\begin{split}
  \dv{S}{t} &= - \beta S \frac{I}{N} \\
  \dv{I}{t} &= \beta S \frac{I}{N} - {\color{red} \gamma I} \\
  \dv{R}{t} &= {\color{red} \gamma I}
\end{split}
\end{equation*}

If $\gamma > 1$ ⟹ (R)ecovered increase by /more/ than the (I)nfected

⟹ _healthy people are recovering_

#+REVEAL: :frag (appear)
Now, I'm no epidemiologist, but that doesn't seem right

#+REVEAL: split

Maybe something like

#+BEGIN_SRC julia
plot(Beta(2, 5), label="new", size=(500, 300))
plot!(truncated(Normal(0.4, 0.5); lower=0), label="old", color="red")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/fa0872fb9b3d3beea9866c1760af900ffcadef47.png]]

- [X] Bounded at 1
- [X] Allows smaller values (i.e. longer recovery time) but rapidly decreases near zero

** SOLUTION What if $\beta > N$?
Then for $t = 0$ we have
\begin{equation*}
\dv{S}{t} \bigg|_{t = 0} = - \beta S \frac{I}{N} > - N (N - 1) \frac{1}{N} = - (N - 1)
\end{equation*}

i.e. we /immediately/ infect everyone on the very first time-step

Also doesn't seem very realistic

#+REVEAL: split

/But/ under our current prior does this matter?

#+BEGIN_SRC julia
# ℙ(β > N) = 1 - ℙ(β ≤ N)
1 - cdf(truncated(Normal(2, 1); lower=0), N)
#+END_SRC

#+RESULTS:
: 0.0

Better yet

#+BEGIN_SRC julia
quantile(truncated(Normal(2, 1); lower=0), 0.95)
#+END_SRC

#+RESULTS:
: 3.6559843567138275

i.e. 95% of the probability mass falls below ~3.65

⟹ Current prior for $\beta$ is fine (✓)

#+REVEAL: split

Before we change the prior, let's also make it a bit easier to change the prior using =@submodel=

#+HTML: <div class="fragment (appear)">

=@submodel= allows you call models within models, e.g.

#+BEGIN_SRC julia
@model function A()
    x_hidden_from_B ~ Normal()
    x = x_hidden_from_B + 100
    return x
end

@model function B()
    @submodel x = A()
    y ~ Normal(x, 1)

    return (; x, y)
end
#+END_SRC

#+RESULTS:
: B (generic function with 2 methods)

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

#+BEGIN_SRC julia
# So if we call `B` we only see `x` and `y`
println(B()())
#+END_SRC

#+RESULTS:
: (x = 100.6700504957998, y = 100.59882836474439)

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

#+BEGIN_SRC julia
# While if we sample from `B` we get the latent variables
println(rand(B()))
#+END_SRC

#+RESULTS:
: (x_hidden_from_B = 1.1620740097515572, y = 100.82791610035471)

#+HTML: </div>

#+REVEAL: split

And if you want to make sure you avoid clashes of variable-names, we can specify a =prefix=

#+BEGIN_SRC julia
@model A() = (x ~ Normal(); return x + 100)

@model function B()
    # Given it a prefix to use for the variables in `A`.
    @submodel prefix=:inner x_inner = A()
    x ~ Normal(x_inner, 1)

    return (; x_inner, x)
end
#+END_SRC

#+RESULTS:
: B (generic function with 2 methods)

#+BEGIN_SRC julia
print(rand(B()))
#+END_SRC

#+RESULTS:
: (var"inner.x" = 0.5588685738879569, x = 102.56600691107558)

#+REVEAL: split

=@submodel= is useful as it allows you to:
1. Easy to swap out certain parts of your model.
2. Can re-use models across projects and packages.

When working on larger projects, this really shines

#+REVEAL: split

Equipped with =@submodel= we can replace

#+BEGIN_SRC julia
β ~ truncated(Normal(2, 1); lower=0)
γ ~ truncated(Normal(0.4, 0.5); lower=0)
#+END_SRC

with

#+BEGIN_SRC julia
@submodel p = prior(problem_wrapper)
#+END_SRC

#+HTML: <div class="fragment (appear)">

where =prior= can be something like

#+BEGIN_SRC julia
@model function prior_original(problem_wrapper::SIRProblem)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)

    return [β, γ]
end

@model function prior_improved(problem_wrapper::SIRProblem)
    # NOTE: Should probably also lower mean for `β` since
    # more probability mass on small `γ` ⟹ `R0 =  β / γ` grows.
    β ~ truncated(Normal(1, 1); lower=0)
    # NOTE: New prior for `γ`.
    γ ~ Beta(2, 5)

    return [β, γ]
end
#+END_SRC

#+RESULTS:
: prior_improved (generic function with 2 methods)

#+HTML: </div>

#+REVEAL: split

#+BEGIN_SRC julia
@model function epidemic_model(
    problem_wrapper::AbstractEpidemicProblem,
    prior  # NOTE: now we just pass the prior as an argument
)
    # NOTE: And use `@submodel` to embed the `prior` in our model.
    @submodel p = prior(problem_wrapper)

    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem_wrapper.problem, p=p)  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)                  # Solve!

    # Extract the `infected`.
    sol_for_observed = infected(problem_wrapper, sol)[2:end]

    # NOTE: `arraydist` is faster for larger dimensional problems,
    # and it does not require explicit allocation of the vector.
    in_bed ~ arraydist(NegativeBinomial2.(sol_for_observed .+ 1e-5, ϕ))

    β, γ = p[1:2]
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed, in_bed = in_bed)
end
#+END_SRC

#+REVEAL: split

#+HTML: <div class="x-small-text">

Another neat trick is to return early if integration fail

#+HTML: </div>

#+BEGIN_SRC julia
@model function epidemic_model(
    problem_wrapper::AbstractEpidemicProblem,
    prior  # now we just pass the prior as an argument
)
    # And use `@submodel` to embed the `prior` in our model.
    @submodel p = prior(problem_wrapper)

    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem_wrapper.problem, p=p)  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)                  # Solve!

    # NOTE: Return early if integration failed.
    if !issuccess(sol)
        Turing.@addlogprob! -Inf  # NOTE: Causes automatic rejection.
        return nothing
    end

    # Extract the `infected`.
    sol_for_observed = infected(problem_wrapper, sol)[2:end]

    # `arraydist` is faster for larger dimensional problems,
    # and it does not require explicit allocation of the vector.
    in_bed ~ arraydist(NegativeBinomial2.(sol_for_observed .+ 1e-5, ϕ))

    β, γ = p[1:2]
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
end
#+END_SRC

#+RESULTS:
: epidemic_model (generic function with 2 methods)

#+REVEAL: split

Equipped with this we can now easily construct /two/ models using different priors

#+BEGIN_SRC julia
sir = SIRProblem(N);
model_original = epidemic_model(sir, prior_original);
model_improved = epidemic_model(sir, prior_improved);
#+END_SRC

#+RESULTS:

but using the same underlying =epidemic_model=

#+BEGIN_SRC julia
chain_prior_original = sample(model_original, Prior(), 10_000; progress=false);
chain_prior_improved = sample(model_improved, Prior(), 10_000; progress=false);
#+END_SRC

#+RESULTS:

#+REVEAL: split

Let's compare the resulting priors over some of the quantities of interest

#+REVEAL: split

Let's compare the =generated_quantities=, e.g. $R_0$

#+HTML: <div class="small-text">

#+BEGIN_SRC julia
chain_quantities_original = to_chains(
    generated_quantities(
        model_original,
        MCMCChains.get_sections(chain_prior_original, :parameters)
    );
);

chain_quantities_improved = to_chains(
    generated_quantities(
        model_improved,
        MCMCChains.get_sections(chain_prior_improved, :parameters)
    );
);
#+END_SRC

#+RESULTS:

#+HTML: </div>

#+BEGIN_SRC julia
p = plot(; legend=false, size=(500, 200))
plot_trajectories!(p, group(chain_quantities_original, :infected); n = 100, trajectory_color="red")
plot_trajectories!(p, group(chain_quantities_improved, :infected); n = 100, trajectory_color="blue")
hline!([N], color="red", linestyle=:dash)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/26821687da0892468280513773b9a64d7dce9405.png]]

#+REVEAL: split

#+BEGIN_SRC julia
plt1 = plot(legend=false)
plot_trajectory_quantiles!(plt1, group(chain_quantities_original, :infected))
hline!(plt1, [N], color="red", linestyle=:dash)

plt2 = plot(legend=false)
plot_trajectory_quantiles!(plt2, group(chain_quantities_improved, :infected))
hline!(plt2, [N], color="red", linestyle=:dash)

plot(plt1, plt2, layout=(2, 1))
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/aeead7124fd9708aec4e02205c817050c831e511.png]]

This makes sense: if half of the population is immediately infected ⟹ number of infected tapers wrt. time as they recover

#+REVEAL: split

For =model_improved= we then have

#+BEGIN_SRC julia
print(DataFrame(quantile(chain_quantities_improved[:, [:R0, :recovery_time], :])))
#+END_SRC

Compare to =model_original=

#+BEGIN_SRC julia
print(DataFrame(quantile(chain_quantities_original[:, [:R0, :recovery_time], :])))
#+END_SRC


* Benchmarking                                                     :noexport:
#+BEGIN_SRC julia
using BenchmarkTools
using TuringBenchmarking
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia
using ReverseDiff, Zygote
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia
suite = TuringBenchmarking.make_turing_suite(
    model_conditioned;
    adbackends=[Turing.Essential.ForwardDiffAD{40,true}(),]
);
run(suite)
#+END_SRC

#+RESULTS:
: 2-element BenchmarkTools.BenchmarkGroup:
:   tags: []
:   "linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(29.706 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(116.476 μs)
:   "not_linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(30.364 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(139.420 μs)

** Model v2
#+BEGIN_SRC julia
using SciMLSensitivity
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia
value(x) = DiffEqBase.value(x)
value(x::AbstractArray{<:ReverseDiff.TrackedReal}) = map(value, x)
#+END_SRC

#+RESULTS:
: value (generic function with 2 methods)

#+BEGIN_SRC julia
@model function sir_model_v2(
    num_days;
    # Default parameters to set up the problem.
    tspan = (0.0, float(num_days)),
    u0 = [N - 1, 1, 0.0],
    problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)
    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem, p=[β, γ])
    sol = solve(problem_new, saveat=1)
    sol_for_observed = sol[2, 1:14]

    # Observe.
    # Add a small constant to `sol_for_observed` to make things more stable.
    # TODO: Speed up even further using `lazyarray`.
    in_bed ~ arraydist(NegativeBinomial2.(ϕ, sol_for_observed .+ 1e-5))

    # Some quantities we might be interested in.
    return (R = β / γ, recovery_time = 1 / γ, in_bed = in_bed)
end
#+END_SRC

#+RESULTS:
: sir_model_v2 (generic function with 2 methods)

#+BEGIN_SRC julia
model_v2 = sir_model_v2(length(data.in_bed))
model_v2_conditioned = model_v2 | (in_bed = data.in_bed, )
#+END_SRC

#+RESULTS:
: Model(
:   args = (:num_days, :tspan, :u0, :problem)
:   defaults = (:tspan, :u0, :problem)
:   context = ConditionContext((in_bed = [3, 8, 26, 76, 225, 298, 258, 233, 189, 128, 68, 29, 14, 4],), DynamicPPL.DefaultContext())
: )

#+BEGIN_SRC julia
# Load the different AD packages.
using ForwardDiff: ForwardDiff
using ReverseDiff: ReverseDiff
using Zygote: Zygote

using SciMLSensitivity
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia
# Load package for convenient benchmarking.
using TuringBenchmarking
#+END_SRC

#+BEGIN_SRC julia
suite = TuringBenchmarking.make_turing_suite(
    model_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
    ]
)
run(suite)
#+END_SRC

#+RESULTS:
: 2-element BenchmarkTools.BenchmarkGroup:
:   tags: []
:   "linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(27.966 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(114.943 μs)
:   "not_linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(29.664 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(136.706 μs)

#+BEGIN_SRC julia
suite = TuringBenchmarking.make_turing_suite(
    model_v2_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
    ]
)
run(suite)
#+END_SRC

#+RESULTS:
: 2-element BenchmarkTools.BenchmarkGroup:
:   tags: []
:   "linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(19.393 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(95.070 μs)
:   "not_linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(19.801 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(122.377 μs)

Here it doesn't make much of a difference because we're working with so few observations, but indeed =model_v2= is somewhat faster than =model= for both evaluation and gradient computation (using =ForwardDiff=).

* TODO Showing off
** =Gibbs=

Simple linear regression model

#+BEGIN_SRC julia
using LinearAlgebra: I

@model function linear_regression(X)
    num_params = size(X, 1)
    β ~ MvNormal(ones(num_params))
    σ² ~ InverseGamma(2, 3)
    y ~ MvNormal(vec(β' * X), σ² * I)
end

# Generate some dummy data.
X = randn(2, 10_000)
lin_reg = linear_regression(X)
true_vals = rand(lin_reg)

# Condition.
lin_reg_conditioned = lin_reg | (y = true_vals.y,)
#+END_SRC

#+RESULTS:
: Model(
:   args = (:X,)
:   defaults = ()
:   context = ConditionContext(
:     (y = [0.3242032989648078, 1.0927828698345088, -0.7332477681370562, -5.062789065066403, -0.5510236918192273, 3.849292275620334, -3.1453844688196386, -1.0761023645067103, -0.35920155367909423, 1.1632762258546507  …  1.557561970476609, 3.575676520486435, 0.07694907753939595, -2.102027398588007, -8.469490043524004, 3.4605534596978993, 4.7196306430050665, -1.7976651698542838, -0.6009882061621101, 1.397842282973244],),
:     DynamicPPL.DefaultContext()
:   )
: )

#+REVEAL: split

Can of course just use =HMC= on it

#+BEGIN_SRC julia
chain_hmc = sample(lin_reg_conditioned, HMC(1e-3, 32), 1_000);
MCMCChains.ess_rhat(chain_hmc)
#+END_SRC

#+RESULTS:
:RESULTS:
: [32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:02[39m
: ESS
:  [1m parameters [0m [1m      ess [0m [1m    rhat [0m [1m ess_per_sec [0m
:  [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m     Float64 [0m
: 
:         β[1]   433.7061    1.0007      155.9533
:         β[2]   434.2894    1.0014      156.1630
:           σ²   749.5058    1.0003      269.5095
: 
:END:

But, how about we combine *Elliptical Slice Sampling (=ESS=)*, which is very effective on Gaussian priors, together /with/ =HMC= on $\sigma^2$ (which is non-Gaussian and so ESS doesn't apply)

#+BEGIN_SRC julia
chain_ess_hmc = sample(lin_reg_conditioned, Gibbs(ESS(:β), HMC(1e-3, 32, :σ²)), 1_000);
MCMCChains.ess_rhat(chain_ess_hmc)
#+END_SRC

#+RESULTS:
:RESULTS:
: Sampling: 100%|█████████████████████████████████████████| Time: 0:00:02
: ESS
:   parameters        ess      rhat   ess_per_sec 
:       Symbol    Float64   Float64       Float64 
: 
:         β[1]    68.1919    1.0140       32.6433
:         β[2]   170.8266    1.0017       81.7744
:           σ²   156.3485    1.0043       74.8437
: 
:END:

This is much improved (depending on which random seed you're using)!

* Concluding remarks
** TODO Julia: The Good, the Bad, and the Ugly

An honest take from a little Norwegian boy

*** The Good
- Speed
- Composability (thank you multiple dispatch)
- No need to tie yourself to an underlying computational framework (looking at you Python)
- Interactive
- /Transparency/

Most of these you have already, but the transparency is maybe not something we've seen too much of

#+REVEAL: split

#+BEGIN_SRC julia
f(x) = 2x
#+END_SRC

#+RESULTS:
: f (generic function with 1 method)

#+BEGIN_SRC julia
f(1)
#+END_SRC

#+RESULTS:
: 2

#+REVEAL: split

You can inspect the type-inferred and lowered code

#+BEGIN_SRC julia
@code_typed f(1)
#+END_SRC

#+RESULTS:
: CodeInfo(
: [90m1 ─[39m %1 = Base.mul_int(2, x)[36m::Int64[39m
: [90m└──[39m      return %1
: ) => Int64

#+REVEAL: split

You can inspect the LLVM code

#+BEGIN_SRC julia
@code_llvm f(1)
#+END_SRC

#+RESULTS:
: [90m;  @ In[2]:1 within `f`[39m
: [95mdefine[39m [36mi64[39m [93m@julia_f_2659[39m[33m([39m[36mi64[39m [95msignext[39m [0m%0[33m)[39m [0m#0 [33m{[39m
: [91mtop:[39m
: [90m; ┌ @ int.jl:88 within `*`[39m
:    [0m%1 [0m= [96m[1mshl[22m[39m [36mi64[39m [0m%0[0m, [33m1[39m
: [90m; └[39m
:   [96m[1mret[22m[39m [36mi64[39m [0m%1
: [33m}[39m

#+REVEAL: split

And even the resulting machine code

#+BEGIN_SRC julia
@code_native f(1)
#+END_SRC

#+RESULTS:
#+begin_example
	.text
	.file	"f"
	.globl	julia_f_2696                    # -- Begin function julia_f_2696
	.p2align	4, 0x90
	.type	julia_f_2696,@function
julia_f_2696:                           # @julia_f_2696
; ┌ @ In[2]:1 within `f`
	.cfi_startproc
# %bb.0:                                # %top
; │┌ @ int.jl:88 within `*`
	leaq	(%rdi,%rdi), %rax
; │└
	retq
.Lfunc_end0:
	.size	julia_f_2696, .Lfunc_end0-julia_f_2696
	.cfi_endproc
; └
                                        # -- End function
	.section	".note.GNU-stack","",@progbits
#+end_example

It really just depends on which level of "I hate my life" you're currently at

*** The Bad

*** The Ugly

*** Overall

* References
- https://mc-stan.org/users/documentation/case-studies/boarding_school_case_study.html

* Debug                                                            :noexport:
** https://github.com/JuliaDiff/ReverseDiff.jl/pull/216?notification_referrer_id=NT_kwDOAKj85LM1MzQ1OTA1MDM5OjExMDc0Nzg4
#+BEGIN_SRC julia
using ReverseDiff: ReverseDiff

import SciMLBase
import DiffEqBase
import DiffEqBase: solve_up
ReverseDiff.@grad function solve_up(prob, sensealg, u0, p, args...; kwargs...)
    out = DiffEqBase._solve_adjoint(prob, sensealg, ReverseDiff.value(u0),
                                    ReverseDiff.value(p),
                                    SciMLBase.ReverseDiffOriginator(), args...; kwargs...)
    function actual_adjoint(_args...)
        original_adjoint = out[2](_args...)
        if isempty(args) # alg is missing
            tuple(original_adjoint[1:4]..., original_adjoint[6:end]...)
        else
            original_adjoint
        end
    end
    out[1], actual_adjoint
end

function ReverseDiff.TrackedArray(sol::DiffEqBase.ODESolution)
    DiffEqBase.ODESolution(
        TrackedArray(sol.u),
        sol.u_analytic,
        sol.errors,
        sol.t,
        sol.k,
        sol.prob,
        sol.alg,
        sol.interp,
        sol.dense,
        sol.tslocation,
        sol.destats,
        sol.alg_choice,
        sol.retcode
    )
end

expr = @macroexpand ReverseDiff.@grad function f(x; y=1)
    return x, identity
end
expr |> Base.remove_linenums!

# This ends up being called in the forward pass (see the expansion of the `ReverseDiff.@grad` above),
# and so we could potentially overload this `track` to call to just track the internal solution instead.
# FIXME: Currently doesn't work because a) `sol.u isa Vector{<:Vector}` and b) `ODESolution(::Vector{<:TrackedVector})`
# doesn't work either.
function ReverseDiff.track(::ODESolution{T,N}, tp::Vector{ReverseDiff.AbstractInstruction}=ReverseDiff.InstructionTape()) where {T,N}

    u_tracked = map(Base.Fix2(ReverseDiff.track, tp), sol.u)
    Ttracked = eltype(eltype(u_tracked))  # TODO: Infer from `T` instead?
    DiffEqBase.ODESolution{Ttracked,N}(
        u_tracked,
        sol.u_analytic,
        sol.errors,
        sol.t,
        sol.k,
        sol.prob,
        sol.alg,
        sol.interp,
        sol.dense,
        sol.tslocation,
        sol.destats,
        sol.alg_choice,
        sol.retcode
    )
end

function ReverseDiff.track(::typeof(solve_up), _args...; kwargs...)
    # TODO: Insert adjoint def here.
    sol_up_pullback(args...; kwargs...) = 0, identity
    args = (x,)
    tp = ReverseDiff.tape(args...)
    output_value, back = sol_up_pullback(args...; kwargs...)
    output = ReverseDiff.track(output_value, tp)
    ReverseDiff.record!(
        tp,
        ReverseDiff.SpecialInstruction,
        solve_up,
        args,
        output,
        (back, sol_up_pullback, kwargs)
    )
    return output
end

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
sol_tracked = solve(problem_tracked)

DiffEqBase.ODESolution(
    map(ReverseDiff.track, sol.u),
    sol.u_analytic,
    sol.errors,
    sol.t,
    sol.k,
    sol.prob,
    sol.alg,
    sol.interp,
    sol.dense,
    sol.tslocation,
    sol.destats,
    sol.alg_choice,
    sol.retcode
)
typeof(sol)

sol.u


#+END_SRC

#+RESULTS:

** https://github.com/TuringLang/Turing.jl/issues/1934
#+BEGIN_SRC julia
Pkg.develop(path="/home/tor/Projects/public/ReverseDiff.jl/")
#+END_SRC

#+RESULTS:
: [32m[1m   Resolving[22m[39m package versions...
: [32m[1m    Updating[22m[39m `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
:  [90m [37e2e3b7] [39m[93m~ ReverseDiff v1.14.4 ⇒ v1.14.4 `~/Projects/public/ReverseDiff.jl`[39m
: [32m[1m    Updating[22m[39m `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
:  [90m [37e2e3b7] [39m[93m~ ReverseDiff v1.14.4 ⇒ v1.14.4 `~/Projects/public/ReverseDiff.jl`[39m

#+BEGIN_SRC julia
using ForwardDiff: ForwardDiff
using ReverseDiff: ReverseDiff
using Zygote: Zygote

# Also allow `AbstractArray{<:ReverseDiff.TrackedReal}`.
# PR: https://github.com/SciML/SciMLSensitivity.jl/pull/769
using SciMLSensitivity: SciMLSensitivity
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

# Allow 
const RT = AbstractArray{<:ReverseDiff.TrackedReal}
function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT,
                             p::RT, args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0, p::RT,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT, p,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end
#+END_SRC

#+BEGIN_SRC julia
problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
# problem_tracked = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
sol_tracked = solve(problem_tracked)
sol_tracked = DiffEqBase.solve_up(problem_tracked, nothing, u0, ReverseDiff.track([0.001, 0.01]))

sol_tracked

ReverseDiff.value(sol_tracked)

f(p) = sum(solve(remake(problem, p=p)))

x = [1.75,0 .7]
ReverseDiff.gradient(f, x)
first(Zygote.gradient(f, [0.1, 0.1])) ≈ ReverseDiff.gradient(f, [0.1, 0.1])

ForwardDiff.gradient(f, [0.001, 0.01])

#+END_SRC

#+BEGIN_SRC julia
using LogDensityProblems, LogDensityProblemsAD
using SciMLSensitivity

@model demo() = (x ~ truncated(Normal(); lower=0); y ~ Normal(x, 1))

m = demo() | (y = 1.0,)
f = Turing.LogDensityFunction(m)

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f; compile=Val(true)), f.varinfo[:])

function Turing.LogDensityFunction(model::DynamicPPL.Model)
    return Turing.LogDensityFunction(
        DynamicPPL.VarInfo(model),
        model,
        DynamicPPL.SampleFromPrior(),
        DynamicPPL.DefaultContext(),
    )
end

f = Turing.LogDensityFunction(model_v2_conditioned)
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f; compile=Val(true)), f.varinfo[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), f.varinfo[:])


LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), f.varinfo[:])

LogDensityProblems.logdensity(::typeof(h), θ::AbstractVector) = h(θ)
LogDensityProblems.capabilities(::typeof(h)) = LogDensityProblems.LogDensityOrder{0}()
LogDensityProblems.dimension(::typeof(h)) = 2
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(true)), vi[:][1:2])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), vi[:][1:2])


∂f = ADgradient(:ReverseDiff, f; compile=Val(true))
LogDensityProblems.logdensity_and_gradient(∂f, vi[:])

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f), vi[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ForwardDiff, f), vi[:])

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f), vi[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ForwardDiff, f), vi[:])

∂f = ADgradient(:ReverseDiff, f)
LogDensityProblems.logdensity_and_gradient(∂f, vi[:])

Zygote.gradient(loss, [0.001, 0.01])
ReverseDiff.gradient(loss, [0.001, 0.01])

problem = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
problem.f(zero(u0), u0, ReverseDiff.track([0.001, 0.01]), 1)
problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)
Array(sol)
sol[2, 1:14]
typeof(sol)

?solve

@code_warntype solve(problem)

import SciMLBase
import DiffEqBase
import DiffEqBase: solve_up
ReverseDiff.@grad function solve_up(prob, sensealg, u0, p, args...; kwargs...)
    out = DiffEqBase._solve_adjoint(prob, sensealg, ReverseDiff.value(u0),
                                    ReverseDiff.value(p),
                                    SciMLBase.ReverseDiffOriginator(), args...; kwargs...)
    function actual_adjoint(_args...)
        original_adjoint = out[2](_args...)
        if isempty(args) # alg is missing
            tuple(original_adjoint[1:4]..., original_adjoint[6:end]...)
        else
            original_adjoint
        end
    end
    Array(out[1]), actual_adjoint
end

Base.IndexStyle(::ODESolution) = IndexCartesian()

problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
problem_tracked = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
sol_tracked = DiffEqBase.solve_up(problem_tracked, nothing, u0, ReverseDiff.track([0.001, 0.01]))
sol_tracked.value.retcode

sol_tracked.deriv

ReverseDiff.gradient(loss, [0.001, 0.01])

IndexStyle(sol)
typeof(sol)
typeof(sol_tracked)
typeof(sol_tracked.value)
print(sol_tracked.value)

size(sol_tracked)

@which IndexStyle(sol)

IndexStyle(typeof(sol))
IndexStyle(Matrix{Float64})

IndexStyle(sol.u)

function h(θ)
    sol = solve(remake(problem, p=[θ[1], θ[2]]), saveat=1)
    # @assert ReverseDiff.value(sol) isa ODESolution
    sum(sol)
end
ReverseDiff.gradient(h, [0.001, 0.01])

p_tracked = ReverseDiff.track([0.001, 0.01])
vcat(p_tracked[1], p_tracked[2])
[p_tracked[1], p_tracked[2]]

# ATTEMPT
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

const RT = AbstractArray{<:ReverseDiff.TrackedReal}
function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT,
                             p::RT, args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0, p::RT,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT, p,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end

ReverseDiff.collect(p_tracked)
vcat(p_tracked[1], p_tracked[2])

reduce(vcat, [p_tracked[1], p_tracked[2]])


## ReverseDiff.jl debugging
tape = ReverseDiff.GradientTape(f, (f.varinfo[:], ))
compiled_tape = ReverseDiff.compile(tape)
compiled_tape.tape.tape
compiled_tape.forward_exec
compiled_tape.reverse_exec[end]()
#+END_SRC

** ReverseDiffDebugUtils.jl
#+BEGIN_SRC julia
using Pkg; Pkg.activate(mktempdir())
Pkg.develop("GraphGraphviz")
Pkg.develop("ReverseDiffDebugUtils")
# Pkg.add(name="Distributions", version="0.25.76")
using GraphGraphviz, ReverseDiffDebugUtils
using Turing, LogDensityProblems, LogDensityProblemsAD
using ReverseDiff

function Turing.LogDensityFunction(model::DynamicPPL.Model)
    return Turing.LogDensityFunction(
        DynamicPPL.VarInfo(model),
        model,
        DynamicPPL.SampleFromPrior(),
        DynamicPPL.DefaultContext(),
    )
end

### Setup ###
function sim(I, P)
    yvec = Vector{Int}(undef, I * P)
    ivec = similar(yvec)
    pvec = similar(yvec)

    beta = rand(Normal(), I)
    theta = rand(Normal(), P)

    n = 0
    for i in 1:I, p in 1:P
        n += 1
        ivec[n] = i
        pvec[n] = p
        yvec[n] = rand(BernoulliLogit(theta[p] - beta[i]))
    end

    return yvec, ivec, pvec, theta, beta
end

P = 1000
y, i, p, _, _ = sim(20, P);

### Turing ###
# naive implementation
@model function irt_naive(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)

    for n in eachindex(y)
        y[n] ~ Bernoulli(logistic(theta[p[n]] - beta[i[n]]))
    end
end

# performant model
@model function irt(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)
    Turing.@addlogprob! sum(logpdf.(BernoulliLogit.(theta[p] .- beta[i]), y))

    return (; theta, beta)
end

# Instantiate
model = irt(y, i, p);

ℓ = Turing.LogDensityFunction(model)
θ = ℓ.varinfo[:]
f = Base.Fix1(LogDensityProblems.logdensity, ℓ)

plotgraphviz(f, θ; display=true)

# Check if ForwardDiff breaks.
using UnPack
beta, theta = model();
x = vcat(theta, beta)

function evaluate(model::Turing.Model, x)
    @unpack y, i, p, I, P = model.args
    theta, beta = x[1:P], x[P + 1:end]
    return sum(logpdf.(BernoulliLogit.(theta[p] - beta[i]), y))
end

using ForwardDiff
ForwardDiff.gradient(Base.Fix1(evaluate, model), x)

## ReverseDiff
# pre-record a GradientTape for `f` using inputs of shape 100x100 with Float64 elements
const f_tape = GradientTape(f, (rand(100, 100), rand(100, 100)))

# compile `f_tape` into a more optimized representation
const compiled_f_tape = compile(f_tape)

# some inputs and work buffers to play around with
a, b = rand(100, 100), rand(100, 100)
inputs = (a, b)
results = (similar(a), similar(b))
all_results = map(DiffResults.GradientResult, results)
cfg = GradientConfig(inputs)


julia> tape = ReverseDiff.GradientTape(prob, (θ,));

julia> ctape = ReverseDiff.compile(tape);

julia> inputs = (θ,);

julia> results = (similar(θ), );

julia> cfg = ReverseDiff.GradientConfig(inputs);

julia> ReverseDiff.gradient!(results, ctape, inputs)
([2.1135668756925874, 6.145143149741308, 1.48401765986875, 0.6022383996781915, -0.5138652356820355, -8.103361690307636, 7.128312271724506, 12.584105906811907, -0.7254654355635614, 5.5804778350827045  …  -380.5829914906268, -123.15954482703319, 24.61418749530236, 307.33373871567056, 355.8706214939681, 117.79962719545168, 137.4162416377521, 121.1634598283426, 89.1211227217943, 47.44409385216913],)


# Using `DistributionsAD.flatten` to address performance.
using Distributions, DistributionsAD
using ConstructionBase
using ConcreteStructs

"""
    get_logpdf_expr(Tdist)

Return a flattened method for computing the logpdf of `Tdist`.
"""
function get_logpdf_expr(Tdist)
    x = gensym()
    fnames = fieldnames(Tdist)
    func = Expr(:->, 
                Expr(:tuple, fnames..., x), 
                Expr(:block,
                     Expr(:call, :logpdf,
                          Expr(:call, :($(Tdist)), fnames...),
                          x,
                          )
                     )
                )
    return :(flatten(::Type{<:$Tdist}) = $func)
end

make_logpdf_closure(::Type{D}) where {D} = (x, args...) -> logpdf(D(args...), x)

# 1. Use `flatten` to extract a, well, flattened `logpdf`.
eval(get_logpdf_expr(BernoulliLogit))

# 2. [OPTIONAL] Use `StructArrays.jl` to avoid the initial call to the constructor entirely.

# 3. Define a "fast" logpdf method.
@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NamedTuple{names}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,names}
    # Get the flatten expression.
    f = flatten(D)

    args = [:(dist.v.$n) for n in names]
    return :(sum($f.($(args...), x)))
end

# HACK: Constructor which doesn't apply the schema.
function StructArrayNoSchema(::Type{T}, cols::C) where {T, C<:StructArrays.Tup}
    N = isempty(cols) ? 1 : ndims(cols[1])
    StructArrays.StructArray{T, N, typeof(cols)}(cols)
end

@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NamedTuple{names}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,names}
    # Get the flatten expression.
    f = make_logpdf_closure(D)

    args = [:(dist.v.$n) for n in names]
    return :(sum($f.(x, $(args...))))
end

@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NTuple{N}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,N}
    # Get the flatten expression.
    f = make_logpdf_closure(D)

    args = [:(StructArrays.component(dist.v, $i)) for i = 1:N]
    return :(sum($f.(x, $(args...))))
end


# 4. Convenience method for constructing `StructArray` without 
function DistributionsAD.arraydist(::Type{D}, args...) where {D<:Distribution}
    return DistributionsAD.arraydist(D, args)
end
DistributionsAD.arraydist(::Type{D}; args...) where {D<:Distribution} = DistributionsAD.arraydists(D, NamedTuple(args))
function DistributionsAD.arraydist(d::Type{D}, args::NamedTuple) where {D<:Distribution}
    return DistributionsAD.arraydist(StructArrayNoSchema(d, args))
end
function DistributionsAD.arraydist(d::Type{D}, args::Tuple) where {D<:Distribution}
    return DistributionsAD.arraydist(StructArrayNoSchema(d, args))
end

# 5. Type-piracy so we can make use of `~`.
function Distributions.logpdf(dist::Product{<:Any,<:UnivariateDistribution,<:StructVector}, x::AbstractVector{<:Real})
    return fast_logpdf(dist, x)
end


@model function irt_vroom(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)
    y ~ arraydist(BernoulliLogit, theta[p] - beta[i])

    return (; theta, beta)
end
model = irt_vroom(y, i, p);
suite = TuringBenchmarking.make_turing_suite(
    model,
    adbackends = [TuringBenchmarking.ForwardDiffAD{40}(), TuringBenchmarking.ReverseDiffAD{true}()]
);
run(suite)
#+END_SRC

** Implementation of ABC

#+BEGIN_SRC julia
using Turing: OrderedDict
using Turing.DynamicPPL: AbstractPPL

@model function demo()
    x ~ Normal()
    y ~ Normal(x, 1)
end

model = demo() | (y = 2.0, )

function split_latent_data(d::OrderedDict, data_variable)
    ks = collect(keys(d))
    data_keys = filter(ks) do k
        AbstractPPL.subsumes(data_variable, k)
    end
    θ = map(Base.Fix1(getindex, d), filter(∉(data_keys), ks))
    data = map(Base.Fix1(getindex, d), data_keys)

    return θ, data
end


struct ABC{F,V,T} <: AbstractMCMC.AbstractSampler
    stat::F
    data_variable::V
    threshold::T
end

ABC(data_var, threshold) = ABC(identity, data_var, threshold)

compute_distance(sampler::ABC, data_true, data_candidate) = mean(abs2.(data_true .- data_candidate))

function AbstractMCMC.step(rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::ABC; kwargs...)
    # NOTE: Only works if you've used the `model | (x=..., )` conditioning functionality.
    data_true = get(DynamicPPL.conditioned(model), sampler.data_variable)

    joint_model = DynamicPPL.decondition(model, sampler.data_variable)
    d = rand(Turing.OrderedDict, joint_model)
    # Figure out which variables represents data.
    θ, _ = split_latent_data(d, sampler.data_variable)
    return θ, θ
end

function AbstractMCMC.step(rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::ABC, θ_current; kwargs...)
    # NOTE: Only works if you've used the `model | (x=..., )` conditioning functionality.
    data_true = get(DynamicPPL.conditioned(model), sampler.data_variable)

    joint_model = DynamicPPL.decondition(model, sampler.data_variable)
    d = rand(Turing.OrderedDict, joint_model)
    θ_candidate, data_candidate = split_latent_data(d, sampler.data_variable)

    dist = compute_distance(sampler, data_true, data_candidate)

    # TODO Use `threshold` from sampler.
    threshold = 0.1
    θ_next = dist < threshold ? θ_candidate : θ_current

    return θ_next, θ_next
end

function AbstractMCMC.bundle_samples(
    samples::AbstractVector{<:AbstractVector{<:Real}}, model::DynamicPPL.Model, sampler::ABC, ::Any, ::Type{MCMCChains.Chains};
    param_names=missing, discard_initial=0, thinning=1
)
    # Check if we received any parameter names.
    if ismissing(param_names)
        param_names = [Symbol(:param_, i) for i in 1:length(keys(samples[1]))]
    else
        # Generate new array to be thread safe.
        param_names = Symbol.(param_names)
    end

    return MCMCChains.Chains(samples, param_names, (parameters = param_names,); start=discard_initial + 1, thin=thinning)
end
#+END_SRC

#+RESULTS:

*** Testing it
#+BEGIN_SRC julia
rng = Random.MersenneTwister(42)
spl = ABC(@varname(y), 0.1)
θ, _ = AbstractMCMC.step(rng, model, spl)
θ, _ = AbstractMCMC.step(rng, model, spl, θ);
θ
#+END_SRC

#+RESULTS:
: 1-element Vector{Float64}:
:  -0.3010545352363764


#+BEGIN_SRC julia
samples = AbstractMCMC.sample(model, spl, 10_000)
chain = AbstractMCMC.bundle_samples(samples, model, spl, first(samples), MCMCChains.Chains; param_names=[:x])
#+END_SRC

#+RESULTS:
#+begin_example
Chains MCMC chain (10000×1×1 Array{Float64, 3}):

Iterations        = 1:1:10000
Number of chains  = 1
Samples per chain = 10000
parameters        = x

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m      ess [0m [1m    rhat [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m

           x    0.9199    0.7270     0.0073    0.0340   395.2847    0.9999

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

           x   -0.4766    0.4041    0.9247    1.3853    2.2981
#+end_example

#+BEGIN_SRC julia
plot(chain)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/b12d5fdf6ab17538f62e35571fde7d083632df95.svg]]
