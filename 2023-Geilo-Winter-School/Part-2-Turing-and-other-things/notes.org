#+SETUPFILE: ~/org-blog/setup.org
#+OPTIONS: tex:t toc:nil date:nil
#+PROPERTY: header-args:R :session :exports both :eval no
#+PROPERTY: header-args:julia :session geilo-winter-school :tangle tmp.jl :exports both :kernel julia-4-threads-1.8
#+EXCLUDE_TAGS: noexport
#+TODO: TODO(t) TASK(q) WARNING(w) | DONE(d) SOLUTION(s)

#+REVEAL_ROOT: file:///home/tor/Projects/mine/presentations/2021-10-31-turing-demo/assets/reveal.js-4.1.0/
#+REVEAL_MATHJAX_URL: file:///home/tor/Projects/mine/presentations/2021-10-31-turing-demo/assets/MathJax-2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_TITLE_SLIDE: <div><div style="margin: -200px auto; opacity: 0.2;"><p><object data="https://turing.ml/dev/assets/images/turing-logo-wide.svg"></object></p></div><h1>Bayesian inference and other things</h1><h2>with the TuringLang ecosystem</h2><p><a href="https://github.com/TuringLang">https://github.com/TuringLang</a></p></div>
#+REVEAL_EXTRA_CSS: custom.css
#+REVEAL_THEME: white
#+REVEAL_PLUGINS: (markdown zoom)
#+HTML_HEAD: <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

#+AUTHOR: Tor Erlend Fjelde
#+TITLE: =Turing.jl=

* Before we begin

Make sure you're in the correct directory

#+begin_src sh
pwd
#+end_src

#+RESULTS:
: /home/tor/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things

Then run something like (depending on which OS you are on)

#+begin_src sh :eval no
julia --project
#+end_src

or if you're already in a REPL, do

#+begin_src julia
]activate .
#+end_src

#+RESULTS:
: [32m[1m  Activating[22m[39m project at `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things`

to activate the project

#+REVEAL: split

And just to check that you're in the correct one

#+begin_src julia
]status
#+end_src

#+RESULTS:
#+begin_example
[36m[1mProject[22m[39m GeiloWinterSchool2023Part2 v0.1.0
[32m[1mStatus[22m[39m `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things/Project.toml`
 [90m [6e4b80f9] [39mBenchmarkTools v1.3.2
 [90m [336ed68f] [39mCSV v0.10.9
 [90m [a93c6f00] [39mDataFrames v1.4.4
 [90m [2b5f629d] [39mDiffEqBase v6.114.1
 [90m [0c46a032] [39mDifferentialEquations v7.6.0
 [90m [31c24e10] [39mDistributions v0.25.80
 [90m [f6369f11] [39mForwardDiff v0.10.34
 [90m [6fdf6af0] [39mLogDensityProblems v2.1.0
 [90m [996a588d] [39mLogDensityProblemsAD v1.1.1
 [90m [429524aa] [39mOptim v1.7.4
 [90m [37e2e3b7] [39mReverseDiff v1.14.4 `https://github.com/torfjelde/ReverseDiff.jl#torfjelde/sort-of-support-non-linear-indexing`
 [90m [0bca4576] [39mSciMLBase v1.81.0
[32m⌃[39m[90m [1ed8b502] [39mSciMLSensitivity v7.17.1
 [90m [f3b207a7] [39mStatsPlots v0.15.4
 [90m [fce5fe82] [39mTuring v0.24.0
 [90m [0db1332d] [39mTuringBenchmarking v0.1.1
 [90m [e88e6eb3] [39mZygote v0.6.55
[36m[1mInfo[22m[39m Packages marked with [32m⌃[39m have new versions available and may be upgradable.
#+end_example

Download and install dependencies

#+begin_src julia 
]instantiate
#+end_src

#+RESULTS:

#+REVEAL: split

And finally, do

#+begin_src julia 
using GeiloWinterSchool2023Part2
#+end_src

#+RESULTS:
: [36m[1m[ [22m[39m[36m[1mInfo: [22m[39mPrecompiling GeiloWinterSchool2023Part2 [66107438-c220-4dd3-9f45-fde6aa9dc0eb]

to get some functionality I've implemented for the occasion

* The story of a little Norwegian boy

#+REVEAL: split

There once was a little Norwegian boy

#+DOWNLOADED: file:///home/tor/Downloads/471337_3317365246956_1262712540_o.jpg @ 2023-01-18 14:49:24
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-49-24_471337_3317365246956_1262712540_o.jpg]]


#+REVEAL: split

When this little boy was 20 years old, he was working as a parking guard near Preikestolen/Pulpit rock


#+DOWNLOADED: file:///home/tor/Downloads/Preikestolen-plateau-Go-Fjords-Bob-Engelsen-P1026771_kljg5o.jpeg @ 2023-01-18 14:57:08
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-57-08_Preikestolen-plateau-Go-Fjords-Bob-Engelsen-P1026771_kljg5o.jpeg]]


#+REVEAL: split

One day it was raining and there was nobody hiking, which of course mean that the little boy was bored

When his boss wasn't looking, the little 20 year-old boy had an amazing idea

#+begin_quote
Maybe I can use this method of Mr. Bayes I learned a bit about yesteday to model football / Premier League?
#+end_quote

The little boy got very excited and started looking for stuff on the big interwebs

#+REVEAL: split

The little boy came across this

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230118_144454.png @ 2023-01-18 14:46:02
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-46-02_Screenshot_20230118_144454.png]]

And got _very_ excited

#+REVEAL: split

But at the time, the little boy knew next to _nothing_ about programming

The little boy couldn't write the code to do the inference

#+ATTR_REVEAL: :frag (appear)
Whence the little boy became a _sad_ little boy :(

#+REVEAL: split

But time heals all wounds, and at some point the little boy learned Python

And in Python, the boy found the /probabilistic programming language/ =pymc3=

#+HTML: <div class="fragment (appear)">
#+begin_quote
Maybe I can use =pymc3= to perform inference in that Premier League model?
#+end_quote

And so the sad boy once more became an excited little boy :)
#+HTML: </div>

#+REVEAL: split

But there was a problem

The boy wanted to write a for-loop in his model, but the model didn't want it to be so and complained!

#+ATTR_REVEAL: :frag (appear)
The boy got frustrated and gave up, once more becoming a _sad_ little boy :(

#+HTML: <div class="small-text">

#+ATTR_REVEAL: :frag (appear)
The boy should have known that the computational backend =theano= that was used by =pymc3= at the time couldn't handle a for-loop, and instead he should have used =scan=. But the boy was only 20-something years old; he didn't know.

#+HTML: </div>

#+REVEAL: split

Some years later the boy discovers a programming language called _Julia_

#+HTML: <div class="fragment (appear)">
Julia makes a few promises
#+ATTR_REVEAL: :frag (appear)
1. It's fast. Like /really/ fast.
2. It's interactive; doesn't require full compilation for you to play with it.
3. You don't have to specify types everywhere.
#+HTML: </div>

#+HTML: <div class="fragment (appear)">
The boy thinks

#+begin_quote
Wait, but this sounds like Python but the only difference is that...I CAN WRITE FOR-LOOPS WITHOUT FEELING BAD ABOUT IT?!
#+end_quote

Yes, yes he could

#+ATTR_REVEAL: :frag (appear)
And 3.5 years later, he's still writing for-loops. Well, sort of.
#+HTML: </div>

** But it really is fast                                           :noexport:


#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230118_153122.png @ 2023-01-18 15:31:28
#+CAPTION: https://julialang.org/benchmarks/ (2023-01-18)
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_15-31-28_Screenshot_20230118_153122.png]]

#+REVEAL: split

And the consequences are
#+ATTR_REVEAL: :frag (appear)
- Even a naive implementation will be fast; and if you want to go faster, you just optimize the code /in Julia/!
  - No need to drop down to C(++)
- ⟹ "Every" package is written in Julia, so when you encounter a bug you can more easily debug because /the code is in the same language as you're writing code in/!
- ⟹ Same for /extending/ packages!
  - Moreover, thanks to multiple dispatch, you can change a function /on the fly/ to experiment with code you don't even own!
* Why Turing.jl?

#+REVEAL: split

Duh, you use Turing.jl *so you get to use Julia*

#+HTML: <div class="fragment (appear)">

But even in Julia, other PPLS exist

But Turing.jl is very similar to Julia in "philosophy":
- Flexiblility
- Ease-of-use
- Speed (potentially with a bit of effort)

#+HTML: </div>
* Running example

We'll work with an outbreak of influenza A (H1N1) in 1978 at a British boarding school

- 763 male students -> 512 of which became ill
- Reported that one infected boy started the epidemic
- Observations are number of boys in bed over 14 days

Data are freely available in the R package =outbreaks=, maintained as part of the [[http://www.repidemicsconsortium.org/][R Epidemics Consortium]]

#+HTML: <div class="fragment (appear)">

Data + part of the analysis is /heavily/ inspired by https://mc-stan.org/users/documentation/case-studies/boarding_school_case_study.html

Stan definitively beats Turing.jl when it comes to great write-ups like these

#+HTML: </div>

** Getting the data                                                :noexport:
#+begin_src sh
mkdir -p data
#+end_src

#+RESULTS:

#+begin_src R
install.packages("outbreaks")
#+end_src

#+begin_src R
library(outbreaks)
#+end_src

#+begin_src R
influenza_england_1978_school
#+end_src

#+RESULTS:
| 1978-01-22 |   3 |   0 |
| 1978-01-23 |   8 |   0 |
| 1978-01-24 |  26 |   0 |
| 1978-01-25 |  76 |   0 |
| 1978-01-26 | 225 |   9 |
| 1978-01-27 | 298 |  17 |
| 1978-01-28 | 258 | 105 |
| 1978-01-29 | 233 | 162 |
| 1978-01-30 | 189 | 176 |
| 1978-01-31 | 128 | 166 |
| 1978-02-01 |  68 | 150 |
| 1978-02-02 |  29 |  85 |
| 1978-02-03 |  14 |  47 |
| 1978-02-04 |   4 |  20 |

#+begin_src R
write.csv(influenza_england_1978_school, file="data/influenza_england_1978_school.csv")
#+end_src

** Loading into Julia

#+begin_src julia
# Load the dataframe.
using Dates
using DataFrames, CSV

N = 763
data = DataFrame(CSV.File(joinpath("data", "influenza_england_1978_school.csv")));
print(data)
#+end_src

#+RESULTS:
#+begin_example
[1m14×4 DataFrame[0m
[1m Row [0m│[1m Column1 [0m[1m date       [0m[1m in_bed [0m[1m convalescent [0m
     │[90m Int64   [0m[90m Date       [0m[90m Int64  [0m[90m Int64        [0m
─────┼───────────────────────────────────────────
   1 │       1  1978-01-22       3             0
   2 │       2  1978-01-23       8             0
   3 │       3  1978-01-24      26             0
   4 │       4  1978-01-25      76             0
   5 │       5  1978-01-26     225             9
   6 │       6  1978-01-27     298            17
   7 │       7  1978-01-28     258           105
   8 │       8  1978-01-29     233           162
   9 │       9  1978-01-30     189           176
  10 │      10  1978-01-31     128           166
  11 │      11  1978-02-01      68           150
  12 │      12  1978-02-02      29            85
  13 │      13  1978-02-03      14            47
  14 │      14  1978-02-04       4            20
#+end_example

Notice that each of the columns have associated types

#+REVEAL: split

Let's visualize the samples:

#+begin_src julia
using StatsPlots
#+end_src

#+RESULTS:

#+begin_src julia
# StatsPlots.jl provides this convenient macro `@df` for plotting a `DataFrame`.
@df data scatter(:date, :in_bed, label=nothing, ylabel="Number of students in bed")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5fa270eb9d3e9e96f9f979dd99e7be88bd571385.svg]]

* Differential equations

#+REVEAL: split

Suppose we have some function $f$ which describes how a state $x$ evolves wrt. $t$
\begin{equation*}
\frac{\mathrm{d} x}{\mathrm{d} t} = f(x, t)
\end{equation*}
which we then need to integrate to obtain the actual state at some time $t$
\begin{equation*}
x(t) = \int_{0}^{t} \frac{\mathrm{d} x}{\mathrm{d} t} \mathrm{t} = \int_{0}^{t} f(x, t) \mathrm{t}
\end{equation*}

In many interesting scenarios numerical methods are required to obtain $x(t)$

** In Julia
Everything related to differential equations is provided by =DifferentialEquations.jl=

#+REVEAL: split

And I really do mean [[https://docs.sciml.ai/DiffEqDocs/stable/][/everything/]]

#+HTML: <div class="side-by-side">

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230119_194737.png @ 2023-01-19 19:48:23
[[file:.notes/attachments/Differential_equations/2023-01-19_19-48-23_Screenshot_20230119_194737.png]]

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230119_194838.png @ 2023-01-19 19:48:41
[[file:.notes/attachments/Differential_equations/2023-01-19_19-48-41_Screenshot_20230119_194838.png]]

#+HTML: </div>

** Example: SIR model
One particular example of an (ordinary) differential equation that you might have seen recently is the *SIR model* used in epidemiology

#+DOWNLOADED: file:///home/tor/Downloads/sir_illu.png @ 2023-01-19 19:56:00
#+ATTR_ORG: :width 600
#+CAPTION: https://covid19.uclaml.org/model.html (2023-01-19)
[[file:.notes/attachments/Differential_equations/2023-01-19_19-56-00_sir_illu.png]]

#+REVEAL: split

The temporal dynamics of the sizes of each of the compartments are governed by the following system of ODEs:
\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= \beta S \frac{I}{N} - \gamma I \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= \gamma I
\end{split}
\end{equation*}
where
- $S(t)$ is the number of people susceptible to becoming infected (no immunity),
- $I(t)$ is the number of people currently infected (and infectious),
- $R(t)$ is the number of recovered people (we assume they remain immune indefinitely),
- $β$ is the constant rate of infectious contact between people,
- $\gamma$ the constant recovery rate of infected individuals

#+REVEAL: split

Converting this ODE into code is just

#+begin_src julia
using DifferentialEquations

function SIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population
    S, I, R = u
    β, γ = p

    du[1] = dS = -β * I * S / N
    du[2] = dI = β * I * S / N - γ * I
    du[3] = dR = γ * I
end
#+end_src

#+RESULTS:
: SIR! (generic function with 1 method)


Not too bad!

#+REVEAL: split

#+begin_src julia
# Figure out the timespan we're working with.
last(data.date) - first(data.date) + Day(1) # add 1 since we have an observation for every day
#+end_src

#+RESULTS:
: 14 days

That is, we have 14 days of observations.

#+begin_src julia
# Include 0 because that's the initial condition before any observations.
tspan = (0.0, 14.0)

# Initial conditions are:
#   S(0) = N - 1; I(0) = 1; R(0) = 0
u0 = [N - 1, 1, 0.0]
#+end_src

#+RESULTS:
: 3-element Vector{Float64}:
:  762.0
:    1.0
:    0.0

#+REVEAL: split

Now we just need to define the overall problem and we can solve:

#+begin_src julia
# Just to check that everything works, we'll just use some "totally random" values for β and γ:
problem = let β = 2.0, γ = 0.6
    ODEProblem(SIR!, u0, tspan, (β, γ))
end
#+end_src

#+RESULTS:
: [38;2;86;182;194mODEProblem[0m with uType [38;2;86;182;194mVector{Float64}[0m and tType [38;2;86;182;194mFloat64[0m. In-place: [38;2;86;182;194mtrue[0m
: timespan: (0.0, 14.0)
: u0: 3-element Vector{Float64}:
:  762.0
:    1.0
:    0.0

#+REVEAL: split

Aaaand

#+begin_src julia
sol = solve(problem)
#+end_src

#+RESULTS:
#+begin_example
retcode: Success
Interpolation: specialized 4th order "free" interpolation, specialized 2nd order "free" stiffness-aware interpolation
t: 23-element Vector{Float64}:
  0.0
  0.0023558376404244326
  0.025914214044668756
  0.11176872871946908
  0.26714420676761075
  0.47653584778586056
  0.7436981238065388
  1.0701182881347182
  1.4556696154809898
  1.8994815718103506
  2.4015425820305163
  2.9657488203418048
  3.6046024613854746
  4.325611232479916
  5.234036476235002
  6.073132270491685
  7.323851265223563
  8.23100744184026
  9.66046960467715
 11.027717843180652
 12.506967592177675
 13.98890399536329
 14.0
u: 23-element Vector{Vector{Float64}}:
 [762.0, 1.0, 0.0]
 [761.9952867607622, 1.003297407481751, 0.001415831756055325]
 [761.9472927630898, 1.036873767352754, 0.015833469557440357]
 [761.7584189579304, 1.1690001128296739, 0.0725809292398516]
 [761.353498610305, 1.4522140137552049, 0.19428737593979384]
 [760.6490369821046, 1.9447820690728455, 0.4061809488225752]
 [759.3950815454128, 2.8210768113583082, 0.7838416432288186]
 [757.0795798160242, 4.437564277195732, 1.4828559067800167]
 [752.6094742865345, 7.552145919430467, 2.8383797940350495]
 [743.573784947305, 13.823077731564027, 5.603137321131049]
 [724.5575481927715, 26.909267078762316, 11.533184728466205]
 [683.6474029897502, 54.51612001957392, 24.836476990675976]
 [598.1841629858786, 109.41164143668018, 55.40419557744127]
 [450.08652743810205, 192.396449154863, 120.51702340703504]
 [259.11626253270623, 256.9925778114915, 246.89115965580237]
 [148.3573731526537, 240.10301213899098, 374.53961470835543]
 [76.52998017846475, 160.6373332952353, 525.8326865263001]
 [55.70519994004921, 108.7634182279299, 598.531381832021]
 [41.39587834423381, 55.09512088924873, 666.5090007665176]
 [35.87067243374374, 27.821838135708532, 699.3074894305479]
 [33.252184333490774, 13.087185981359177, 716.6606296851502]
 [32.08996839417716, 6.105264616193066, 724.8047669896299]
 [32.08428686823946, 6.070415830241046, 724.8452973015196]
#+end_example


#+REVEAL: split

We didn't specify a solver

DifferentialEquations.jl uses =AutoTsit5(Rosenbrock32())= by default 

Which is a composition between

- =Tsit5= (4th order Runge-Kutta), and
- =Rosenbrock32= (3rd order stiff solver)

with automatic switching between the two

#+REVEAL: split

=AutoTsit5(Rosenbrock32())= covers many use-cases well, but see

- https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/
- https://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/

for more info on choosing a solver

#+REVEAL: split

But this is the resulting solution

#+begin_src julia
plot(
    sol,
    linewidth=2, xaxis="Time in days", label=["Suspectible" "Infected" "Recovered"],
    alpha=0.5, size=(500, 300)
)
scatter!(1:14, data.in_bed, label="Data", color="black")
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/9c2493efe3c238c996080bda5befe46a0647a6c5.svg]]
[[file:./.ob-jupyter/2361d9cd46e80d7fd046b04a898c61eee1e12ecf.svg]]
:END:

Doesn't really match the data; let's do better

#+REVEAL: split

We can also find the optimal values for $\beta$ and $\gamma$ by just minimizing some loss, e.g. sum-of-squares

\begin{equation*}
\ell(\beta, \gamma) = \sum_{i = 1}^{14} \bigg( F(u_0, t_i;\ \beta, \gamma) - y_i \bigg)^2
\end{equation*}

where $\big( y_i \big)_{i = 1}^{14}$ are the observations, $F$ is the integrated system

#+HTML: <div class="fragment (appear)">

First we define the loss

#+begin_src julia
# Define the loss function.
function loss(problem, p)
    # `remake` just, well, remakes the `problem` with `p` replaced.
    problem = remake(problem, p=p)
    # To ensure we get solutions _exactly_ at the timesteps of interest,
    # i.e. every day we have observations, we use `saveat=1` to tell `solve`
    # to save at every timestep (which is one day).
    sol = solve(problem, saveat=1)
    # Extract the 2nd state, the (I)infected, for the dates with observations.
    sol_for_observed = sol[2, 2:15]
    # Compute the sum-of-squares of the infected vs. data.
  #+end_srcsum(abs2.(sol_for_observed - data.in_bed))
end
#+end_src

#+RESULTS:
: loss (generic function with 1 method)

#+HTML: </div>

#+REVEAL: split

And the go-to for optimization in Julia is [[https://julianlsolvers.github.io/Optim.jl/stable/][Optim.jl]]

#+begin_src julia
using Optim
# An alternative to writing `y -> f(x, y)` is `Base.Fix1(f, x)` which
# avoids potential performance issues with global variables (as our `problem` here).
opt = optimize(
    p -> loss(problem, p), # function to minimize
    [0, 0],                # lower bounds on variables
    [Inf, Inf],            # upper bounds on variables
    [2.0, 0.5],            # initial values
    Fminbox(NelderMead())  # optimization alg
) 
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
MethodError: [0mCannot `convert` an object of type [92mVector{Float64}[39m[0m to an object of type [91mFloat64[39m
[0mClosest candidates are:
[0m  convert(::Type{T}, [91m::Gray24[39m) where T<:Real at ~/.julia/packages/ColorTypes/1dGw6/src/conversions.jl:114
[0m  convert(::Type{T}, [91m::Gray[39m) where T<:Real at ~/.julia/packages/ColorTypes/1dGw6/src/conversions.jl:113
[0m  convert(::Type{R}, [91m::T[39m) where {R<:Real, T<:ReverseDiff.TrackedReal} at ~/.julia/packages/ReverseDiff/ftbg2/src/tracked.jl:262
[0m  ...

Stacktrace:
 [1] setproperty!(x::OnceDifferentiable{Float64, Vector{Float64}, Vector{Float64}}, f::Symbol, v::Vector{Float64})
   @ Base ./Base.jl:39
 [2] value!!(obj::OnceDifferentiable{Float64, Vector{Float64}, Vector{Float64}}, x::Vector{Float64})
   @ NLSolversBase ~/.julia/packages/NLSolversBase/kavn7/src/interface.jl:9
 [3] value!!
   @ ~/.julia/packages/Optim/tP8PJ/src/multivariate/solvers/constrained/fminbox.jl:71 [inlined]
 [4] initial_state(method::NelderMead{Optim.AffineSimplexer, Optim.AdaptiveParameters}, options::Optim.Options{Float64, Nothing}, d::Optim.BarrierWrapper{OnceDifferentiable{Float64, Vector{Float64}, Vector{Float64}}, Optim.BoxBarrier{Vector{Int64}, Vector{Float64}}, Float64, Float64, Vector{Float64}}, initial_x::Vector{Float64})
   @ Optim ~/.julia/packages/Optim/tP8PJ/src/multivariate/solvers/zeroth_order/nelder_mead.jl:171
 [5] optimize(df::OnceDifferentiable{Float64, Vector{Float64}, Vector{Float64}}, l::Vector{Int64}, u::Vector{Float64}, initial_x::Vector{Float64}, F::Fminbox{NelderMead{Optim.AffineSimplexer, Optim.AdaptiveParameters}, Float64, Optim.var"#49#51"}, options::Optim.Options{Float64, Nothing})
   @ Optim ~/.julia/packages/Optim/tP8PJ/src/multivariate/solvers/constrained/fminbox.jl:322
 [6] #optimize#65
   @ ~/.julia/packages/Optim/tP8PJ/src/multivariate/solvers/constrained/fminbox.jl:269 [inlined]
 [7] optimize (repeats 2 times)
   @ ~/.julia/packages/Optim/tP8PJ/src/multivariate/solvers/constrained/fminbox.jl:259 [inlined]
 [8] top-level scope
   @ In[14]:4
#+end_example
:END:

#+REVEAL: split

#+begin_src julia
β,#+end_srcm.minimizer(opt)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: syntax: incomplete: premature end of input
: 
: Stacktrace:
:  [1] top-level scope
:    @ In[15]:1
:END:

#+REVEAL: split

#+begin_src julia
# Solve for the obtained parameters.
problem = remake(problem, p=(β, λ))
sol = solve(problem)

# Plot the solution.
plot(sol, linewidth=2, xaxis="Time in days", label=["Suspectible" "Infected" "Recovered"], alpha=0.5)
# And the data.
scatter!(1:14, data.in_bed, label="Data", color="black")
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: UndefVarError: β not defined
: 
: Stacktrace:
:  [1] top-level scope
:    @ In[16]:2
:END:

That's better than our /totally/ "random" guess from earlier!

** Example: SEIR model

Now we're going to add another compartment to our SIR model: the /(E)xposed/ state

\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} E}{\mathrm{d} t} &= \frac{\beta I S}{N} - \sigma E \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= \sigma E - \gamma I \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= \gamma I
\end{split}
\end{equation*}

where we've added a new parameter $\sigma$ describing the fraction of people who develop observable symptoms in this time

** TASK Solve the SEIR model using Julia

#+begin_src julia :eval no
function SEIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population

    S, E, I, R = u  # have ourselves an additional state!
    β, γ, σ = p     # and an additional parameter!

    # TODO: Implement yah fool!
    du[1] = nothing
    du[2] = nothing
    du[3] = nothing
    du[4] = nothing
end
#+end_src

*BONUS:* Use =Optim.jl= to find minimizers of sum-of-squares

** SOLUTION Solve the SEIR model using Julia

#+begin_src julia
function SEIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population
    S, E, I, R = u  # have ourselves an additional state!
    β, γ, σ = p     # and an additional parameter!

    # Might as well cache these computations.
    βSI = β * S * I / N
    σE = σ * E
    γI = γ * I

    du[1] = -βSI
    du[2] = βSI - σE
    du[3] = σE - γI
    du[4] = γI
end
#+end_src

#+RESULTS:
: SEIR! (generic function with 1 method)

#+REVEAL: split

#+begin_src julia
problem_seir = let u0 = [N - 1, 0, 1, 0], β = 2.0, γ = 0.6, σ = 0.8
    ODEProblem(SEIR!, u0, tspan, (β, γ, σ))
end
#+end_src

#+RESULTS:
: [38;2;86;182;194mODEProblem[0m with uType [38;2;86;182;194mVector{Int64}[0m and tType [38;2;86;182;194mFloat64[0m. In-place: [38;2;86;182;194mtrue[0m
: timespan: (0.0, 14.0)
: u0: 4-element Vector{Int64}:
:  762
:    0
:    1
:    0

#+begin_src julia
sol_seir = solve(problem_seir, saveat=1)
#+end_src

#+RESULTS:
#+begin_example
retcode: Success
Interpolation: 1st order linear
t: 15-element Vector{Float64}:
  0.0
  1.0
  2.0
  3.0
  4.0
  5.0
  6.0
  7.0
  8.0
  9.0
 10.0
 11.0
 12.0
 13.0
 14.0
u: 15-element Vector{Vector{Float64}}:
 [762.0, 0.0, 1.0, 0.0]
 [760.1497035901518, 1.277915971753478, 1.0158871356490553, 0.5564933024456415]
 [757.5476928906271, 2.425869618233348, 1.6850698824327135, 1.341367608706787]
 [753.081189706403, 4.277014534677882, 2.9468385687120784, 2.6949571902067637]
 [745.3234082630842, 7.455598293492679, 5.155811621098981, 5.065181822323938]
 [731.9851682751213, 12.855816151849933, 8.960337047554939, 9.198678525473571]
 [709.5042941973462, 21.77178343781762, 15.384985521594787, 16.338936843241182]
 [672.8733895183619, 35.77263271085456, 25.88133104438007, 28.472646726403138]
 [616.390571176038, 55.97177756967422, 42.09614416178476, 48.54150709250279]
 [536.453596476594, 81.2428045994271, 64.9673325777641, 80.33626634621449]
 [436.43708330634297, 106.04037246704702, 92.9550757379631, 127.56746848864664]
 [329.60092931771436, 121.08020372279418, 120.48402926084937, 191.83483769864185]
 [233.8471941518982, 119.43669383157659, 139.3233304893263, 270.3927815271987]
 [160.88805352426687, 102.7399386960996, 143.3826208089892, 355.9893869706441]
 [111.72261866282292, 79.02493776169311, 132.78384886713565, 439.46859470834806]
#+end_example

#+REVEAL: split

#+begin_src julia
plot(sol_seir, linewidth=2, xaxis="Time in days", label=["Suspectible" "Exposed" "Infected" "Recovered"], alpha=0.5)
scatter!(1:14, data.in_bed, label="Data")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6f8d8279a7c43754f49fd2070b2f300eafcd2fc0.svg]]

Don't look so good. Let's try Optim.jl again.

#+REVEAL: split

#+begin_src julia
function loss_seir(problem, p)
    problem = remake(problem, p=p)
    sol = solve(problem, saveat=1)
    # NOTE: 3rd state is now the (I)nfectious compartment!!!
    sol_for_observed = sol[3, 2:15]
    return sum(abs2.(sol_for_observed - data.in_bed))
end
#+end_src

#+RESULTS:
: loss_seir (generic function with 1 method)

#+begin_src julia
opt = optimize(Base.Fix1(loss_seir, problem_seir), [0, 0, 0], [Inf, Inf, Inf], [2.0, 0.5, 0.9], Fminbox(NelderMead()))
#+end_src

#+RESULTS:
#+begin_example
,* Status: success (reached maximum number of iterations)

,* Candidate solution
   Final objective value:     3.115978e+03

,* Found with
   Algorithm:     Fminbox with Nelder-Mead

,* Convergence measures
   |x - x'|               = 0.00e+00 ≤ 0.0e+00
   |x - x'|/|x'|          = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|         = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|/|f(x')| = 0.00e+00 ≤ 0.0e+00
   |g(x)|                 = 1.77e+05 ≰ 1.0e-08

,* Work counters
   Seconds run:   2  (vs limit Inf)
   Iterations:    3
   f(x) calls:    13259
   ∇f(x) calls:   1
#+end_example

#+REVEAL: split

#+begin_src julia
β, γ, σ = Optim.minimizer(opt)
#+end_src

#+RESULTS:
: 3-element Vector{Float64}:
:  4.853872993924619
:  0.4671485850111774
:  0.8150294098438762

#+begin_src julia
sol_seir = solve(remake(problem_seir, p=(β, γ, σ)), saveat=1)
plot(sol_seir, linewidth=2, xaxis="Time in days", label=["Suspectible" "Exposed" "Infected" "Recovered"], alpha=0.5)
scatter!(1:14, data.in_bed, label="Data", color="black")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/31ffc1a24f87c69ea5100dc0d6788fb037f3877b.svg]]

#+REVEAL: split

#+begin_quote
But...but these are _point estimates_! What about distributions? WHAT ABOUT UNCERTAINTY?!
#+end_quote

No, no that's fair.

Let's do some Bayesian inference then.

BUT FIRST!

** Making our future selves less annoyed

It's annoying to have all these different loss-functions for /both/ =SIR!= and =SEIR!=

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# Abstract type which we can use to dispatch on.
abstract type AbstractEpidemicProblem end

struct SIRProblem{P} <: AbstractEpidemicProblem
    problem::P
    N::Int
end

function SIRProblem(N::Int; u0 = [N - 1, 1, 0.], tspan = (0, 14), p = [2.0, 0.6])
    return SIRProblem(ODEProblem(SIR!, u0, tspan, p), N)
end
#+end_src

#+RESULTS:
: SIRProblem

Then we can just construct the problem as

#+begin_src julia
sir = SIRProblem(N);
#+end_src

#+RESULTS:

#+HTML: </div>

#+REVEAL: split

And to make it a bit easier to work with, we add some utility functions

#+begin_src julia
# General.
parameters(prob::AbstractEpidemicProblem) = prob.problem.p
initial_state(prob::AbstractEpidemicProblem) = prob.problem.u0
population(prob::AbstractEpidemicProblem) = prob.N

# Specializations.
susceptible(::SIRProblem, u::AbstractMatrix) = u[1, :]
infected(::SIRProblem, u::AbstractMatrix) = u[2, :]
recovered(::SIRProblem, u::AbstractMatrix) = u[3, :]
#+end_src

#+RESULTS:
: recovered (generic function with 1 method)

So that once we've solved the problem, we can easily extract the compartment we want, e.g.

#+begin_src julia
sol = solve(sir.problem, saveat=1)
infected(sir, sol)
#+end_src

#+RESULTS:
#+begin_example
15-element Vector{Float64}:
   1.0
   4.026799533924021
  15.824575905720002
  56.779007685250534
 154.4310579906169
 248.98982384839158
 243.67838619968524
 181.93939659551987
 120.64627375763271
  75.92085282572398
  46.58644927641269
  28.214678599716418
  16.96318676577873
  10.158687874394722
   6.070415830241046
#+end_example

** TASK Implement =SEIRProblem=

#+begin_src julia :eval no
struct SEIRProblem <: AbstractEpidemicProblem
    # ...
end

function SEIRProblem end

susceptible
exposed
infected
recovered
#+end_src

** SOLUTION Implement =SEIRProblem=

#+begin_src julia
struct SEIRProblem{P} <: AbstractEpidemicProblem
    problem::P
    N::Int
end

function SEIRProblem(N::Int; u0 = [N - 1, 0, 1, 0.], tspan = (0, 14), p = [4.5, 0.45, 0.8])
    return SEIRProblem(ODEProblem(SEIR!, u0, tspan, p), N)
end

susceptible(::SEIRProblem, u::AbstractMatrix) = u[1, :]
exposed(::SEIRProblem, u::AbstractMatrix) = u[2, :]
infected(::SEIRProblem, u::AbstractMatrix) = u[3, :]
recovered(::SEIRProblem, u::AbstractMatrix) = u[4, :]
#+end_src

#+RESULTS:
: recovered (generic function with 2 methods)

#+REVEAL: split

Now, given a =problem= and a =sol=, we can query the =sol= for the =infected= state without explicit handling of which =problem= we're working with

#+begin_src julia
seir = SEIRProblem(N);
sol = solve(seir.problem, saveat=1)
infected(seir, sol)
#+end_src

#+RESULTS:
#+begin_example
15-element Vector{Float64}:
   1.0
   1.9941817088874336
   6.958582307202902
  23.9262335176065
  74.23638542794971
 176.98368495653585
 276.06126059898344
 293.92632518571605
 249.92836195453708
 189.07578975511504
 134.2373192679034
  91.82578430804273
  61.38108478932363
  40.42264366743211
  26.357816296754425
#+end_example

** Same =loss= for both!

#+begin_src julia
function loss(problem_wrapper::AbstractEpidemicProblem, p)
    # NOTE: Extract the `problem` from `probl#+end_srcr`.
    problem = remake(problem_wrapper.problem, p=p)
    sol = solve(problem, saveat=1)
    # NOTE: Now this is completely general!
    sol_for_observed = infected(problem_wrapper, sol)[2:end]
    return sum(abs2.(sol_for_observed - data.in_bed))
end
#+end_src

#+RESULTS:
: loss (generic function with 2 methods)

#+begin_src julia 
loss(SIRProblem(N), [2.0, 0.6])
#+end_src

#+RESULTS:
: 50257.83978134881

#+begin_src julia 
loss(SEIRProblem(N), [2.0, 0.6, 0.8])
#+end_src

#+RESULTS:
: 287325.105532706

* Bayesian inference

#+REVEAL: split

First off

#+begin_src julia
using Turing
#+end_src

#+RESULTS:

#+REVEAL: split

This dataset really doesn't have too many observations

#+begin_src julia
nrow(data)
#+end_src

#+RESULTS:
: 14

So reporting a single number for parameters is maybe being a /bit/ too confident

#+REVEAL: split

We'll use the following model
\begin{equation*}
\begin{split}
  \beta &\sim \mathcal{N}_{ + }(2, 1) \\
  \gamma &\sim \mathcal{N}_{ + }(0.4, 0.5) \\
  \phi^{-1} &\sim \mathrm{Exponential}(1/5) \\
   y_i &\sim \mathrm{NegativeBinomial2}\big(F(u_0, t_i;\ \beta, \gamma), \phi \big)
\end{split}
\end{equation*}
where 
- $\big( y_i \big)_{i = 1}^{14}$ are the observations, 
- $F$ is the integrated system, and
- $\phi$ is the over-dispersion parameter.

#+REVEAL: split

#+begin_src julia
plot(
    plot(truncated(Normal(2, 1); lower=0), label=nothing, title="β"),
    plot(truncated(Normal(0.4, 0.5); lower=0), label=nothing, title="γ"),
    plot(Exponential(1/5), label=nothing, title="ϕ⁻¹"),
    layout=(3, 1)
)
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/4e14c8699cef3e14fa4f4b2e4ac090a8e9ce7a35.svg]]
[[file:./.ob-jupyter/1e1c654633358f993fa1fb0cee5411ffeaa13971.svg]]
:END:

#+REVEAL: split

#+begin_src julia
# `NegativeBinomial` already exists, so let's just make an alternative constructor instead.
function NegativeBinomial2(mean, ϕ)
    p = 1/(1 + mean/ϕ)
    r = ϕ
    return NegativeBinomial(r, p)
end
#+end_src

#+RESULTS:
: NegativeBinomial2 (generic function with 1 method)

#+begin_src julia
# Let's just make sure we didn't do something stupid.
μ = 2; ϕ = 3;
dist = NegativeBinomial2(μ, ϕ)
# Source: https://mc-stan.org/docs/2_20/functions-reference/nbalt.html
mean(dist) ≈ μ && var(dist) ≈ μ + μ^2 / ϕ
#+end_src

#+RESULTS:
: true

#+REVEAL: split

Can be considered a generalization of =Poisson=

#+begin_src julia
μ = 2.0
anim = @animate for ϕ ∈ [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 25.0, 100.0]
    p = plot(size=(500, 300))
    plot!(p, Poisson(μ); label="Poisson($μ)")
    plot!(p, NegativeBinomial2(μ, ϕ), label="NegativeBinomial2($μ, $ϕ)")
    xlims!(0, 20); ylims!(0, 0.35);
    p
end
gif(anim, "negative_binomial.gif", fps=2);
#+end_src

#+RESULTS:
: [36m[1m[ [22m[39m[36m[1mInfo: [22m[39mSaved animation to /home/tor/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things/negative_binomial.gif

[[./negative_binomial.gif]]

#+REVEAL: split

#+begin_src julia
@model function sir_model(
    num_days;                                  # Number of days to model
    tspan = (0.0, float(num_days)),            # Timespan to model
    u0 = [N - 1, 1, 0.0],                      # Initial state
    p0 = [2.0, 0.6],                           # Placeholder parameters
    problem = ODEProblem(SIR!, u0, tspan, p0)  # Create problem once so we can `remake`.
)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)
    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem, p=[β, γ])  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)       # Solve!

    sol_for_observed = sol[2, 2:num_days + 1]  # Timesteps we have observations for.
    in_bed = Vector{Int}(undef, num_days)
    for i = 1:length(sol_for_observed)
        # Add a small constant to `sol_for_observed` to make things more stable.
        in_bed[i] ~ NegativeBinomial2(sol_for_observed[i] + 1e-5, ϕ)
    end

    # Some quantities we might be interested in.
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
end
#+end_src

#+RESULTS:
: sir_model (generic function with 2 methods)

Let's break it down

#+REVEAL: split

#+begin_src julia :eval no
β ~ truncated(Normal(2, 1); lower=0)
γ ~ truncated(Normal(0.4, 0.5); lower=0)
ϕ⁻¹ ~ Exponential(1/5)
ϕ = inv(ϕ⁻¹)
#+end_src

defines our prior

=truncated= is just a way of restricting the domain of the distribution you pass it

#+REVEAL: split

#+begin_src julia :eval no
problem_new = remake(problem, p=[β, γ])  # Replace parameters `p`.
sol = solve(problem_new, saveat=1)       # Solve!
#+end_src

We then remake the problem, now with the parameters =[β, γ]= sampled above

Remember the =saveat = 1= ensures we get solution at timesteps =[0, 1, 2, ..., 14]=

#+REVEAL: split

Then we extract the timesteps we have observations for

#+begin_src julia :eval no
sol_for_observed = sol[2, 2:num_days + 1]  # Timesteps we have observations for.
#+end_src

and define what's going to be a likelihood (once we add observations)

#+begin_src julia :eval no
in_bed = Vector{Int}(undef, num_days)
for i = 1:length(sol_for_observed)
    # Add a small constant to `sol_for_observed` to make things more stable.
    in_bed[i] ~ NegativeBinomial2(sol_for_observed[i] + 1e-5, ϕ)
end
#+end_src

#+REVEAL: split

Finally we return some values that might be of interest to

#+begin_src julia :eval no
# Some quantities we might be interested in.
return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
#+end_src

This is useful for a post-sampling diagnostics, debugging, etc.

#+REVEAL: split

#+begin_src julia
model = sir_model(length(data.in_bed))
#+end_src

#+RESULTS:
: Model(
:   args = (:num_days, :tspan, :u0, :p0, :problem)
:   defaults = (:tspan, :u0, :p0, :problem)
:   context = DynamicPPL.DefaultContext()
: )

The model is just another function, so we can call it to check that it works

#+HTML: <div class="fragment (appear)">

#+begin_src julia
model().infected
#+end_src

#+RESULTS:
#+begin_example
14-element Vector{Float64}:
 1.1857683457454615
 1.4031919767742504
 1.656501961849903
 1.9500209359015739
 2.287944460412949
 2.6740361120025615
 3.111176509979438
 3.600932367775885
 4.142728351325811
 4.733320828600479
 5.366032539264102
 6.030041459774789
 6.710165445559259
 7.386878485450631
#+end_example

Hey, it does!

#+HTML: </div>

** Is the prior reasonable?

Before we do any inference, we should check if the prior is reasonable

From domain knowledge we know that (for influenza at least)
#+ATTR_REVEAL: :frag (appear)
- $R_0$ is typically between 1 and 2
- =recovery_time= ($1 / \gamma$) is usually ~1 week

#+HTML: <div class="fragment (appear)">

We want to make sure that your prior belief reflects this knowledge while still being flexible enough to accommodate the observations

#+HTML: </div>

#+REVEAL: split

To check this we'll just simulate some draws from our prior model, i.e. the model /without/ conditioning on =in_bed=

There are two ways to sample form the prior

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# 1. By just calling the `model`, which returns a `NamedTuple` containing the quantities of interest
print(model())
#+end_src

#+RESULTS:
: (R0 = 6.174580137616607, recovery_time = 3.0267623349095656, infected = [5.483299311382417, 28.974245800730344, 128.35118173215392, 329.29151087862596, 414.4789821605425, 360.6446377573956, 278.5555061002017, 207.0431826308263, 151.66706467241767, 110.384438266176, 80.07525672471148, 57.981313102167036, 41.93887942093339, 30.31346189122374])

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

Or by just calling =sample= using =Prior=

#+begin_src julia
# Sample from prior.
chain_prior = sample(model, Prior(), 10_000);
#+end_src

#+RESULTS:
: [32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:01[39m

#+HTML: </div>

#+REVEAL: split

#+begin_src julia :eval no
using StatsPlots

"""
    plot_trajectories!(p::Plots.Plot, chain::MCMCChains.Chains; kwargs...)

Plot trajectories in `chain`.

# Keyword arguents
n = 1000, trajectory_color="#BBBBBB", alpha=1/√n
- `n`: number of trajectories to sample. Default: 1000.
- `trajectory_color`: color of the trajectories to use. Default: "#BBBBBB".
- `alpha`: alpha to use when plotting the trajectories. Default: `1/√n`.
- `include_data`: include the data in the plot. Default: `false`.
- `tspan`: 2-tuple containing first and last time represented by `chain`. Default: (1, 14)
"""
function plot_trajectories!(
    p::Plots.Plot, chain::MCMCChains.Chains;
    n = 1000, include_data=false, tspan=(1, 14),
    trajectory_color="#BBBBBB", alpha=1/√n
)
    # Convert the `chain` into a flattened `Array`.
    chain_arr = Array(chain; append_chains=true)  # Shape: [num_chains × num_iterations, num_params]
    # Sample a subset of indices to use.
    total_num_samples = size(chain_arr, 1)
    indices = rand(1:total_num_samples, n)  # Shape: [n, ]
    # Plot 'em!
    chain_arr = chain_arr[indices, :]  # Shape: [n, num_params]
    for in_bed in eachrow(chain_arr)
        plot!(p, tspan[1]:tspan[2], in_bed, alpha=alpha, color=trajectory_color)
    end

    if include_data
        scatter!(p, 1:14, data.in_bed, label="Data", color="black")
    end

    return p
end

"""
    plot_trajectories(chain::MCMCChains.Chains; kwargs...)

Plot trajectories in `chain`.

See [`plot_trajectories!`](@ref) for more info.
"""
plot_trajectories(chain::MCMCChains.Chains; kwargs...) = plot_trajectories!(plot(), chain; kwargs...)
#+end_src

#+REVEAL: split

#+begin_src julia :eval no
"""
    plot_trajectory_quantiles!(p::Plots.Plot, chain::MCMCChains.Chains; kwargs...)

Plot quantiles of trajectories in `chain`.

By default, the 95% quantiles are used.

# Keyword arguments
- q: quantiles to compute (only three ordered values supported). Default: `[0.025, 0.5, 0.975]`.
- `include_data`: if `true`, include the data in the plot. Default: `false`.
- `tspan`: 2-tuple containing first and last time represented by `chain`. Default: (1, 14)
"""
function plot_trajectory_quantiles!(
    p::Plots.Plot, chain::MCMCChains.Chains;
    q=[0.025, 0.5, 0.975], include_data=false, tspan=(1, 14)
)
    # Compute quantiles.
    qs = Array(DataFrame(quantile(chain; q = q))[:, Not(:parameters)]);

    # Plot!
    num_timesteps = size(qs, 1)
    lb, mid, ub = qs[:, 1], qs[:, 2], qs[:, 3]
    plot!(p, tspan[1]:tspan[2], mid, ribbon=(mid - lb, ub - mid))

    if include_data
        scatter!(p, 1:14, data.in_bed, label="Data", color="black")
    end

    return p
end


"""
    plot_trajectory_quantiles(chain::MCMCChains.Chains; kwargs...)

Plot quantiles of trajectories in `chain`.

See [`plot_trajectory_quantiles!`](@ref) for more info.
"""
plot_trajectory_quantiles(chain::MCMCChains.Chains; kwargs...) = plot_trajectory_quantiles!(plot(), chain; kwargs...)
#+end_src

#+REVEAL: split

Let's have a look at the prior predictive

#+begin_src julia
p = plot(legend=false, size=(600, 300))
plot_trajectories!(p, group(chain_prior, :in_bed); n = 1000)
hline!([N], color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e0c50ce1d6f177973a157b7cd4e3f19ee7786c4d.svg]]

#+ATTR_REVEAL: :frag (appear)
For certain values we get number of infected /larger/ than the actual population

#+ATTR_REVEAL: :frag (appear)
But this is includes the randomness from =NegativeBinomial2= likelihood

#+ATTR_REVEAL: :frag (appear)
Maybe more useful to inspect the (I)nfected state from the ODE solution?

#+REVEAL: split

We can also look at the =generated_quantities=, i.e. the values from the =return= statement in our model

#+begin_src julia
quantities_prior = generated_quantities(model, MCMCChains.get_sections(chain_prior, :parameters))
print(quantities_prior[1])
#+end_src

#+RESULTS:
: (R0 = 2.0715463788829003, recovery_time = 0.8385288472971612, infected = [3.5546803657847446, 12.238946523701003, 37.961499609155815, 88.87291138985437, 126.2123344060398, 108.73692364982254, 68.8764959389241, 37.54407436413875, 19.08575138085335, 9.405193541760713, 4.562579207496782, 2.1974712380264863, 1.0547587303188242, 0.5055505721139222])

This is simply a =Matrix= of =NamedTuple=

#+begin_src julia
typeof(quantities_prior)
#+end_src

#+RESULTS:
: Matrix{NamedTuple{(:R0, :recovery_time, :infected), Tuple{Float64, Float64, Vector{Float64}}}}[90m (alias for [39m[90mArray{NamedTuple{(:R0, :recovery_time, :infected), Tuple{Float64, Float64, Array{Float64, 1}}}, 2}[39m[90m)[39m

#+REVEAL: split

We can convert it into a =Chains= using a utility function of mine

#+begin_src julia
chain_quantities_prior = to_chains(quantities_prior);

p = plot(legend=false, size=(600, 300))
plot_trajectories!(p, group(chain_quantities_prior, :infected); n = 1000)
hline!([N], color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a7d31ea8a13b07b25b87476f9837c0c4306add79.svg]]

#+HTML: <div class="x-small-text">

*NOTE:* =to_chains= is not part of "official" Turing.jl because the =return= can contain /whatever/ you want, and so it's not always possible to convert into a =Chains=

#+HTML: </div>

#+REVEAL: split

And the quantiles for the trajectories

#+begin_src julia
p = plot(legend=false, size=(600, 300))
plot_trajectory_quantiles!(p, group(chain_quantities_prior, :infected))
hline!(p, [N], color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/25c29e662134f8d20f18f326801d65b463999862.svg]]

#+REVEAL: split


#+begin_src julia
print(DataFrame(quantile(chain_quantities_prior[:, [:R0, :recovery_time], :])))
#+end_src

#+RESULTS:
: [1m2×6 DataFrame[0m
: [1m Row [0m│[1m parameters    [0m[1m 2.5%     [0m[1m 25.0%   [0m[1m 50.0%   [0m[1m 75.0%   [0m[1m 97.5%   [0m
:      │[90m Symbol        [0m[90m Float64  [0m[90m Float64 [0m[90m Float64 [0m[90m Float64 [0m[90m Float64 [0m
: ─────┼─────────────────────────────────────────────────────────────
:    1 │ R0             0.497929  2.07564  3.67904  7.26254  67.9117
:    2 │ recovery_time  0.701711  1.20069  1.84906  3.54543  33.549

Compare to our prior knowledge of $R_0 \in [1, 2]$ and $(1/\gamma) \approx 1$ for influenza

Do we really need probability mass on $R_0 \ge 10$?

** TASK What's wrong with the current prior?

Here's the SIR model

\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= \beta S \frac{I}{N} - \gamma I \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= \gamma I
\end{split}
\end{equation*}

** SOLUTION Recovery time shouldn't be several years

We mentioned recovery time, which is expressed as $1 / \gamma$, is ~1 week

While we're clearly putting non-zero probability on regions near 0, i.e. /long/ recovery times

#+begin_src julia
plot(truncated(Normal(0.4, 0.5); lower=0), label=nothing, title="γ", size=(500, 300))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7342b55ba745721526033d31eb28a0b20f4f3d60.svg]]

We should probably be putting less probability mass near 0

** SOLUTION $\gamma$ should not be larger than 1

\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= \beta S \frac{I}{N} - {\color{red} \gamma I} \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= {\color{red} \gamma I}
\end{split}
\end{equation*}

If $\gamma > 1$ ⟹ (R)ecovered increase by /more/ than the (I)nfected

⟹ _healthy people are recovering_

#+REVEAL: :frag (appear)
Now, I'm no epidemiologist, but that doesn't seem right

#+REVEAL: split

Maybe something like

#+begin_src julia
plot(Beta(2, 5), label="new", size=(500, 300))
plot!(truncated(Normal(0.4, 0.5); lower=0), label="old", color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0247b4dcb70152eed6f428bb582ac8475dec5f42.svg]]

- [X] Bounded at 1
- [X] Allows smaller values (i.e. longer recovery time) but rapidly decreases near zero

** SOLUTION What if $\beta > N$?
Then for $t = 0$ we have
\begin{equation*}
\frac{\mathrm{d} S}{\mathrm{d} t} \bigg|_{t = 0} = - \beta S \frac{I}{N} > - N (N - 1) \frac{1}{N} = - (N - 1)
\end{equation*}

i.e. we /immediately/ infect everyone on the very first time-step

Also doesn't seem very realistic

#+REVEAL: split

/But/ under our current prior does this matter?

#+begin_src julia
# ℙ(β > N) = 1 - ℙ(β ≤ N)
1 - cdf(truncated(Normal(2, 1); lower=0), N)
#+end_src

#+RESULTS:
: 0.0

Better yet

#+begin_src julia
quantile(truncated(Normal(2, 1); lower=0), 0.95)
#+end_src

#+RESULTS:
: 3.6559843567138275

i.e. 95% of the probability mass falls below ~3.65

⟹ Current prior for $\beta$ is fine (✓)

#+REVEAL: split

Before we change the prior, let's also make it a bit easier to change the prior using =@submodel=

#+HTML: <div class="fragment (appear)">

=@submodel= allows you call models within models, e.g.

#+begin_src julia
@model function A()
    x_hidden_from_B ~ Normal()
    x = x_hidden_from_B + 100
    return x
end

@model function B()
    @submodel x = A()
    y ~ Normal(x, 1)

    return (; x, y)
end
#+end_src

#+RESULTS:
: B (generic function with 2 methods)

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# So if we call `B` we only see `x` and `y`
println(B()())
#+end_src

#+RESULTS:
: (x = 102.02147019958039, y = 102.4569833493446)

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# While if we sample from `B` we get the latent variables
println(rand(B()))
#+end_src

#+RESULTS:
: (x_hidden_from_B = 0.09002971780890297, y = 99.53876150986615)

#+HTML: </div>

#+REVEAL: split

To avoid clashes of variable-names, we can specify a =prefix=

#+begin_src julia
@model A() = (x ~ Normal(); return x + 100)

@model function B()
    # Given it a prefix to use for the variables in `A`.
    @submodel prefix=:inner x_inner = A()
    x ~ Normal(x_inner, 1)

    return (; x_inner, x)
end
#+end_src

#+RESULTS:
: B (generic function with 2 methods)

#+begin_src julia
print(rand(B()))
#+end_src

#+RESULTS:
: (var"inner.x" = -2.1171807144026573, x = 97.78951321099801)

#+REVEAL: split

=@submodel= is useful as it allows you to:
1. Easy to swap out certain parts of your model.
2. Can re-use models across projects and packages.

When working on larger projects, this really shines

#+REVEAL: split

Equipped with =@submodel= we can replace

#+begin_src julia :eval no
β ~ truncated(Normal(2, 1); lower=0)
γ ~ truncated(Normal(0.4, 0.5); lower=0)
#+end_src

with

#+begin_src julia :eval no
@submodel p = prior(problem_wrapper)
#+end_src

#+HTML: <div class="fragment (appear)">

where =prior= can be something like

#+begin_src julia
@model function prior_original(problem_wrapper::SIRProblem)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)

    return [β, γ]
end

@model function prior_improved(problem_wrapper::SIRProblem)
    # NOTE: Should probably also lower mean for `β` since
    # more probability mass on small `γ` ⟹ `R0 =  β / γ` grows.
    β ~ truncated(Normal(1, 1); lower=0)
    # NOTE: New prior for `γ`.
    γ ~ Beta(2, 5)

    return [β, γ]
end
#+end_src

#+RESULTS:
: prior_improved (generic function with 2 methods)

#+HTML: </div>

#+REVEAL: split

#+begin_src julia
@model function epidemic_model(
    problem_wrapper::AbstractEpidemicProblem,
    prior  # NOTE: now we just pass the prior as an argument
)
    # NOTE: And use `@submodel` to embed the `prior` in our model.
    @submodel p = prior(problem_wrapper)

    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem_wrapper.problem, p=p)  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)                  # Solve!

    # Extract the `infected`.
    sol_for_observed = infected(problem_wrapper, sol)[2:end]

    # NOTE: `arraydist` is faster for larger dimensional problems,
    # and it does not require explicit allocation of the vector.
    in_bed ~ arraydist(NegativeBinomial2.(sol_for_observed .+ 1e-5, ϕ))

    β, γ = p[1:2]
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed, in_bed = in_bed)
end
#+end_src

#+RESULTS:
: epidemic_model (generic function with 2 methods)

#+REVEAL: split

#+HTML: <div class="x-small-text">

Another neat trick is to return early if integration fail

#+HTML: </div>

#+begin_src julia
@model function epidemic_model(
    problem_wrapper::AbstractEpidemicProblem,
    prior  # now we just pass the prior as an argument
)
    # And use `@submodel` to embed the `prior` in our model.
    @submodel p = prior(problem_wrapper)

    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem_wrapper.problem, p=p)  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)                  # Solve!

    # NOTE: Return early if integration failed.
    if !issuccess(sol)
        Turing.@addlogprob! -Inf  # NOTE: Causes automatic rejection.
        return nothing
    end

    # Extract the `infected`.
    sol_for_observed = infected(problem_wrapper, sol)[2:end]

    # `arraydist` is faster for larger dimensional problems,
    # and it does not require explicit allocation of the vector.
    in_bed ~ arraydist(NegativeBinomial2.(sol_for_observed .+ 1e-5, ϕ))

    β, γ = p[1:2]
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
end
#+end_src

#+RESULTS:
: epidemic_model (generic function with 2 methods)

#+REVEAL: split

Equipped with this we can now easily construct /two/ models using different priors

#+begin_src julia
sir = SIRProblem(N);
model_original = epidemic_model(sir, prior_original);
model_improved = epidemic_model(sir, prior_improved);
#+end_src

#+RESULTS:

but using the same underlying =epidemic_model=

#+begin_src julia
chain_prior_original = sample(model_original, Prior(), 10_000; progress=false);
chain_prior_improved = sample(model_improved, Prior(), 10_000; progress=false);
#+end_src

#+RESULTS:

#+REVEAL: split

Let's compare the resulting priors over some of the quantities of interest

#+REVEAL: split

Let's compare the =generated_quantities=, e.g. $R_0$

#+HTML: <div class="small-text">

#+begin_src julia
chain_quantities_original = to_chains(
    generated_quantities(
        model_original,
        MCMCChains.get_sections(chain_prior_original, :parameters)
    );
);

chain_quantities_improved = to_chains(
    generated_quantities(
        model_improved,
        MCMCChains.get_sections(chain_prior_improved, :parameters)
    );
);
#+end_src

#+RESULTS:

#+HTML: </div>

#+begin_src julia
p = plot(; legend=false, size=(500, 200))
plot_trajectories!(p, group(chain_quantities_original, :infected); n = 100, trajectory_color="red")
plot_trajectories!(p, group(chain_quantities_improved, :infected); n = 100, trajectory_color="blue")
hline!([N], color="red", linestyle=:dash)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6b9bdb1e1ef7d1c6478aa686571343d62abdaec9.svg]]

#+REVEAL: split

#+begin_src julia
plt1 = plot(legend=false)
plot_trajectory_quantiles!(plt1, group(chain_quantities_original, :infected))
hline!(plt1, [N], color="red", linestyle=:dash)

plt2 = plot(legend=false)
plot_trajectory_quantiles!(plt2, group(chain_quantities_improved, :infected))
hline!(plt2, [N], color="red", linestyle=:dash)

plot(plt1, plt2, layout=(2, 1))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/652a9ac21f83162c24db53105a825401e995a795.svg]]

This makes sense: if half of the population is immediately infected ⟹ number of infected tapers wrt. time as they recover

#+REVEAL: split

For =model_improved= we then have

#+begin_src julia :display text/plain
DataFrame(quantile(chain_quantities_improved[:, [:R0, :recovery_time], :]))
#+end_src

#+RESULTS:
: 2×6 DataFrame
:  Row │ parameters     2.5%      25.0%    50.0%    75.0%    97.5%   
:      │ Symbol         Float64   Float64  Float64  Float64  Float64 
: ─────┼─────────────────────────────────────────────────────────────
:    1 │ R0             0.300784  2.31056  4.55175  8.47499  32.8491
:    2 │ recovery_time  1.57986   2.60513  3.8181   6.1612   22.21

Compare to =model_original=

#+begin_src julia :display text/plain
DataFrame(quantile(chain_quantities_original[:, [:R0, :recovery_time], :]))
#+end_src

#+RESULTS:
: 2×6 DataFrame
:  Row │ parameters     2.5%      25.0%    50.0%    75.0%    97.5%   
:      │ Symbol         Float64   Float64  Float64  Float64  Float64 
: ─────┼─────────────────────────────────────────────────────────────
:    1 │ R0             0.520941  2.08502  3.67668  7.23638  55.9529
:    2 │ recovery_time  0.694916  1.20042  1.86243  3.44323  27.7041

** TASK Make =epidemic_model= work for =SEIRProblem=
1. [ ] Implement a prior which also includes $\sigma$ and execute
   =epidemic_model= with it
2. [ ] Can we make a better prior for $\sigma$? Do we even need one?

#+begin_src julia :eval no
@model function prior_original(problem_wrapper::SEIRProblem)
    # TODO: Implement
end
#+end_src

** SOLUTION
#+begin_src julia
@model function prior_original(problem_wrapper::SEIRProblem)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)
    σ ~ truncated(Normal(0.8, 0.5); lower=0)

    return [β, γ, σ]
end
#+end_src

#+RESULTS:
: prior_original (generic function with 4 methods)

#+begin_src julia
model_seir = epidemic_model(SEIRProblem(N), prior_original)
print(model_seir())
#+end_src

#+RESULTS:
: (R0 = 3.3798912373416354, recovery_time = 1.596384635483695, infected = [0.9327629817712743, 1.4504535116350157, 2.4274041326310885, 4.0812797236598035, 6.830377676414988, 11.329833167669367, 18.5177057467429, 29.561354139876126, 45.51569649645974, 66.42832577682445, 90.12807147660341, 111.77652084107878, 125.50529805033085, 127.53881283140989])

** WARNING Consult with domain experts
This guy should not be the one setting your priors!

#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-49-24_471337_3317365246956_1262712540_o.jpg]]

Get an actual scientist to do that...

** Condition
Now let's actually involve the data

#+HTML: <div class="fragment (appear)">

We can condition a =Model= as so

#+begin_src julia
# Condition on the observations.
model = epidemic_model(SIRProblem(N), prior_improved)
model_conditioned = model | (in_bed = data.in_bed,)
#+end_src

#+RESULTS:
: Model(
:   args = (:problem_wrapper, :prior)
:   defaults = ()
:   context = ConditionContext((in_bed = [3, 8, 26, 76, 225, 298, 258, 233, 189, 128, 68, 29, 14, 4],), DynamicPPL.DefaultContext())
: )

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

You know what time it is: /inference time/!

#+HTML: </div>


** Metropolis-Hastings (MH)

#+begin_src julia
chain_mh = sample(model_conditioned, MH(), MCMCThreads(), 10_000, 4; discard_initial=5_000);
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (10000×4×4 Array{Float64, 3}):

Iterations        = 5001:1:15000
Number of chains  = 4
Samples per chain = 10000
Wall duration     = 4.47 seconds
Compute duration  = 17.29 seconds
parameters        = β, γ, ϕ⁻¹
internals         = lp

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m      ess [0m [1m    rhat [0m [1m e[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m  [0m ⋯

           β    1.7264    0.0518     0.0003    0.0027   223.2349    1.0343     ⋯
           γ    0.5302    0.0425     0.0002    0.0025   149.4968    1.0498     ⋯
         ϕ⁻¹    0.1263    0.0642     0.0003    0.0035   194.8981    1.0359     ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

           β    1.6375    1.6882    1.7235    1.7627    1.8417
           γ    0.4562    0.4999    0.5268    0.5629    0.6100
         ϕ⁻¹    0.0390    0.0759    0.1138    0.1706    0.2792
#+end_example

Rhat is /okay-ish/ but not great, and ESS is pretty low innit?

#+REVEAL: split

#+begin_src julia
plot(chain_mh; size=(800, 500))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/988ab4c3c127a6eb13010bf4e5698720cae79a19.svg]]

Eeehh doesn't look the greatest

#+REVEAL: split

Difficult to trust these results, but let's check if it at least did /something/ useful

#+begin_src julia
# We're using the unconditioned model!
predictions_mh = predict(model, chain_mh)
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (10000×14×4 Array{Float64, 3}):

Iterations        = 1:1:10000
Number of chains  = 4
Samples per chain = 10000
parameters        = in_bed[1], in_bed[2], in_bed[3], in_bed[4], in_bed[5], in_bed[6], in_bed[7], in_bed[8], in_bed[9], in_bed[10], in_bed[11], in_bed[12], in_bed[13], in_bed[14]
internals         = 

Summary Statistics
 [1m parameters [0m [1m     mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m        ess [0m [1m    rhat [0m
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m    Float64 [0m [90m Float64 [0m

   in_bed[1]     3.2795    2.1585     0.0108    0.0153   32694.5546    1.0002
   in_bed[2]    10.7760    5.2658     0.0263    0.0779    3557.5324    1.0012
   in_bed[3]    33.6594   15.2592     0.0763    0.3440    1282.3247    1.0029
   in_bed[4]    91.5026   40.5910     0.2030    1.0385     945.4664    1.0041
   in_bed[5]   184.7449   75.2160     0.3761    1.7343    1141.8664    1.0043
   in_bed[6]   247.0100   93.0535     0.4653    1.5299    2398.1072    1.0022
   in_bed[7]   235.1672   87.2715     0.4364    1.0820    4982.5456    1.0020
   in_bed[8]   185.9009   69.2182     0.3461    0.9262    3736.8174    1.0029
   in_bed[9]   132.4858   50.7510     0.2538    0.8011    2449.1440    1.0034
  in_bed[10]    89.9888   35.3940     0.1770    0.6587    1732.4037    1.0047
  in_bed[11]    59.4109   24.3851     0.1219    0.4870    1356.2842    1.0064
  in_bed[12]    38.7201   16.5152     0.0826    0.3607    1154.3386    1.0077
  in_bed[13]    25.0717   11.2314     0.0562    0.2613     999.9566    1.0082
  in_bed[14]    16.1404    7.7939     0.0390    0.1878     946.6562    1.0090

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m    25.0% [0m [1m    50.0% [0m [1m    75.0% [0m [1m    97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m

   in_bed[1]    0.0000     2.0000     3.0000     5.0000     8.0000
   in_bed[2]    3.0000     7.0000    10.0000    14.0000    23.0000
   in_bed[3]   11.0000    23.0000    31.0000    41.0000    70.0000
   in_bed[4]   32.0000    65.0000    86.0000   111.0000   187.0000
   in_bed[5]   69.0000   133.0000   175.0000   224.0000   361.0000
   in_bed[6]   96.0000   183.0000   236.0000   298.0000   463.0000
   in_bed[7]   91.0000   175.0000   226.0000   283.0000   437.0000
   in_bed[8]   74.0000   139.0000   178.0000   223.0000   347.0000
   in_bed[9]   51.0000    98.0000   126.0000   160.0000   251.0000
  in_bed[10]   34.0000    66.0000    86.0000   109.0000   173.0000
  in_bed[11]   21.0000    43.0000    56.0000    73.0000   116.0000
  in_bed[12]   13.0000    27.0000    37.0000    48.0000    78.0000
  in_bed[13]    8.0000    17.0000    24.0000    31.0000    51.0000
  in_bed[14]    4.0000    11.0000    15.0000    20.0000    34.0000
#+end_example

#+REVEAL: split

#+begin_src julia
plot_trajectories!(plot(legend=false, size=(600, 300)), predictions_mh; data=data)
#+end_src

#+begin_src julia
plot_trajectory_quantiles!(plot(legend=false, size=(600, 300)), predictions_mh; data=data)
#+end_src

Okay, it's not /completely/ useless, but my trust-issues are still present.

Metropolis-Hastings have disappointed me one too many times before.

** So instead, let's go =NUTS=
That's right, we're reaching to the *No U-Turn sampler (NUTS)*

*** 
:PROPERTIES:
:reveal_background_iframe: file:///home/tor/Projects/public/mcmc-demo/app.html?closeControls=true&algorithm=HamiltonianMH&target=standard&seed=1&autoplay=true&histBins=100
:END:

#+ATTR_REVEAL: :frag (appear)
[[https://chi-feng.github.io/mcmc-demo/app.html][https://chi-feng.github.io/mcmc-demo/app.html]]

** 

#+begin_quote
Wooaah there! =NUTS= requires gradient information!

How are you going to get that through that =solve=?
#+end_quote

Good question, voice in my head

#+REVEAL: :frag (appear)
I'm obviously not going to it myself

** Automatic differentiation (AD) in Julia
- [[https://github.com/JuliaDiff/ForwardDiff.jl][ForwardDiff.jl]]: forward-mode AD /(default in Turing.jl)/
- [[https://github.com/JuliaDiff/ReverseDiff.jl][ReverseDiff.jl]]: tape-based reverse-mode AD
- [[https://github.com/FluxML/Zygote.jl][Zygote.jl]]: source-to-source reverse-mode AD
- And more...

Up-and-coming

- [[https://github.com/EnzymeAD/Enzyme.jl][Enzyme.jl]]: Julia bindings for [[https://github.com/EnzymeAD/Enzyme.jl][Enzyme]] which ADs LLVM (low-level)
- [[https://github.com/JuliaDiff/Diffractor.jl][Diffractor.jl]]: experimental mixed-mode AD meant to replace Zygote.jl

Of importance
- [[https://github.com/JuliaDiff/ChainRulesCore.jl][ChainRulesCore.jl]]: light-weight package for defining rules, compatible with many of the above

#+REVEAL: split

*Important*

#+begin_quote
When you write code, you don't have to make a choice which one you
want to use!
#+end_quote

All the (stable) ones, will (mostly) work

/But/ how you write code will affect performance characteristics

Takes a bit of know-how + a bit of digging to go properly "vroom!"

** Differentiating through =solve=
With that being said, differentiating through numerical =solve= is not necessarily trivial to do efficiently

There are numerous ways of approaching this problem

#+ATTR_HTML: :width 400px
#+ATTR_ORG: :width 400
[[file:.notes/attachments/Bayesian_inference/2023-01-22_12-30-07_Screenshot_20230122_122936.png]]

[[https://arxiv.org/abs/1812.01892][https://arxiv.org/abs/1812.01892]] is /great/ resource

#+HTML: <div class="fragment (appear)">

But this is why we have [[https://github.com/SciML/SciMLSensitivity.jl][=SciMLSensitivity.jl=]]

[[https://docs.sciml.ai/SciMLSensitivity/stable/manual/differential_equation_sensitivities/#Choosing-a-Sensitivity-Algorithm][SciMLSensitivity.jl docs]] also provides a great overview of different approaches

#+HTML: </div>

#+REVEAL: split

#+begin_src julia
using SciMLSensitivity
#+end_src

#+RESULTS:

It offers

1. /Discrete sensitivity analysis/ or the /"Direct" method/: just use
   =ForwardDiff.Dual= in the =solve=.
2. /Continuous local sensitivity analysis (CSA)/: extends the original
   system such that the =solve= gives you both the solution and the the
   gradient simultaenously.
3. /Adjoint methods/: construct a backwards system whose solution gives
   us the gradient.

Just do =solve(problem, solver, sensealg = ...)=

** Back to being =NUTS=
   :PROPERTIES:
   :CUSTOM_ID: back-to-being-nuts
   :END:

#+begin_src julia
chain = sample(model_conditioned, NUTS(0.8), MCMCThreads(), 1000, 4);
#+end_src

#+RESULTS:
#+begin_example
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.2
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.05
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.05
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mThe current proposal will be rejected due to numerical error(s).
[33m[1m│ [22m[39m  isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
[33m[1m└ [22m[39m[90m@ AdvancedHMC ~/.julia/packages/AdvancedHMC/4fByY/src/hamiltonian.jl:49[39m
[33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mThe current proposal will be rejected due to numerical error(s).
[33m[1m│ [22m[39m  isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
[33m[1m└ [22m[39m[90m@ AdvancedHMC ~/.julia/packages/AdvancedHMC/4fByY/src/hamiltonian.jl:49[39m
[33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mThe current proposal will be rejected due to numerical error(s).
[33m[1m│ [22m[39m  isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
[33m[1m└ [22m[39m[90m@ AdvancedHMC ~/.julia/packages/AdvancedHMC/4fByY/src/hamiltonian.jl:49[39m
#+end_example

#+REVEAL: split

#+begin_src julia
chain
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (1000×15×4 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 4
Samples per chain = 1000
Wall duration     = 12.35 seconds
Compute duration  = 48.24 seconds
parameters        = β, γ, ϕ⁻¹
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m       ess [0m [1m    rhat [0m [1m [0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m [0m ⋯

           β    1.7329    0.0539     0.0009    0.0012   2398.5607    1.0010    ⋯
           γ    0.5314    0.0449     0.0007    0.0010   1967.4775    1.0004    ⋯
         ϕ⁻¹    0.1402    0.0794     0.0013    0.0017   2224.5760    1.0024    ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

           β    1.6297    1.6980    1.7315    1.7662    1.8420
           γ    0.4426    0.5029    0.5296    0.5595    0.6247
         ϕ⁻¹    0.0423    0.0862    0.1212    0.1740    0.3406
#+end_example

Muuuch better! Both ESS and Rhatc is looking good

#+REVEAL: split

#+begin_src julia
plot(chain; size=(800, 500))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3a9218dea4c65ad448c63fb7f0ee6ed93c5077d0.svg]]

#+REVEAL: split

#+begin_src julia
# Predict using the results from NUTS.
predictions = predict(model, chain)
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (1000×14×4 Array{Float64, 3}):

Iterations        = 1:1:1000
Number of chains  = 4
Samples per chain = 1000
parameters        = in_bed[1], in_bed[2], in_bed[3], in_bed[4], in_bed[5], in_bed[6], in_bed[7], in_bed[8], in_bed[9], in_bed[10], in_bed[11], in_bed[12], in_bed[13], in_bed[14]
internals         = 

Summary Statistics
 [1m parameters [0m [1m     mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m       ess [0m [1m    rhat [0m
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m Float64 [0m

   in_bed[1]     3.2818    2.2830     0.0361    0.0327   3930.6385    1.0000
   in_bed[2]    11.0312    5.6609     0.0895    0.1019   3653.4098    1.0002
   in_bed[3]    33.8620   15.8738     0.2510    0.3061   2771.4115    1.0005
   in_bed[4]    92.3748   41.9339     0.6630    0.7057   3328.0017    0.9994
   in_bed[5]   185.8487   80.5422     1.2735    1.1935   3417.9609    0.9993
   in_bed[6]   247.2337   98.3721     1.5554    1.9674   3647.9418    0.9994
   in_bed[7]   235.7463   92.1978     1.4578    1.5893   3912.2214    0.9993
   in_bed[8]   183.9038   72.1293     1.1405    1.2327   3833.4234    1.0005
   in_bed[9]   130.7645   52.6417     0.8323    0.8735   3642.9173    1.0001
  in_bed[10]    88.5115   36.3456     0.5747    0.5694   3845.7641    1.0007
  in_bed[11]    59.4015   24.8915     0.3936    0.4629   3547.8437    1.0001
  in_bed[12]    38.2405   17.2619     0.2729    0.2957   3565.4226    1.0002
  in_bed[13]    24.9578   12.0465     0.1905    0.2265   3501.2093    1.0012
  in_bed[14]    15.9085    8.1581     0.1290    0.1361   3149.3072    1.0006

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m    25.0% [0m [1m    50.0% [0m [1m    75.0% [0m [1m    97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m

   in_bed[1]    0.0000     2.0000     3.0000     5.0000     8.0000
   in_bed[2]    3.0000     7.0000    10.0000    14.0000    25.0000
   in_bed[3]   10.0000    23.0000    32.0000    42.0000    70.0000
   in_bed[4]   32.9750    64.0000    86.0000   112.0000   195.0000
   in_bed[5]   62.0000   131.0000   174.0000   228.2500   373.0250
   in_bed[6]   94.0000   181.0000   236.0000   295.2500   485.0000
   in_bed[7]   86.0000   174.0000   226.0000   286.0000   445.0250
   in_bed[8]   64.0000   135.0000   177.0000   223.0000   345.0000
   in_bed[9]   46.0000    95.0000   125.0000   159.0000   250.0000
  in_bed[10]   31.0000    64.0000    84.0000   108.0000   174.0000
  in_bed[11]   20.0000    43.0000    56.0000    73.0000   116.0000
  in_bed[12]   12.0000    27.0000    36.0000    47.0000    78.0000
  in_bed[13]    7.0000    17.0000    23.0000    31.0000    54.0000
  in_bed[14]    4.0000    10.0000    15.0000    20.0000    35.0000
#+end_example

#+REVEAL: split

#+begin_src julia
plot_trajectories!(plot(legend=false, size=(600, 300)), predictions; n = 1000, data=data)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e864be19f1edb0f234c9b06f07b1fdfb98ca4c65.svg]]

#+REVEAL: split

#+begin_src julia
plot_trajectory_quantiles!(plot(legend=false, size=(600, 300)), predictions; data=data)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ac3b5ff03cc2ba6a783ce621d4692ecdee9d0d0f.svg]]

** Simulation-based calibration (SBC) [[https://arxiv.org/abs/1804.06788][Talts et. al. (2018)]]
1. Sample from prior $\theta_1, \dots, \theta_n \sim p(\theta)$.
2. Sample datasets $\mathcal{D}_i \sim p(\cdot \mid \theta_i)$ for $i = 1, \dots, n$.
3. Obtain (approximate) $p(\theta \mid \mathcal{D}_i)$ for $i = 1, \dots, n$.

For large enough (n), the "combination" of the posteriors should recover the prior!

"Combination" here usually means computing some statistic and comparing against what it should be

#+ATTR_HTML: :width 800px
#+ATTR_ORG: :width 400
[[file:.notes/attachments/Bayesian_inference/2023-01-22_12-09-24_Screenshot_20230122_120848.png]]

#+REVEAL: split

That's very expensive → in practice we just do this once or twice

#+begin_src julia
# Sample from the conditioned model so we don't get the `in_bed` variables too
using Random  # Just making usre the numbers of somewhat interesting
rng = MersenneTwister(43);
test_values = rand(rng, NamedTuple, model_conditioned)
#+end_src

#+RESULTS:
| β | = | 1.2254566808077714 | γ | = | 0.27594266205681933 | ϕ⁻¹ | = | 0.13984179162984164 |

Now we condition on those values and run once to generate data

#+begin_src julia
model_test = model | test_values
#+end_src

#+RESULTS:
: Model(
:   args = (:problem_wrapper, :prior)
:   defaults = ()
:   context = ConditionContext((β = 1.2254566808077714, γ = 0.27594266205681933, ϕ⁻¹ = 0.13984179162984164), DynamicPPL.DefaultContext())
: )

#+begin_src julia
in_best_test = rand(rng, model_test).in_bed;
#+end_src

#+RESULTS:

#+REVEAL: split

Next, inference!

#+begin_src julia
model_test_conditioned = model | (in_bed = in_best_test,)
#+end_src

#+RESULTS:
: Model(
:   args = (:problem_wrapper, :prior)
:   defaults = ()
:   context = ConditionContext((in_bed = [1, 9, 11, 45, 159, 136, 270, 123, 463, 376, 231, 148, 99, 162],), DynamicPPL.DefaultContext())
: )

#+begin_src julia
# Let's just do a single chain here.
chain_test = sample(model_test_conditioned, NUTS(0.8), 1000);
#+end_src

#+RESULTS:
: [36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
: [36m[1m└ [22m[39m  ϵ = 0.025
: [33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mInstability detected. Aborting
: [33m[1m└ [22m[39m[90m@ SciMLBase ~/.julia/packages/SciMLBase/QqtZA/src/integrator_interface.jl:525[39m
: [33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mThe current proposal will be rejected due to numerical error(s).
: [33m[1m│ [22m[39m  isfinite.((θ, r, ℓπ, ℓκ)) = (true, true, false, true)
: [33m[1m└ [22m[39m[90m@ AdvancedHMC ~/.julia/packages/AdvancedHMC/4fByY/src/hamiltonian.jl:49[39m
: [32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:01[39m

#+REVEAL: split

Did we recover the parameters?

#+HTML: <div class="small-text">

#+begin_src julia
ps = []
for sym in [:β, :γ, :ϕ⁻¹]
    p = density(chain_test[:, [sym], :])
    vline!([test_values[sym]])
    push!(ps, p)
end
plot(ps..., layout=(3, 1), size=(600, 400))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/10338b56fec7065ed90c521a09de72a16e4dcee1.svg]]

#+HTML: </div>

Yay!

** Samplers in Turing.jl
- Metropolis-Hastings, emcee, SGLD ([[https://github.com/TuringLang/AdvancedMH.jl][AdvancedMH.jl]])
- Hamiltonian Monte Carlo, NUTS ([[https://github.com/TuringLang/AdvancedMH.jl][AdvancedHMC.jl]])
- SMC ([[https://github.com/TuringLang/AdvancedPS.jl][AdvancedPS.jl]])
- Elliptical Slice Sampling ([[https://github.com/TuringLang/EllipticalSliceSampling.jl][EllipticalSliceSampling.jl]])
- Nested sampling ([[https://github.com/TuringLang/NestedSamplers.jl][NestedSamplers.jl]])

#+REVEAL: split

You can also combine some of these in Turing.jl

#+HTML: <div class="small-text">

#+begin_src julia
using LinearAlgebra: I

@model function linear_regression(X)
    num_params = size(X, 1)
    β ~ MvNormal(ones(num_params))
    σ² ~ InverseGamma(2, 3)
    y ~ MvNormal(vec(β' * X), σ² * I)
end

# Generate some dummy data.
X = randn(2, 1_000); lin_reg = linear_regression(X); true_vals = rand(lin_reg)

# Condition.
lin_reg_conditioned = lin_reg | (y = true_vals.y,);
#+end_src

#+RESULTS:

#+HTML: </div>

We can then do =Gibbs= but sampling $β$ using =ESS= and $\sigma^2$ using =HMC=

#+begin_src julia
chain_ess_hmc = sample(lin_reg_conditioned, Gibbs(ESS(:β), HMC(1e-3, 16, :σ²)), 1_000)
#+end_src

#+RESULTS:
:RESULTS:
: Sampling: 100%|█████████████████████████████████████████| Time: 0:00:00
: ESS
:   parameters        ess      rhat   ess_per_sec 
:       Symbol    Float64   Float64       Float64 
: 
:         β[1]   473.5638    0.9998       43.5942
:         β[2]   994.0356    0.9999       91.5065
:           σ²    15.6623    1.0491        1.4418
: 
:END:

Could potentially lead to improvements

*NOTE:* Can be difficult to choose sampler parameters

#+REVEAL: split

Means one can also mix discrete and continuous

#+HTML: <div class="small-text">

#+begin_src julia 
@model function mixture(n)
    cluster ~ filldist(Categorical([0.25, 0.75]), n)
    μ ~ MvNormal([-10.0, 10.0], I)
    x ~ arraydist(Normal.(μ[cluster], 1))
end

model_mixture = mixture(10)
fake_values_mixture = rand(model_mixture)
model_mixture_conditioned = model_mixture | (x = fake_values_mixture.x, )
chain_discrete = sample(
    model_mixture_conditioned, Gibbs(PG(10, :cluster), HMC(1e-3, 16, :μ)), MCMCThreads(), 1_000, 4
)
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (1000×13×4 Array{Float64, 3}):

Iterations        = 1:1:1000
Number of chains  = 4
Samples per chain = 1000
Wall duration     = 9.51 seconds
Compute duration  = 37.18 seconds
parameters        = cluster[1], cluster[2], cluster[3], cluster[4], cluster[5], cluster[6], cluster[7], cluster[8], cluster[9], cluster[10], μ[1], μ[2]
internals         = lp

Summary Statistics
 [1m  parameters [0m [1m    mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m       ess [0m [1m    rhat [0m [1m[0m ⋯
 [90m      Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m[0m ⋯

   cluster[1]    1.9995    0.0224     0.0004    0.0004   4002.3197    0.9999   ⋯
   cluster[2]    1.9932    0.0819     0.0013    0.0059     90.5050    1.0271   ⋯
   cluster[3]    1.9500    0.2180     0.0034    0.0242     34.1145    1.1011   ⋯
   cluster[4]    1.9985    0.0387     0.0006    0.0011   1050.2290    1.0016   ⋯
   cluster[5]    1.9997    0.0158     0.0002    0.0003   4000.0320    1.0000   ⋯
   cluster[6]    1.9932    0.0819     0.0013    0.0058    195.9873    1.0247   ⋯
   cluster[7]    2.0000    0.0000     0.0000    0.0000         NaN       NaN   ⋯
   cluster[8]    1.9538    0.2101     0.0033    0.0207     48.7578    1.0585   ⋯
   cluster[9]    1.9935    0.0804     0.0013    0.0058     92.8326    1.0260   ⋯
  cluster[10]    2.0000    0.0000     0.0000    0.0000         NaN       NaN   ⋯
         μ[1]   -9.4983    0.8043     0.0127    0.1007      8.1921    5.8395   ⋯
         μ[2]    9.8580    0.6147     0.0097    0.0764      9.0570    2.5009   ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m  parameters [0m [1m     2.5% [0m [1m    25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m      Symbol [0m [90m  Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

   cluster[1]     2.0000     2.0000    2.0000    2.0000    2.0000
   cluster[2]     2.0000     2.0000    2.0000    2.0000    2.0000
   cluster[3]     1.0000     2.0000    2.0000    2.0000    2.0000
   cluster[4]     2.0000     2.0000    2.0000    2.0000    2.0000
   cluster[5]     2.0000     2.0000    2.0000    2.0000    2.0000
   cluster[6]     2.0000     2.0000    2.0000    2.0000    2.0000
   cluster[7]     2.0000     2.0000    2.0000    2.0000    2.0000
   cluster[8]     1.0000     2.0000    2.0000    2.0000    2.0000
   cluster[9]     2.0000     2.0000    2.0000    2.0000    2.0000
  cluster[10]     2.0000     2.0000    2.0000    2.0000    2.0000
         μ[1]   -10.7711   -10.2323   -9.4803   -8.7268   -8.3766
         μ[2]     8.2130     9.5039    9.9207   10.3388   10.8447
#+end_example

#+HTML: </div>

#+REVEAL: split

#+HTML: <div class="x-small-text">

#+begin_src julia 
ps = []
for (i, realizations) in enumerate(eachcol(Array(group(chain_discrete, :cluster))))
    p = density(realizations, legend=false, ticks=false); vline!(p, [fake_values_mixture.cluster[i]])
    push!(ps, p)
end
plot(ps..., layout=(length(ps) ÷ 2, 2), size=(600, 40 * length(ps)))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/31135321493e9fc62bf49272fbf58174bb2dccaf.svg]]

#+HTML: </div>

Again, this is difficult to get to work properly on non-trivial examples

_But_ the options are there

** Down-sides of using Turing.jl

#+ATTR_REVEAL: :frag (appear)
- Don't do any depedency-extraction of the model ⟹ can't do things like automatic marginalization
  - /But/ it's not impossible; just a matter of development effort
  - Also ongoing work in =TuringLang= to make a BUGS-compatible models (in colab with Andrew Thomas)
- NUTS performance is at the mercy of AD in Julia
- You _can_ put anything in your model, but whether you _should_ is a different thing

* Benchmarking                                                     :noexport:
#+begin_src julia
using SciMLSensitivity
using BenchmarkTools
using TuringBenchmarking
#+end_src

#+RESULTS:

#+begin_src julia
using ReverseDiff, Zygote
#+end_src

#+RESULTS:

#+begin_src julia
suite = TuringBenchmarking.make_turing_suite(
    model_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
        TuringBenchmarking.ReverseDiffAD{false}(),
        TuringBenchmarking.ZygoteAD()
    ]
);
run(suite)
#+end_src

#+RESULTS:
#+begin_example
2-element BenchmarkTools.BenchmarkGroup:
  tags: []
  "linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(355.822 μs)
	  "evaluation" => Trial(24.767 μs)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(58.919 μs)
	  "Turing.Essential.ZygoteAD()" => Trial(1.960 ms)
  "not_linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(385.950 μs)
	  "evaluation" => Trial(24.704 μs)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(66.128 μs)
	  "Turing.Essential.ZygoteAD()" => Trial(1.985 ms)
#+end_example

** More data

#+begin_src julia 
# NOTE: We now use 10 000 days instead of just 14.
model_fake = epidemic_model(SIRProblem(N; tspan=(0, 10_000)), prior_improved);
#+end_src

#+RESULTS:

#+begin_src julia 
res = rand(model_fake)
model_fake_conditioned = model_fake | (in_bed = res.in_bed,);
#+end_src

#+RESULTS:

#+begin_src julia 
model_fake_conditioned().infected
#+end_src

#+RESULTS:
#+begin_example
10000-element Vector{Float64}:
   3.4591065706011754
  11.823855240804278
  38.846712816915314
 113.22621417215724
 249.00423432194611
 363.2836760043962
 379.9524732308858
 334.3214462120579
 272.7293663300036
 215.20475420317462
 167.1209021303059
 128.69305226586874
  98.63230523728232
   ⋮
  -5.599481956029313e-16
  -5.217777806853145e-16
  -4.835930010286005e-16
  -4.453938566328089e-16
  -4.071803474979301e-16
  -3.6895247362396395e-16
  -3.3071023501090054e-16
  -2.9245363165872987e-16
  -2.5418266356750175e-16
  -2.1589733073717632e-16
  -1.7759763316777352e-16
  -1.3928357085927344e-16
#+end_example

#+begin_src julia 
suite = TuringBenchmarking.make_turing_suite(
    model_fake_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
        TuringBenchmarking.ReverseDiffAD{false}(),
        TuringBenchmarking.ZygoteAD()
    ]
);
run(suite)
#+end_src

#+RESULTS:
#+begin_example
2-element BenchmarkTools.BenchmarkGroup:
  tags: []
  "linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(31.085 ms)
	  "evaluation" => Trial(1.671 ms)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(3.157 ms)
	  "Turing.Essential.ZygoteAD()" => Trial(22.828 ms)
  "not_linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(30.813 ms)
	  "evaluation" => Trial(1.672 ms)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(3.003 ms)
	  "Turing.Essential.ZygoteAD()" => Trial(22.511 ms)
#+end_example

** Model v2
#+begin_src julia
using SciMLSensitivity
#+end_src

#+RESULTS:

#+begin_src julia
value(x) = DiffEqBase.value(x)
value(x::AbstractArray{<:ReverseDiff.TrackedReal}) = map(value, x)
#+end_src

#+RESULTS:
: value (generic function with 2 methods)

#+begin_src julia
@model function sir_model_v2(
    num_days;
    # Default parameters to set up the problem.
    tspan = (0.0, float(num_days)),
    u0 = [N - 1, 1, 0.0],
    problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)
    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem, p=[β, γ])
    sol = solve(problem_new, saveat=1)
    sol_for_observed = sol[2, 1:14]

    # Observe.
    # Add a small constant to `sol_for_observed` to make things more stable.
    # TODO: Speed up even further using `lazyarray`.
    in_bed ~ arraydist(NegativeBinomial2.(ϕ, sol_for_observed .+ 1e-5))

    # Some quantities we might be interested in.
    return (R = β / γ, recovery_time = 1 / γ, in_bed = in_bed)
end
#+end_src

#+RESULTS:
: sir_model_v2 (generic function with 2 methods)

#+begin_src julia
model_v2 = sir_model_v2(length(data.in_bed))
model_v2_conditioned = model_v2 | (in_bed = data.in_bed, )
#+end_src

#+RESULTS:
: Model(
:   args = (:num_days, :tspan, :u0, :problem)
:   defaults = (:tspan, :u0, :problem)
:   context = ConditionContext((in_bed = [3, 8, 26, 76, 225, 298, 258, 233, 189, 128, 68, 29, 14, 4],), DynamicPPL.DefaultContext())
: )

#+begin_src julia
# Load the different AD packages.
using ForwardDiff: ForwardDiff
using ReverseDiff: ReverseDiff
using Zygote: Zygote

using SciMLSensitivity
#+end_src

#+RESULTS:

#+begin_src julia
# Load package for convenient benchmarking.
using TuringBenchmarking
#+end_src

#+RESULTS:

#+begin_src julia
suite = TuringBenchmarking.make_turing_suite(
    model_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
    ]
)
run(suite)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: UndefVarError: model_conditioned not defined
: 
: Stacktrace:
:  [1] top-level scope
:    @ In[102]:1
:END:

#+begin_src julia
suite = TuringBenchmarking.make_turing_suite(
    model_v2_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
    ]
)
run(suite)
#+end_src

#+RESULTS:
: 2-element BenchmarkTools.BenchmarkGroup:
:   tags: []
:   "linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(22.184 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(105.255 μs)
:   "not_linked" => 2-element BenchmarkTools.BenchmarkGroup:
: 	  tags: []
: 	  "evaluation" => Trial(21.940 μs)
: 	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(122.538 μs)

Here it doesn't make much of a difference because we're working with so few observations, but indeed =model_v2= is somewhat faster than =model= for both evaluation and gradient computation (using =ForwardDiff=).

* Case: spatio-temporal COVID modeling in UK                       :noexport:
Main model looked like this

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_022312.png @ 2023-01-25 02:23:23
#+ATTR_HTML: :width 600px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/Use-case:_COVID_modeling/2023-01-25_02-23-23_Screenshot_20230125_022312.png]]

Roughly 50 000 parameters

#+REVEAL: split

Output, for different approaches, looked like this

#+begin_export html
<video controls width="1000">
    <source src="file:///home/tor/Dropbox/tmp/epimap-vs-epimap-debiased-vs-debiased-different-coloring.mp4" type="video/mp4">
    Sorry, your browser doesn't support embedded videos.
</video>
#+end_export

#+REVEAL: split

#+begin_src julia :eval no
    # GP-model for R-value.
    @submodel R = SpatioTemporalGP(K_spatial, K_local, K_time, T; σ_spatial, σ_local, ρ_spatial, ρ_time)

    # Latent infections.
    @submodel X = RegionalFlux(F_id, F_in, F_out, W, R, X_cond, T; days_per_step, σ_ξ)

    # Likelihood.
    @submodel C = NegBinomialWeeklyAdjustedTesting(C, X, D, num_cond, T)
#+end_src

with

#+HTML: <div class="small-text">

#+begin_src julia :eval no
@model function SpatioTemporalGP(
    K_spatial, K_local, K_time,
    ::Type{T} = Float64;
) where {T}
    num_steps = size(K_time, 1)
    num_regions = size(K_spatial, 1)

    # Length scales
    ρ_spatial ~ 𝒩₊(T(0), T(5))
    ρ_time ~ 𝒩₊(T(0), T(5))

    # Scales
    σ_spatial ~ 𝒩₊(T(0), T(0.5))
    σ_local ~ 𝒩₊(T(0), T(0.5))

    # GP
    E_vec ~ MvNormal(num_regions * num_steps, one(T))
    E = reshape(E_vec, (num_regions, num_steps))

    # Get cholesky decomps using precomputed kernel matrices
    L_space = spatial_L(K_spatial, K_local, σ_spatial, σ_local, ρ_spatial)
    U_time = time_U(K_time, ρ_time)

    # Obtain realization of log-R.
    f = L_space * E * U_time

    # Compute R.
    R = exp.(f)
    return R
end
#+end_src

#+HTML: </div>

* TODO Showing off
** =Gibbs=

Simple linear regression model

#+begin_src julia
using LinearAlgebra: I

@model function linear_regression(X)
    num_params = size(X, 1)
    β ~ MvNormal(ones(num_params))
    σ² ~ InverseGamma(2, 3)
    y ~ MvNormal(vec(β' * X), σ² * I)
end

# Generate some dummy data.
X = randn(2, 10_000)
lin_reg = linear_regression(X)
true_vals = rand(lin_reg)

# Condition.
lin_reg_conditioned = lin_reg | (y = true_vals.y,)
#+end_src

#+REVEAL: split

Can of course just use =HMC= on it

#+begin_src julia
chain_hmc = sample(lin_reg_conditioned, HMC(1e-3, 32), 1_000);
MCMCChains.ess_rhat(chain_hmc)
#+end_src

#+RESULTS:
:RESULTS:
: [32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:02[39m
: ESS
:  [1m parameters [0m [1m       ess [0m [1m    rhat [0m [1m ess_per_sec [0m
:  [90m     Symbol [0m [90m   Float64 [0m [90m Float64 [0m [90m     Float64 [0m
: 
:         β[1]   3000.0000    0.9992      428.9391
:         β[2]   3000.0000    0.9992      428.9391
:           σ²    834.7326    1.0001      119.3498
: 
:END:

But, how about we combine *Elliptical Slice Sampling (=ESS=)*, which is very effective on Gaussian priors, together /with/ =HMC= on $\sigma^2$ (which is non-Gaussian and so ESS doesn't apply)

#+begin_src julia
chain_ess_hmc = sample(lin_reg_conditioned, Gibbs(ESS(:β), HMC(1e-3, 32, :σ²)), 1_000);
MCMCChains.ess_rhat(chain_ess_hmc)
#+end_src

#+RESULTS:
:RESULTS:
: [32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:02[39m
: ESS
:  [1m parameters [0m [1m       ess [0m [1m    rhat [0m [1m ess_per_sec [0m
:  [90m     Symbol [0m [90m   Float64 [0m [90m Float64 [0m [90m     Float64 [0m
: 
:         β[1]    402.6994    1.0008       52.7577
:         β[2]   1018.7260    0.9992      133.4634
:           σ²    400.4298    1.0018       52.4603
: 
:END:

This is much improved (depending on which random seed you're using)!

* Julia: The Good, the Bad, and the Ugly

An honest take from a little 27-year old Norwegian boy

*** The Good
- Speed
- Composability (thank you multiple dispatch)
- No need to tie yourself to an underlying computational framework (looking at you Python)
- Interactive
- Transparency

*** Speed

I think you got this already...

*** Composability

We've seen some of that

Defining =infected(problem_wrapper, u)= allowed us to abstract away how to extract the compartment of interest

*** Transparency

For starters, almost all the code you'll end up using is pure Julia

Hence, you can always look at the code

You can find the implementation by using =@which=

#+begin_src julia 
# Without arguments
@which sum
#+end_src

#+RESULTS:
: Base

#+begin_src julia :display text/plain
# With arguments
@which sum([1.0])
#+end_src

#+RESULTS:
: sum(a::AbstractArray; dims, kw...) in Base at reducedim.jl:994

#+REVEAL: split

And yeah, you can even look into the macros

#+HTML: <div class="small-text">

#+begin_src julia 
@macroexpand @model f() = x ~ Normal()
#+end_src

#+RESULTS:
#+begin_example
quote
    function f(__model__::DynamicPPL.Model, __varinfo__::DynamicPPL.AbstractVarInfo, __context__::AbstractPPL.AbstractContext; )
        #= In[116]:1 =#
        begin
            var"##dist#874" = Normal()
            var"##vn#871" = (DynamicPPL.resolve_varnames)((AbstractPPL.VarName){:x}(), var"##dist#874")
            var"##isassumption#872" = begin
                    if (DynamicPPL.contextual_isassumption)(__context__, var"##vn#871")
                        if !((DynamicPPL.inargnames)(var"##vn#871", __model__)) || (DynamicPPL.inmissings)(var"##vn#871", __model__)
                            true
                        else
                            x === missing
                        end
                    else
                        false
                    end
                end
            begin
                #= /home/tor/.julia/packages/DynamicPPL/WBmMU/src/compiler.jl:539 =#
                var"##retval#876" = if var"##isassumption#872"
                        begin
                            (var"##value#875", __varinfo__) = (DynamicPPL.tilde_assume!!)(__context__, (DynamicPPL.unwrap_right_vn)((DynamicPPL.check_tilde_rhs)(var"##dist#874"), var"##vn#871")..., __varinfo__)
                            x = var"##value#875"
                            var"##value#875"
                        end
                    else
                        if !((DynamicPPL.inargnames)(var"##vn#871", __model__))
                            x = (DynamicPPL.getvalue_nested)(__context__, var"##vn#871")
                        end
                        (var"##value#873", __varinfo__) = (DynamicPPL.tilde_observe!!)(__context__, (DynamicPPL.check_tilde_rhs)(var"##dist#874"), x, var"##vn#871", __varinfo__)
                        var"##value#873"
                    end
                #= /home/tor/.julia/packages/DynamicPPL/WBmMU/src/compiler.jl:540 =#
                return (var"##retval#876", __varinfo__)
            end
        end
    end
    begin
        $(Expr(:meta, :doc))
        function f(; )
            #= In[116]:1 =#
            return (DynamicPPL.Model)(f, NamedTuple(), NamedTuple())
        end
    end
end
#+end_example

#+HTML: </div>

#+REVEAL: split

I told you didn't want to see that.

Can make it /a bit/ cleaner by removing linenums:

#+HTML: <div class="x-small-text">

#+begin_src julia 
@macroexpand(@model f() = x ~ Normal()) |> Base.remove_linenums!
#+end_src

#+RESULTS:
#+begin_example
quote
    function f(__model__::DynamicPPL.Model, __varinfo__::DynamicPPL.AbstractVarInfo, __context__::AbstractPPL.AbstractContext; )
        begin
            var"##dist#892" = Normal()
            var"##vn#889" = (DynamicPPL.resolve_varnames)((AbstractPPL.VarName){:x}(), var"##dist#892")
            var"##isassumption#890" = begin
                    if (DynamicPPL.contextual_isassumption)(__context__, var"##vn#889")
                        if !((DynamicPPL.inargnames)(var"##vn#889", __model__)) || (DynamicPPL.inmissings)(var"##vn#889", __model__)
                            true
                        else
                            x === missing
                        end
                    else
                        false
                    end
                end
            begin
                var"##retval#894" = if var"##isassumption#890"
                        begin
                            (var"##value#893", __varinfo__) = (DynamicPPL.tilde_assume!!)(__context__, (DynamicPPL.unwrap_right_vn)((DynamicPPL.check_tilde_rhs)(var"##dist#892"), var"##vn#889")..., __varinfo__)
                            x = var"##value#893"
                            var"##value#893"
                        end
                    else
                        if !((DynamicPPL.inargnames)(var"##vn#889", __model__))
                            x = (DynamicPPL.getvalue_nested)(__context__, var"##vn#889")
                        end
                        (var"##value#891", __varinfo__) = (DynamicPPL.tilde_observe!!)(__context__, (DynamicPPL.check_tilde_rhs)(var"##dist#892"), x, var"##vn#889", __varinfo__)
                        var"##value#891"
                    end
                return (var"##retval#894", __varinfo__)
            end
        end
    end
    begin
        $(Expr(:meta, :doc))
        function f(; )
            return (DynamicPPL.Model)(f, NamedTuple(), NamedTuple())
        end
    end
end
#+end_example

#+HTML: </div>

#+REVEAL: split

#+begin_src julia
f(x) = 2x
#+end_src

#+RESULTS:
: f (generic function with 1 method)

You can inspect the type-inferred and lowered code

#+begin_src julia
@code_typed f(1)
#+end_src

#+RESULTS:
: CodeInfo(
: 1 ─ %1 = Base.mul_int(2, x)::Int64
: └──      return %1
: ) => Int64

#+REVEAL: split

You can inspect the LLVM code

#+begin_src julia
@code_llvm f(1)
#+end_src

#+RESULTS:
: ;  @ In[120]:1 within `f`
: define i64 @julia_f_27231(i64 signext %0) #0 {
: top:
: ; ┌ @ int.jl:88 within `*`
:    %1 = shl i64 %0, 1
: ; └
:   ret i64 %1
: }

#+REVEAL: split

And even the resulting machine code

#+begin_src julia
@code_native f(1)
#+end_src

#+RESULTS:
#+begin_example
	.text
	.file	"f"
	.globl	julia_f_27233                   # -- Begin function julia_f_27233
	.p2align	4, 0x90
	.type	julia_f_27233,@function
julia_f_27233:                          # @julia_f_27233
; ┌ @ In[120]:1 within `f`
	.cfi_startproc
# %bb.0:                                # %top
; │┌ @ int.jl:88 within `*`
	leaq	(%rdi,%rdi), %rax
; │└
	retq
.Lfunc_end0:
	.size	julia_f_27233, .Lfunc_end0-julia_f_27233
	.cfi_endproc
; └
                                        # -- End function
	.section	".note.GNU-stack","",@progbits
#+end_example

It really just depends on which level of "I hate my life" you're currently at

*** The Bad
Sometimes
- your code might just slow down without a seemingly good reason,
- someone did bad, and Julia can't tell which method to call, or
- someone forces the Julia compiler to compile insane amounts of code

*** "Why is my code suddenly slow?"

One word: *type-instability*

Sometimes the Julia compiler can't quite infer what types fully

#+HTML: <div class="fragment (appear)">

*Result:* python-like performance (for those particular function calls)

#+begin_src julia 
# NOTE: this is NOT `const`, and so it could become some other type
# at any given point without `my_func` knowing about it!
global_variable = 1
my_func_unstable(x) = global_variable * x
#+end_src

#+RESULTS:
: my_func_unstable (generic function with 1 method)

#+begin_src julia 
@btime my_func_unstable(2.0);
#+end_src

#+RESULTS:
:   22.063 ns (2 allocations: 32 bytes)

#+HTML: </div>

#+REVEAL: split

Luckily there are tools for inspecting this

#+begin_src julia 
@code_warntype my_func_unstable(2.0)
#+end_src

#+RESULTS:
: MethodInstance for my_func_unstable(::Float64)
:   from my_func_unstable(x) in Main at In[132]:4
: Arguments
:   #self#::Core.Const(my_func_unstable)
:   x::Float64
: Body::Any
: 1 ─ %1 = (Main.global_variable * x)::Any
: └──      return %1
: 

See that =Any= there? _'tis a big no-no!_

#+REVEAL: split

Once discovered, it can be fixed

#+begin_src julia 
const constant_global_variable = 1
my_func_fixed(x) = constant_global_variable * x
@code_warntype my_func_fixed(2.0)
#+end_src

#+RESULTS:
: MethodInstance for my_func_fixed(::Float64)
:   from my_func_fixed(x) in Main at In[130]:2
: Arguments
:   #self#::Core.Const(my_func_fixed)
:   x::Float64
: Body::Float64
: 1 ─ %1 = (Main.constant_global_variable * x)::Float64
: └──      return %1
: 

So long Python performance!

#+begin_src julia 
@btime my_func_fixed(2.0);
#+end_src

#+RESULTS:
:   1.493 ns (0 allocations: 0 bytes)


#+REVEAL: split

/But/ this is not always so easy to discover (though this is generally rare)

#+begin_src julia 
# HACK: Here we explicitly tell Julia what type `my_func_unstable`
# returns. This is _very_ rarely a good idea because it just hides
# the underlying problem from `@code_warntype`!
my_func_forced(x) = my_func_unstable(x)::typeof(x)
@code_warntype my_func_forced(2.0)
#+end_src

#+RESULTS:
#+begin_example
MethodInstance for my_func_forced(::Float64)
  from my_func_forced(x) in Main at In[135]:4
Arguments
  #self#::Core.Const(my_func_forced)
  x::Float64
Body::Float64
1 ─ %1 = Main.my_func_unstable(x)::Any
│   %2 = Main.typeof(x)::Core.Const(Float64)
│   %3 = Core.typeassert(%1, %2)::Float64
└──      return %3
#+end_example

We can still see the =Any= in there, but on a first glance it looks like =my_func_forced= is type-stable

There are more natural cases where this might occur, e.g. unfortunate closures deep in your callstack

#+REVEAL: split

To discovery these there are a couple of more advanced tools:
- [[https://github.com/JuliaDebug/Cthulhu.jl][Cthulhu.jl]]: Allows you to step through your code like a debugger and perform =@code_warntype=
- [[https://github.com/aviatesk/JET.jl][JET.jl]]: Experimental package which attempts to automate the process

And even simpler: profile using [[https://github.com/timholy/ProfileView.jl][ProfileView.jl]] and look for code-paths that /should/ be fast but take up a lot of the runtime

#+REVEAL: split

#+begin_src julia 
using ProfileView
#+end_src

#+RESULTS:

#+begin_src julia :eval no
@profview foreach(_ -> my_func_unstable(2.0), 1_000_000)
#+end_src

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_011603.png @ 2023-01-25 01:16:13
#+ATTR_HTML: :height 350px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/Julia:_The_Good,_the_Bad,_and_the_Ugly/2023-01-25_01-16-13_Screenshot_20230125_011603.png]]

Note that there's no sign of multiplication here

But most of the runtime is the =./reflection.jl= at the top there

That's Julia looking up the type at runtime

*** Method ambiguity
#+begin_src julia 
ambiguous_function(x, y::Int) = y
ambiguous_function(x::Int, y) = x

# NOTE: Here we have `ambiguous_function(x::Int, y::Int)`
# Which one should we hit?!
ambiguous_function(1, 2)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: MethodError: ambiguous_function(::Int64, ::Int64) is ambiguous. Candidates:
:   ambiguous_function(x, y::Int64) in Main at In[137]:1
:   ambiguous_function(x::Int64, y) in Main at In[137]:2
: Possible fix, define
:   ambiguous_function(::Int64, ::Int64)
: 
: Stacktrace:
:  [1] top-level scope
:    @ In[137]:6
:END:

But here Julia warns us, and so we can fix this by just doing as it says: define =ambiguous_function(::Int64, ::Int64)=

#+begin_src julia 
ambiguous_function(::Int64, ::Int64) = "neato"
ambiguous_function(1, 2)
#+end_src

#+RESULTS:
: "neato"

*** Long compilation times
In Julia, for better or worse, we can generate code

*Problem:* it can be /lots/ of code of we really want to

*Result:* first execution can be /slow/

#+HTML: <div class="fragment (appear)">

*Time to first plot (TTFP)* is Julia's worst enemy

But things are always improving

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_012853.png @ 2023-01-25 01:29:05
[[file:.notes/attachments/Julia:_The_Good,_the_Bad,_and_the_Ugly/2023-01-25_01-29-05_Screenshot_20230125_012853.png]]

#+HTML: </div>

*** Another example: mis-use of =@generated=

#+begin_src julia 
# NOTE: `@generated` only has access to static information, e.g. types of arguments.
# Here I'm using the special type `Val` to make a number `N` static.
@generated function unrolled_addition(::Val{N}) where {N}
    expr = Expr(:block)
    push!(expr.args, :(x = 0))
    for i = 1:N
        push!(expr.args, :(x += $(3.14 * i)))
    end

    return expr
end
#+end_src

#+RESULTS:
: unrolled_addition (generic function with 2 methods)

When I call this with some =Val(N)=, Julia will execute this /at compile-time/!

#+begin_src julia 
# NOTE: At runtime, it then just returns the result immediately
@code_typed unrolled_addition(Val(10))
#+end_src

#+RESULTS:
: CodeInfo(
: 1 ─     return 172.70000000000002
: ) => Float64

But if I just change the value =10= to =11=, it's a /completely/ different type!

#+REVEAL: split

So Julia has to compile =unrolled_addition= from scratch

#+begin_src julia 
@time @eval unrolled_addition(Val(11));
#+end_src

#+RESULTS:
:   0.000864 seconds (1.74 k allocations: 87.812 KiB, 78.38% compilation time)

Or a bit crazier

#+begin_src julia 
@time @eval unrolled_addition(Val(10_001));
#+end_src

#+RESULTS:
:   0.234423 seconds (1.19 M allocations: 48.918 MiB, 99.92% compilation time)

Here it took ~0.4s, of which 99.95% was compilation time

I think you get the idea

#+REVEAL: split

But boy is it fast to run!

#+begin_src julia 
@btime unrolled_addition(Val(10_001));
#+end_src

#+RESULTS:
:   1.492 ns (0 allocations: 0 bytes)

#+begin_src julia 
function not_unrolled_addition(N)
    x = 0
    for i = 1:N
        x += 3.14 * i
    end

    return x
end
#+end_src

#+RESULTS:
: not_unrolled_addition (generic function with 1 method)

#+begin_src julia 
@btime not_unrolled_addition(10_001);
#+end_src

#+RESULTS:
:   9.777 μs (0 allocations: 0 bytes)

#+REVEAL: split

*Funny side-note:* at first I did the following

#+begin_src julia 
@generated function unrolled_addition_old(::Val{N}) where {N}
    expr = Expr(:block)
    push!(expr.args, :(x = 0))
    for i = 1:N
        push!(expr.args, :(x += $i))  # NOTE: No 3.14!
    end
    return expr
end
function not_unrolled_addition_old(N)
    x = 0
    for i = 1:N
        x += i  # NOTE: No 3.14!
    end
    return x
end
#+end_src

#+RESULTS:
: not_unrolled_addition_old (generic function with 1 method)

#+begin_src julia 
@btime unrolled_addition_old(Val(10_001));
@btime not_unrolled_addition_old(10_001);
#+end_src

#+RESULTS:
:   1.508 ns (0 allocations: 0 bytes)
:   2.335 ns (0 allocations: 0 bytes)

LLVM probably recognized the pattern of =not_unrolled_addition_old= and unrolls it for us

Let's check!

#+REVEAL: split

#+begin_src julia 
# NOTE: The one LLVM failed to unroll
@code_llvm not_unrolled_addition(10_001)
#+end_src

#+RESULTS:
#+begin_example
;  @ In[182]:1 within `not_unrolled_addition`
define { {}*, i8 } @julia_not_unrolled_addition_29862([8 x i8]* noalias nocapture align 8 dereferenceable(8) %0, i64 signext %1) #0 {
top:
;  @ In[182]:3 within `not_unrolled_addition`
; ┌ @ range.jl:5 within `Colon`
; │┌ @ range.jl:393 within `UnitRange`
; ││┌ @ range.jl:400 within `unitrange_last`
     %.inv = icmp sgt i64 %1, 0
     %. = select i1 %.inv, i64 %1, i64 0
; └└└
  br i1 %.inv, label %L18.preheader, label %union_move16

L18.preheader:                                    ; preds = %top
;  @ In[182]:5 within `not_unrolled_addition`
; ┌ @ range.jl:883 within `iterate`
; │┌ @ promotion.jl:477 within `==`
    %.not30 = icmp eq i64 %., 1
; └└
  br i1 %.not30, label %union_move, label %L51

L51:                                              ; preds = %L51, %L18.preheader
  %value_phi1032 = phi double [ %value_phi10, %L51 ], [ 3.140000e+00, %L18.preheader ]
  %value_phi431 = phi i64 [ %2, %L51 ], [ 1, %L18.preheader ]
; ┌ @ range.jl:883 within `iterate`
   %2 = add i64 %value_phi431, 1
; └
;  @ In[182]:4 within `not_unrolled_addition`
; ┌ @ promotion.jl:389 within `*`
; │┌ @ promotion.jl:359 within `promote`
; ││┌ @ promotion.jl:336 within `_promote`
; │││┌ @ number.jl:7 within `convert`
; ││││┌ @ float.jl:146 within `Float64`
       %3 = sitofp i64 %2 to double
; │└└└└
; │ @ promotion.jl:389 within `*` @ float.jl:385
   %4 = fmul double %3, 3.140000e+00
; └
;  @ In[182] within `not_unrolled_addition`
  %value_phi10 = fadd double %value_phi1032, %4
;  @ In[182]:5 within `not_unrolled_addition`
; ┌ @ range.jl:883 within `iterate`
; │┌ @ promotion.jl:477 within `==`
    %.not = icmp eq i64 %2, %.
; └└
  br i1 %.not, label %L18.union_move_crit_edge, label %L51

post_union_move:                                  ; preds = %union_move16, %union_move
  %tindex_phi1429 = phi i8 [ 2, %union_move16 ], [ 1, %union_move ]
;  @ In[182]:7 within `not_unrolled_addition`
  %5 = insertvalue { {}*, i8 } { {}* null, i8 undef }, i8 %tindex_phi1429, 1
  ret { {}*, i8 } %5

L18.union_move_crit_edge:                         ; preds = %L51
;  @ In[182]:5 within `not_unrolled_addition`
  %phi.cast = bitcast double %value_phi10 to i64
  br label %union_move

union_move:                                       ; preds = %L18.union_move_crit_edge, %L18.preheader
  %value_phi10.lcssa = phi i64 [ %phi.cast, %L18.union_move_crit_edge ], [ 4614253070214989087, %L18.preheader ]
;  @ In[182]:7 within `not_unrolled_addition`
  %6 = bitcast [8 x i8]* %0 to i64*
  store i64 %value_phi10.lcssa, i64* %6, align 8
  br label %post_union_move

union_move16:                                     ; preds = %top
  %7 = bitcast [8 x i8]* %0 to i64*
  store i64 0, i64* %7, align 8
  br label %post_union_move
}
#+end_example

#+REVEAL: split

#+begin_src julia 
# NOTE: The one LLVM seems to have unrolled.
@code_llvm not_unrolled_addition_old(10_001)
#+end_src

#+RESULTS:
#+begin_example
;  @ In[184]:11 within `not_unrolled_addition_old`
define i64 @julia_not_unrolled_addition_old_29860(i64 signext %0) #0 {
top:
;  @ In[184]:13 within `not_unrolled_addition_old`
; ┌ @ range.jl:5 within `Colon`
; │┌ @ range.jl:393 within `UnitRange`
; ││┌ @ range.jl:400 within `unitrange_last`
     %.inv = icmp sgt i64 %0, 0
     %. = select i1 %.inv, i64 %0, i64 0
; └└└
  br i1 %.inv, label %L18.preheader, label %L35

L18.preheader:                                    ; preds = %top
;  @ In[184]:15 within `not_unrolled_addition_old`
  %1 = shl nuw i64 %., 1
  %2 = add nsw i64 %., -1
  %3 = zext i64 %2 to i65
  %4 = add nsw i64 %., -2
  %5 = zext i64 %4 to i65
  %6 = mul i65 %3, %5
  %7 = lshr i65 %6, 1
  %8 = trunc i65 %7 to i64
  %9 = add i64 %1, %8
  %10 = add i64 %9, -1
;  @ In[184]:17 within `not_unrolled_addition_old`
  br label %L35

L35:                                              ; preds = %L18.preheader, %top
  %value_phi10 = phi i64 [ 0, %top ], [ %10, %L18.preheader ]
  ret i64 %value_phi10
}
#+end_example

*** The Ugly

#+REVEAL: split

_*Reverse-mode automatic differentiation*_

ForwardDiff.jl is a pure joy, but slows down as dimensionality grows

Then one should reach for ReverseDiff.jl or Zygote.jl

#+HTML: <div class="fragment (appear)">
Most of the time it works really well, but sometimes you hit a real sharp edge

And sharp edges cut; they cut /deep/

Like _"16X slower when the function is implemented more efficiently"-deep_

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_010111.png @ 2023-01-25 01:01:31
[[file:.notes/attachments/Julia:_The_Good,_the_Bad,_and_the_Ugly/2023-01-25_01-01-31_Screenshot_20230125_010111.png]]

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

If you want to see a man in pain, you can find the full issue [[https://github.com/TuringLang/Turing.jl/issues/1934][here]]

On the flip-side, once addressed (a type-instability), it's [[https://github.com/TuringLang/DistributionsAD.jl/pull/231][3X faster than before]]

#+HTML: </div>

*** Overall

Julia is pretty darn awesome

Easy to get going, and you can always make it faster by just optimizing your Julia code

No need to drop down to C++

#+REVEAL: split
Buuuut it can't beat Python at deep learning

#+REVEAL: split
Otherwise, it's worth a try

* Debugging                                                        :noexport:
- [[/home/tor/.julia/packages/SciMLSensitivity/DSyJO/src/reversediff.jl::67]]
  - [ ] Add definition for =AbstractArray{<:ReverseDiff.TrackedReal}=?
- [[/home/tor/.julia/packages/SciMLSensitivity/DSyJO/src/reversediff.jl::99]]
  - Adjoint definition
- [[~/.julia/packages/ReverseDiff/YkVxM/src/tracked.jl::77]]
  - Complains because =IndexStyle= is incorrect

* Hacks                                                            :noexport:
:PROPERTIES:
:header-args:julia: :session geilo-winter-school :tangle utils.jl :exports both
:END:
** ReverseDiff.jl
*** Allow support of linear indexing
#+begin_src julia :eval no
Pkg.add(url="https://github.com/torfjelde/ReverseDiff.jl", rev="torfjelde/sort-of-support-non-linear-indexing")
#+end_src

#+RESULTS:
#+begin_example
    Updating git-repo `https://github.com/torfjelde/ReverseDiff.jl`
    Updating registry at `~/.julia/registries/General`
    Updating git-repo `https://github.com/JuliaRegistries/General.git`
   Resolving package versions...
  No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
  No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
Precompiling project...
  ✓ Turing
  ✓ TuringBenchmarking
  2 dependencies successfully precompiled in 18 seconds. 356 already precompiled.
#+end_example

** SciMLSensitivity.jl
*** DONE Allow =AbstractArray{<:ReverseDiff.TrackedReal}=
#+begin_src julia :eval no
# Also allow `AbstractArray{<:ReverseDiff.TrackedReal}`.
# PR: https://github.com/SciML/SciMLSensitivity.jl/pull/769
using ReverseDiff: ReverseDiff

using DiffEqBase: DiffEqBase
using SciMLSensitivity: SciMLSensitivity
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0::AbstractArray{<:ReverseDiff.TrackedReal},
    p::AbstractArray{<:ReverseDiff.TrackedReal},
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0,
    p::AbstractArray{<:ReverseDiff.TrackedReal},
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0::AbstractArray{<:ReverseDiff.TrackedReal},
    p,
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end
#+end_src

#+RESULTS:

*** TODO Allow =TrackedArray(::ODESolution)= (depends on https://github.com/JuliaDiff/ReverseDiff.jl/pull/216)
#+begin_src julia :eval no
if isdefined(ReverseDiff, :supports_linear_indexing)
    using DiffEqBase
    ReverseDiff.supports_linear_indexing(::DiffEqBase.ODESolution) = true
end
#+end_src

#+RESULTS:

** DONE TuringBenchmarking.jl
#+begin_src julia :eval no
Pkg.add(url="https://github.com/torfjelde/TuringBenchmarking.jl.git")
#+end_src

#+RESULTS:
:     Updating git-repo `https://github.com/torfjelde/TuringBenchmarking.jl.git`
:    Resolving package versions...
:   No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
:   No Changes to `~/Projects/public/Turing-Workshop/202#+begin_srcter-School/03-advanced-turing/Manifest.toml`

** TODO DistributionsAD.jl
#+begin_src julia :eval no
Pkg.add(url="https://github.com/TuringLang/DistributionsAD.jl.git", rev="torfjelde/lazy-array-perf")
#+end_src

#+RESULTS:
#+begin_example
    Updating git-repo `https://github.com/TuringLang/DistributionsAD.jl.git`
   Resolving package versions...
    Updating `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
  [ced4e74d] ~ DistributionsAD v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf` ⇒ v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf`
    Updating `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
  [ced4e74d] ~ DistributionsAD v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf` ⇒ v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf`
Precompiling project...
  ✓ DistributionsAD
  ✓ AdvancedVI
  ✓ Turing
  ✓ TuringBenchmarking
  4 dependencies successfully precompiled in 26 seconds. 352 already precompiled.
#+end_example

** MCMCChains.jl
*** Converting into a =Matrix{<:NamedTuple}= into =MCMCChains.Chains=
#+begin_src julia :eval no
using Turing

function unravel(x::NamedTuple, vns=Iterators.map(DynamicPPL.VarName, keys(x)))
    vn_iter = Iterators.flatten(DynamicPPL.TestUtils.varname_leaves(vn, get(x, vn)) for vn in vns)
    return vn_iter, Iterators.map(Base.Fix1(get, x), vn_iter)
end

"""
    to_chains(results; exclude, include)

Return a `MCMCChains.Chains` constructed from `results`.

If `exclude` is specified, then those keys will be excluded.
If `include` is specified, then those keys will be included.
"""
function to_chains(results::AbstractVector{<:NamedTuple}; exclude=nothing, include=nothing)
    @assert !isempty(results)

    # TODO: Handle ragged arrays.
    # Probably best done my first just mapping everything to flatten dictionaries, e.g.
    #
    #     x_vns, x_vals = unravel(x)
    #     OrderedDict(zip(map(Symbol, x_vns), x_vals))
    #
    # (or using Dictionaries.jl for better perf), and then basically `hcat`ing these
    # and insertin `missing` where necessary.

    example = first(results)

    # Construct names once.
    syms = collect(keys(example))
    # Filter out if desired.
    if !isnothing(include)
        syms = filter(∈(include), syms)
    end
    if !isnothing(exclude)
        syms = filter(∉(exclude), syms)
    end
    # Convert to `VarName`.
    names = collect(first(unravel(example, map(DynamicPPL.VarName, syms))))

    # Extract the values.
    vals = mapreduce(hcat, results) do x
        # NOTE: Providing the `names` here assumes every sample has the same variables.
        collect(last(unravel(x, names)))
    end
    vals_transposed = transpose(vals)
    # Shape: iterations × num_vars × num_chains
    chain_array = reshape(vals_transposed, size(vals_transposed)..., 1)
    return MCMCChains.Chains(chain_array, names)
end

function to_chains(results::AbstractMatrix{<:NamedTuple}; kwargs...)
    return reduce(MCMCChains.chainscat, map(col -> to_chains(col; kwargs...), eachcol(results));)
end
#+end_src

#+RESULTS:
: to_chains (generic function with 2 methods)

#+begin_src julia :eval no
# TODO: Make PR to DPPL.
function DynamicPPL.TestUtils.varname_leaves(vn::DynamicPPL.VarName, val::NamedTuple)
    iter = Iterators.map(keys(val)) do sym
        lens = DynamicPPL.Setfield.PropertyLens{sym}()
        DynamicPPL.TestUtils.varname_leaves(vn ∘ lens, get(val, lens))
    end
    return Iterators.flatten(iter)
end
#+end_src

#+RESULTS:

#+begin_src julia :eval no
to_chains([(x = 1, y = [2,2], z = (w = [5],)), (x = 3, y = [4,4], z = (w = [6],))])
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (2×4×1 reshape(transpose(::Matrix{Int64}), 2, 4, 1) with eltype Int64):

Iterations        = 1:1:2
Number of chains  = 1
Samples per chain = 2
parameters        = x, y[1], y[2], z.w[1]

Summary Statistics
  parameters      mean       std   naive_se      mcse       ess      rhat 
      Symbol   Float64   Float64    Float64   Float64   Missing   Missing 

           x    2.0000    1.4142     1.0000    1.0000   missing   missing
        y[1]    3.0000    1.4142     1.0000    1.0000   missing   missing
        y[2]    3.0000    1.4142     1.0000    1.0000   missing   missing
      z.w[1]    5.5000    0.7071     0.5000    0.5000   missing   missing

Quantiles
  parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
      Symbol   Float64   Float64   Float64   Float64   Float64 

           x    1.0500    1.5000    2.0000    2.5000    2.9500
        y[1]    2.0500    2.5000    3.0000    3.5000    3.9500
        y[2]    2.0500    2.5000    3.0000    3.5000    3.9500
      z.w[1]    5.0250    5.2500    5.5000    5.7500    5.9750
#+end_example

** Turing.jl
* Debug                                                            :noexport:
** https://github.com/JuliaDiff/ReverseDiff.jl/pull/216?notification_referrer_id=NT_kwDOAKj85LM1MzQ1OTA1MDM5OjExMDc0Nzg4
#+begin_src julia :eval no
using ReverseDiff: ReverseDiff

import SciMLBase
import DiffEqBase
import DiffEqBase: solve_up
ReverseDiff.@grad function solve_up(prob, sensealg, u0, p, args...; kwargs...)
    out = DiffEqBase._solve_adjoint(prob, sensealg, ReverseDiff.value(u0),
                                    ReverseDiff.value(p),
                                    SciMLBase.ReverseDiffOriginator(), args...; kwargs...)
    function actual_adjoint(_args...)
        original_adjoint = out[2](_args...)
        if isempty(args) # alg is missing
            tuple(original_adjoint[1:4]..., original_adjoint[6:end]...)
        else
            original_adjoint
        end
    end
    out[1], actual_adjoint
end

function ReverseDiff.TrackedArray(sol::DiffEqBase.ODESolution)
    DiffEqBase.ODESolution(
        TrackedArray(sol.u),
        sol.u_analytic,
        sol.errors,
        sol.t,
        sol.k,
        sol.prob,
        sol.alg,
        sol.interp,
        sol.dense,
        sol.tslocation,
        sol.destats,
        sol.alg_choice,
        sol.retcode
    )
end

expr = @macroexpand ReverseDiff.@grad function f(x; y=1)
    return x, identity
end
expr |> Base.remove_linenums!

# This ends up being called in the forward pass (see the expansion of the `ReverseDiff.@grad` above),
# and so we could potentially overload this `track` to call to just track the internal solution instead.
# FIXME: Currently doesn't work because a) `sol.u isa Vector{<:Vector}` and b) `ODESolution(::Vector{<:TrackedVector})`
# doesn't work either.
function ReverseDiff.track(::ODESolution{T,N}, tp::Vector{ReverseDiff.AbstractInstruction}=ReverseDiff.InstructionTape()) where {T,N}

    u_tracked = map(Base.Fix2(ReverseDiff.track, tp), sol.u)
    Ttracked = eltype(eltype(u_tracked))  # TODO: Infer from `T` instead?
    DiffEqBase.ODESolution{Ttracked,N}(
        u_tracked,
        sol.u_analytic,
        sol.errors,
        sol.t,
        sol.k,
        sol.prob,
        sol.alg,
        sol.interp,
        sol.dense,
        sol.tslocation,
        sol.destats,
        sol.alg_choice,
        sol.retcode
    )
end

function ReverseDiff.track(::typeof(solve_up), _args...; kwargs...)
    # TODO: Insert adjoint def here.
    sol_up_pullback(args...; kwargs...) = 0, identity
    args = (x,)
    tp = ReverseDiff.tape(args...)
    output_value, back = sol_up_pullback(args...; kwargs...)
    output = ReverseDiff.track(output_value, tp)
    ReverseDiff.record!(
        tp,
        ReverseDiff.SpecialInstruction,
        solve_up,
        args,
        output,
        (back, sol_up_pullback, kwargs)
    )
    return output
end

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
sol_tracked = solve(problem_tracked)

DiffEqBase.ODESolution(
    map(ReverseDiff.track, sol.u),
    sol.u_analytic,
    sol.errors,
    sol.t,
    sol.k,
    sol.prob,
    sol.alg,
    sol.interp,
    sol.dense,
    sol.tslocation,
    sol.destats,
    sol.alg_choice,
    sol.retcode
)
typeof(sol)

sol.u


#+end_src

#+RESULTS:

** https://github.com/TuringLang/Turing.jl/issues/1934
#+begin_src julia :eval no
Pkg.develop(path="/home/tor/Projects/public/ReverseDiff.jl/")
#+end_src

#+RESULTS:
: [32m[1m   Resolving[22m[39m package versions...
: [32m[1m    Updating[22m[39m `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
:  [90m [37e2e3b7] [39m[93m~ ReverseDiff v1.14.4 ⇒ v1.14.4 `~/Projects/public/ReverseDiff.jl`[39m
: [32m[1m    Updating[22m[39m `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
:  [90m [37e2e3b7] [39m[93m~ ReverseDiff v1.14.4 ⇒ v1.14.4 `~/Projects/public/ReverseDiff.jl`[39m

#+begin_src julia :eval no
using ForwardDiff: ForwardDiff
using ReverseDiff: ReverseDiff
using Zygote: Zygote

# Also allow `AbstractArray{<:ReverseDiff.TrackedReal}`.
# PR: https://github.com/SciML/SciMLSensitivity.jl/pull/769
using SciMLSensitivity: SciMLSensitivity
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

# Allow 
const RT = AbstractArray{<:ReverseDiff.TrackedReal}
function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT,
                             p::RT, args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0, p::RT,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT, p,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end
#+end_src

#+begin_src julia :eval no
problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
# problem_tracked = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
sol_tracked = solve(problem_tracked)
sol_tracked = DiffEqBase.solve_up(problem_tracked, nothing, u0, ReverseDiff.track([0.001, 0.01]))

sol_tracked

ReverseDiff.value(sol_tracked)

f(p) = sum(solve(remake(problem, p=p)))

x = [1.75,0 .7]
ReverseDiff.gradient(f, x)
first(Zygote.gradient(f, [0.1, 0.1])) ≈ ReverseDiff.gradient(f, [0.1, 0.1])

ForwardDiff.gradient(f, [0.001, 0.01])

#+end_src

#+begin_src julia :eval no
using LogDensityProblems, LogDensityProblemsAD
using SciMLSensitivity

@model demo() = (x ~ truncated(Normal(); lower=0); y ~ Normal(x, 1))

m = demo() | (y = 1.0,)
f = Turing.LogDensityFunction(m)

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f; compile=Val(true)), f.varinfo[:])

function Turing.LogDensityFunction(model::DynamicPPL.Model)
    return Turing.LogDensityFunction(
        DynamicPPL.VarInfo(model),
        model,
        DynamicPPL.SampleFromPrior(),
        DynamicPPL.DefaultContext(),
    )
end

f = Turing.LogDensityFunction(model_v2_conditioned)
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f; compile=Val(true)), f.varinfo[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), f.varinfo[:])


LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), f.varinfo[:])

LogDensityProblems.logdensity(::typeof(h), θ::AbstractVector) = h(θ)
LogDensityProblems.capabilities(::typeof(h)) = LogDensityProblems.LogDensityOrder{0}()
LogDensityProblems.dimension(::typeof(h)) = 2
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(true)), vi[:][1:2])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), vi[:][1:2])


∂f = ADgradient(:ReverseDiff, f; compile=Val(true))
LogDensityProblems.logdensity_and_gradient(∂f, vi[:])

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f), vi[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ForwardDiff, f), vi[:])

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f), vi[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ForwardDiff, f), vi[:])

∂f = ADgradient(:ReverseDiff, f)
LogDensityProblems.logdensity_and_gradient(∂f, vi[:])

Zygote.gradient(loss, [0.001, 0.01])
ReverseDiff.gradient(loss, [0.001, 0.01])

problem = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
problem.f(zero(u0), u0, ReverseDiff.track([0.001, 0.01]), 1)
problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)
Array(sol)
sol[2, 1:14]
typeof(sol)

?solve

@code_warntype solve(problem)

import SciMLBase
import DiffEqBase
import DiffEqBase: solve_up
ReverseDiff.@grad function solve_up(prob, sensealg, u0, p, args...; kwargs...)
    out = DiffEqBase._solve_adjoint(prob, sensealg, ReverseDiff.value(u0),
                                    ReverseDiff.value(p),
                                    SciMLBase.ReverseDiffOriginator(), args...; kwargs...)
    function actual_adjoint(_args...)
        original_adjoint = out[2](_args...)
        if isempty(args) # alg is missing
            tuple(original_adjoint[1:4]..., original_adjoint[6:end]...)
        else
            original_adjoint
        end
    end
    Array(out[1]), actual_adjoint
end

Base.IndexStyle(::ODESolution) = IndexCartesian()

problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
problem_tracked = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
sol_tracked = DiffEqBase.solve_up(problem_tracked, nothing, u0, ReverseDiff.track([0.001, 0.01]))
sol_tracked.value.retcode

sol_tracked.deriv

ReverseDiff.gradient(loss, [0.001, 0.01])

IndexStyle(sol)
typeof(sol)
typeof(sol_tracked)
typeof(sol_tracked.value)
print(sol_tracked.value)

size(sol_tracked)

@which IndexStyle(sol)

IndexStyle(typeof(sol))
IndexStyle(Matrix{Float64})

IndexStyle(sol.u)

function h(θ)
    sol = solve(remake(problem, p=[θ[1], θ[2]]), saveat=1)
    # @assert ReverseDiff.value(sol) isa ODESolution
    sum(sol)
end
ReverseDiff.gradient(h, [0.001, 0.01])

p_tracked = ReverseDiff.track([0.001, 0.01])
vcat(p_tracked[1], p_tracked[2])
[p_tracked[1], p_tracked[2]]

# ATTEMPT
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

const RT = AbstractArray{<:ReverseDiff.TrackedReal}
function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT,
                             p::RT, args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0, p::RT,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT, p,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end

ReverseDiff.collect(p_tracked)
vcat(p_tracked[1], p_tracked[2])

reduce(vcat, [p_tracked[1], p_tracked[2]])


## ReverseDiff.jl debugging
tape = ReverseDiff.GradientTape(f, (f.varinfo[:], ))
compiled_tape = ReverseDiff.compile(tape)
compiled_tape.tape.tape
compiled_tape.forward_exec
compiled_tape.reverse_exec[end]()
#+end_src

** ReverseDiffDebugUtils.jl
#+begin_src julia :eval no
using Pkg; Pkg.activate(mktempdir())
Pkg.develop("GraphGraphviz")
Pkg.develop("ReverseDiffDebugUtils")
# Pkg.add(name="Distributions", version="0.25.76")
using GraphGraphviz, ReverseDiffDebugUtils
using Turing, LogDensityProblems, LogDensityProblemsAD
using ReverseDiff

function Turing.LogDensityFunction(model::DynamicPPL.Model)
    return Turing.LogDensityFunction(
        DynamicPPL.VarInfo(model),
        model,
        DynamicPPL.SampleFromPrior(),
        DynamicPPL.DefaultContext(),
    )
end

### Setup ###
function sim(I, P)
    yvec = Vector{Int}(undef, I * P)
    ivec = similar(yvec)
    pvec = similar(yvec)

    beta = rand(Normal(), I)
    theta = rand(Normal(), P)

    n = 0
    for i in 1:I, p in 1:P
        n += 1
        ivec[n] = i
        pvec[n] = p
        yvec[n] = rand(BernoulliLogit(theta[p] - beta[i]))
    end

    return yvec, ivec, pvec, theta, beta
end

P = 1000
y, i, p, _, _ = sim(20, P);

### Turing ###
# naive implementation
@model function irt_naive(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)

    for n in eachindex(y)
        y[n] ~ Bernoulli(logistic(theta[p[n]] - beta[i[n]]))
    end
end

# performant model
@model function irt(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)
    Turing.@addlogprob! sum(logpdf.(BernoulliLogit.(theta[p] .- beta[i]), y))

    return (; theta, beta)
end

# Instantiate
model = irt(y, i, p);

ℓ = Turing.LogDensityFunction(model)
θ = ℓ.varinfo[:]
f = Base.Fix1(LogDensityProblems.logdensity, ℓ)

plotgraphviz(f, θ; display=true)

# Check if ForwardDiff breaks.
using UnPack
beta, theta = model();
x = vcat(theta, beta)

function evaluate(model::Turing.Model, x)
    @unpack y, i, p, I, P = model.args
    theta, beta = x[1:P], x[P + 1:end]
    return sum(logpdf.(BernoulliLogit.(theta[p] - beta[i]), y))
end

using ForwardDiff
ForwardDiff.gradient(Base.Fix1(evaluate, model), x)

## ReverseDiff
# pre-record a GradientTape for `f` using inputs of shape 100x100 with Float64 elements
const f_tape = GradientTape(f, (rand(100, 100), rand(100, 100)))

# compile `f_tape` into a more optimized representation
const compiled_f_tape = compile(f_tape)

# some inputs and work buffers to play around with
a, b = rand(100, 100), rand(100, 100)
inputs = (a, b)
results = (similar(a), similar(b))
all_results = map(DiffResults.GradientResult, results)
cfg = GradientConfig(inputs)


julia> tape = ReverseDiff.GradientTape(prob, (θ,));

julia> ctape = ReverseDiff.compile(tape);

julia> inputs = (θ,);

julia> results = (similar(θ), );

julia> cfg = ReverseDiff.GradientConfig(inputs);

julia> ReverseDiff.gradient!(results, ctape, inputs)
([2.1135668756925874, 6.145143149741308, 1.48401765986875, 0.6022383996781915, -0.5138652356820355, -8.103361690307636, 7.128312271724506, 12.584105906811907, -0.7254654355635614, 5.5804778350827045  …  -380.5829914906268, -123.15954482703319, 24.61418749530236, 307.33373871567056, 355.8706214939681, 117.79962719545168, 137.4162416377521, 121.1634598283426, 89.1211227217943, 47.44409385216913],)


# Using `DistributionsAD.flatten` to address performance.
using Distributions, DistributionsAD
using ConstructionBase
using ConcreteStructs

"""
    get_logpdf_expr(Tdist)

Return a flattened method for computing the logpdf of `Tdist`.
"""
function get_logpdf_expr(Tdist)
    x = gensym()
    fnames = fieldnames(Tdist)
    func = Expr(:->, 
                Expr(:tuple, fnames..., x), 
                Expr(:block,
                     Expr(:call, :logpdf,
                          Expr(:call, :($(Tdist)), fnames...),
                          x,
                          )
                     )
                )
    return :(flatten(::Type{<:$Tdist}) = $func)
end

make_logpdf_closure(::Type{D}) where {D} = (x, args...) -> logpdf(D(args...), x)

# 1. Use `flatten` to extract a, well, flattened `logpdf`.
eval(get_logpdf_expr(BernoulliLogit))

# 2. [OPTIONAL] Use `StructArrays.jl` to avoid the initial call to the constructor entirely.

# 3. Define a "fast" logpdf method.
@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NamedTuple{names}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,names}
    # Get the flatten expression.
    f = flatten(D)

    args = [:(dist.v.$n) for n in names]
    return :(sum($f.($(args...), x)))
end

# HACK: Constructor which doesn't apply the schema.
function StructArrayNoSchema(::Type{T}, cols::C) where {T, C<:StructArrays.Tup}
    N = isempty(cols) ? 1 : ndims(cols[1])
    StructArrays.StructArray{T, N, typeof(cols)}(cols)
end

@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NamedTuple{names}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,names}
    # Get the flatten expression.
    f = make_logpdf_closure(D)

    args = [:(dist.v.$n) for n in names]
    return :(sum($f.(x, $(args...))))
end

@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NTuple{N}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,N}
    # Get the flatten expression.
    f = make_logpdf_closure(D)

    args = [:(StructArrays.component(dist.v, $i)) for i = 1:N]
    return :(sum($f.(x, $(args...))))
end


# 4. Convenience method for constructing `StructArray` without 
function DistributionsAD.arraydist(::Type{D}, args...) where {D<:Distribution}
    return DistributionsAD.arraydist(D, args)
end
DistributionsAD.arraydist(::Type{D}; args...) where {D<:Distribution} = DistributionsAD.arraydists(D, NamedTuple(args))
function DistributionsAD.arraydist(d::Type{D}, args::NamedTuple) where {D<:Distribution}
    return DistributionsAD.arraydist(StructArrayNoSchema(d, args))
end
function DistributionsAD.arraydist(d::Type{D}, args::Tuple) where {D<:Distribution}
    return DistributionsAD.arraydist(StructArrayNoSchema(d, args))
end

# 5. Type-piracy so we can make use of `~`.
function Distributions.logpdf(dist::Product{<:Any,<:UnivariateDistribution,<:StructVector}, x::AbstractVector{<:Real})
    return fast_logpdf(dist, x)
end


@model function irt_vroom(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)
    y ~ arraydist(BernoulliLogit, theta[p] - beta[i])

    return (; theta, beta)
end
model = irt_vroom(y, i, p);
suite = TuringBenchmarking.make_turing_suite(
    model,
    adbackends = [TuringBenchmarking.ForwardDiffAD{40}(), TuringBenchmarking.ReverseDiffAD{true}()]
);
run(suite)
#+end_src

** Implementation of ABC

#+begin_src julia :eval no
using Turing: OrderedDict
using Turing.DynamicPPL: AbstractPPL

@model function demo()
    x ~ Normal()
    y ~ Normal(x, 1)
end

model = demo() | (y = 2.0, )

function split_latent_data(d::OrderedDict, data_variable)
    ks = collect(keys(d))
    data_keys = filter(ks) do k
        AbstractPPL.subsumes(data_variable, k)
    end
    θ = map(Base.Fix1(getindex, d), filter(∉(data_keys), ks))
    data = map(Base.Fix1(getindex, d), data_keys)

    return θ, data
end


struct ABC{F,V,T} <: AbstractMCMC.AbstractSampler
    stat::F
    data_variable::V
    threshold::T
end

ABC(data_var, threshold) = ABC(identity, data_var, threshold)

compute_distance(sampler::ABC, data_true, data_candidate) = mean(abs2.(data_true .- data_candidate))

function AbstractMCMC.step(rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::ABC; kwargs...)
    # NOTE: Only works if you've used the `model | (x=..., )` conditioning functionality.
    data_true = get(DynamicPPL.conditioned(model), sampler.data_variable)

    joint_model = DynamicPPL.decondition(model, sampler.data_variable)
    d = rand(Turing.OrderedDict, joint_model)
    # Figure out which variables represents data.
    θ, _ = split_latent_data(d, sampler.data_variable)
    return θ, θ
end

function AbstractMCMC.step(rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::ABC, θ_current; kwargs...)
    # NOTE: Only works if you've used the `model | (x=..., )` conditioning functionality.
    data_true = get(DynamicPPL.conditioned(model), sampler.data_variable)

    joint_model = DynamicPPL.decondition(model, sampler.data_variable)
    d = rand(Turing.OrderedDict, joint_model)
    θ_candidate, data_candidate = split_latent_data(d, sampler.data_variable)

    dist = compute_distance(sampler, data_true, data_candidate)

    # TODO Use `threshold` from sampler.
    threshold = 0.1
    θ_next = dist < threshold ? θ_candidate : θ_current

    return θ_next, θ_next
end

function AbstractMCMC.bundle_samples(
    samples::AbstractVector{<:AbstractVector{<:Real}}, model::DynamicPPL.Model, sampler::ABC, ::Any, ::Type{MCMCChains.Chains};
    param_names=missing, discard_initial=0, thinning=1
)
    # Check if we received any parameter names.
    if ismissing(param_names)
        param_names = [Symbol(:param_, i) for i in 1:length(keys(samples[1]))]
    else
        # Generate new array to be thread safe.
        param_names = Symbol.(param_names)
    end

    return MCMCChains.Chains(samples, param_names, (parameters = param_names,); start=discard_initial + 1, thin=thinning)
end
#+end_src

#+RESULTS:

*** Testing it
#+begin_src julia :eval no
rng = Random.MersenneTwister(42)
spl = ABC(@varname(y), 0.1)
θ, _ = AbstractMCMC.step(rng, model, spl)
θ, _ = AbstractMCMC.step(rng, model, spl, θ);
θ
#+end_src

#+RESULTS:
: 1-element Vector{Float64}:
:  -0.3010545352363764


#+begin_src julia :eval no
samples = AbstractMCMC.sample(model, spl, 10_000)
chain = AbstractMCMC.bundle_samples(samples, model, spl, first(samples), MCMCChains.Chains; param_names=[:x])
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (10000×1×1 Array{Float64, 3}):

Iterations        = 1:1:10000
Number of chains  = 1
Samples per chain = 10000
parameters        = x

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m      ess [0m [1m    rhat [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m

           x    0.9199    0.7270     0.0073    0.0340   395.2847    0.9999

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

           x   -0.4766    0.4041    0.9247    1.3853    2.2981
#+end_example

#+begin_src julia :eval no
plot(chain)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b12d5fdf6ab17538f62e35571fde7d083632df95.svg]]
