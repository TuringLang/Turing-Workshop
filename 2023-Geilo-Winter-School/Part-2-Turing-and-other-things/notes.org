#+SETUPFILE: ~/org-blog/setup.org
#+OPTIONS: tex:t toc:nil date:nil
#+PROPERTY: header-args:R :session :exports both :eval no
#+PROPERTY: header-args:julia :session geilo-winter-school :tangle notes.jl :exports both :kernel julia-4-threads-1.8 :async no
#+EXCLUDE_TAGS: noexport
#+TODO: TODO(t) TASK(q) WARNING(w) | DONE(d) SOLUTION(s)

#+REVEAL_ROOT: file:///home/tor/Projects/mine/presentations/2021-10-31-turing-demo/assets/reveal.js-4.1.0/
#+REVEAL_MATHJAX_URL: file:///home/tor/Projects/mine/presentations/2021-10-31-turing-demo/assets/MathJax-2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_TITLE_SLIDE: <div><div style="margin: -200px auto; opacity: 0.2;"><p><object data="https://turing.ml/dev/assets/images/turing-logo-wide.svg"></object></p></div><h1>Bayesian inference and other things</h1><h2>with the TuringLang ecosystem</h2><p><a href="https://github.com/TuringLang">https://github.com/TuringLang</a></p></div>
#+REVEAL_EXTRA_CSS: custom.css
#+REVEAL_THEME: white
#+REVEAL_PLUGINS: (markdown zoom)
#+HTML_HEAD: <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

#+AUTHOR: Tor Erlend Fjelde
#+TITLE: =Turing.jl=

#+BEGIN_SRC emacs-lisp :exports none
(defmacro by-backend (&rest body)
  `(progn
     (cl-case org-export-current-backend ,@body)))

;; (defmacro by-backend (&rest body)
;;   `(cl-case (when (boundp 'backend)
;;               (org-export-backend-name backend))
;;      ,@body))
#+END_SRC

#+RESULTS:
: by-backend

* Before we begin

Make sure you're in the correct directory

#+begin_src julia
pwd()
#+end_src

#+RESULTS:
: "/home/tor/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things"

Then run something like (depending on which OS you are on)

#+begin_src sh :eval no
julia --project
#+end_src

or if you're already in a REPL, do

#+begin_src julia :tangle no
]activate .
#+end_src

#+RESULTS:
:   Activating project at `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things`

to activate the project

#+REVEAL: split

And just to check that you're in the correct one

#+begin_src julia :tangle no
]status
#+end_src

#+RESULTS:
#+begin_example
Project GeiloWinterSchool2023Part2 v0.1.0
Status `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things/Project.toml`
  [6e4b80f9] BenchmarkTools v1.3.2
  [336ed68f] CSV v0.10.9
  [a93c6f00] DataFrames v1.4.4
⌃ [2b5f629d] DiffEqBase v6.114.1
  [0c46a032] DifferentialEquations v7.6.0
  [31c24e10] Distributions v0.25.80
  [f6369f11] ForwardDiff v0.10.34
  [6fdf6af0] LogDensityProblems v2.1.0
  [996a588d] LogDensityProblemsAD v1.1.1
  [429524aa] Optim v1.7.4
  [c46f51b8] ProfileView v1.5.2
  [37e2e3b7] ReverseDiff v1.14.4 `https://github.com/torfjelde/ReverseDiff.jl#torfjelde/sort-of-support-non-linear-indexing`
  [0bca4576] SciMLBase v1.81.0
⌃ [1ed8b502] SciMLSensitivity v7.17.1
  [f3b207a7] StatsPlots v0.15.4
  [fce5fe82] Turing v0.24.0
  [0db1332d] TuringBenchmarking v0.1.1
  [e88e6eb3] Zygote v0.6.55
Info Packages marked with ⌃ have new versions available and may be upgradable.
#+end_example

Download and install dependencies

#+begin_src julia :tangle no
]instantiate
#+end_src

#+RESULTS:

#+REVEAL: split

And finally, do

#+begin_src julia 
using GeiloWinterSchool2023Part2
#+end_src

#+RESULTS:

to get some functionality I've implemented for the occasion

* The story of a little Norwegian boy

#+REVEAL: split

There once was a little Norwegian boy

#+DOWNLOADED: file:///home/tor/Downloads/471337_3317365246956_1262712540_o.jpg @ 2023-01-18 14:49:24
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-49-24_471337_3317365246956_1262712540_o.jpg]]


#+REVEAL: split

When this little boy was 20 years old, he was working as a parking guard near Preikestolen/Pulpit rock


#+DOWNLOADED: file:///home/tor/Downloads/Preikestolen-plateau-Go-Fjords-Bob-Engelsen-P1026771_kljg5o.jpeg @ 2023-01-18 14:57:08
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-57-08_Preikestolen-plateau-Go-Fjords-Bob-Engelsen-P1026771_kljg5o.jpeg]]


#+REVEAL: split

One day it was raining and there was nobody hiking, and so there was no cars in sight for the little boy to point

#+HTML: <div class="fragment (appear)">

When his boss wasn't looking, the little 20 year-old boy had an amazing idea

#+begin_quote
Maybe I can use this method of Mr. Bayes I learned a bit about yesteday to model football / Premier League?
#+end_quote

#+HTML: </div>

#+REVEAL: :frag (appear)
The little boy got very excited and started looking for stuff on the big interwebs

#+REVEAL: split

The little boy came across this

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230118_144454.png @ 2023-01-18 14:46:02
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-46-02_Screenshot_20230118_144454.png]]

And got _very_ excited

#+REVEAL: split

But at the time, the little boy knew next to _nothing_ about programming

The little boy couldn't write the code to do the inference

#+ATTR_REVEAL: :frag (appear)
Whence the little boy became a _sad_ little boy :(

#+REVEAL: split

But time heals all wounds, and at some point the little boy learned Python

And in Python, the boy found the /probabilistic programming language/ =pymc3=

#+HTML: <div class="fragment (appear)">
#+begin_quote
Maybe I can use =pymc3= to perform inference in that football / Premier League model?
#+end_quote

And so the sad boy once more became an _excited_ little boy :)
#+HTML: </div>

#+REVEAL: split

But there was a problem

The boy wanted to write a for-loop in his model, but the model didn't want it to be so and complained!

#+ATTR_REVEAL: :frag (appear)
The boy got frustrated and gave up, once more becoming a _sad_ little boy :(

#+HTML: <div class="small-text">

#+ATTR_REVEAL: :frag (appear)
The boy should have known that the computational backend =theano= that was used by =pymc3= at the time couldn't handle a for-loop, and instead he should have used =scan=. But the boy was only 20-something years old; he didn't know.

#+HTML: </div>

#+REVEAL: split

Some years later the boy discovers a programming language called _Julia_

#+HTML: <div class="fragment (appear)">
Julia makes a few promises
#+ATTR_REVEAL: :frag (appear)
1. It's fast. Like /really/ fast.
2. It's interactive; doesn't require full compilation for you to play with it.
3. You don't have to specify types everywhere.
#+HTML: </div>

#+HTML: <div class="fragment (appear)">
The boy thinks

#+begin_quote
Wait, but this sounds like Python but the only difference is that...I CAN WRITE FOR-LOOPS WITHOUT FEELING BAD ABOUT IT?!
#+end_quote

Yes, yes he could

#+ATTR_REVEAL: :frag (appear)
And 3.5 years later, he's still writing for-loops. Well, sort of.
#+HTML: </div>

** But it really is fast                                           :noexport:


#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230118_153122.png @ 2023-01-18 15:31:28
#+CAPTION: https://julialang.org/benchmarks/ (2023-01-18)
#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_15-31-28_Screenshot_20230118_153122.png]]

#+REVEAL: split

And the consequences are
#+ATTR_REVEAL: :frag (appear)
- Even a naive implementation will be fast; and if you want to go faster, you just optimize the code /in Julia/!
  - No need to drop down to C(++)
- ⟹ "Every" package is written in Julia, so when you encounter a bug you can more easily debug because /the code is in the same language as you're writing code in/!
- ⟹ Same for /extending/ packages!
  - Moreover, thanks to multiple dispatch, you can change a function /on the fly/ to experiment with code you don't even own!
* Why Turing.jl?

#+REVEAL: split

Duh, you should use Turing.jl _so you get to use Julia_

#+HTML: <div class="fragment (appear)">

But even in Julia, other PPLS exist

But Turing.jl is very similar to Julia in "philosophy":
- Flexiblility
- Ease-of-use
- Speed (potentially with a bit of effort)

So it's a pretty good candidate

#+HTML: </div>
* Running example

We'll work with an outbreak of influenza A (H1N1) in 1978 at a British boarding school

- 763 male students -> 512 of which became ill
- Reported that one infected boy started the epidemic
- Observations are number of boys in bed over 14 days

Data are freely available in the R package =outbreaks=, maintained as part of the [[http://www.repidemicsconsortium.org/][R Epidemics Consortium]]

#+HTML: <div class="fragment (appear)">

Data + part of the analysis is /heavily/ inspired by https://mc-stan.org/users/documentation/case-studies/boarding_school_case_study.html

Stan definitively beats Turing.jl when it comes to great write-ups like these

#+HTML: </div>

** Getting the data                                                :noexport:
#+begin_src sh
mkdir -p data
#+end_src

#+RESULTS:

#+begin_src R
install.packages("outbreaks")
#+end_src

#+begin_src R
library(outbreaks)
#+end_src

#+begin_src R
influenza_england_1978_school
#+end_src

#+RESULTS:
| 1978-01-22 |   3 |   0 |
| 1978-01-23 |   8 |   0 |
| 1978-01-24 |  26 |   0 |
| 1978-01-25 |  76 |   0 |
| 1978-01-26 | 225 |   9 |
| 1978-01-27 | 298 |  17 |
| 1978-01-28 | 258 | 105 |
| 1978-01-29 | 233 | 162 |
| 1978-01-30 | 189 | 176 |
| 1978-01-31 | 128 | 166 |
| 1978-02-01 |  68 | 150 |
| 1978-02-02 |  29 |  85 |
| 1978-02-03 |  14 |  47 |
| 1978-02-04 |   4 |  20 |

#+begin_src R
write.csv(influenza_england_1978_school, file="data/influenza_england_1978_school.csv")
#+end_src

** Loading into Julia

#+begin_src julia
# Load the dataframe.
using Dates
using DataFrames, CSV

N = 763
data = DataFrame(CSV.File(joinpath("data", "influenza_england_1978_school.csv")));
print(data)
#+end_src

#+RESULTS:
#+begin_example
14×4 DataFrame
 Row │ Column1  date        in_bed  convalescent 
     │ Int64    Date        Int64   Int64        
─────┼───────────────────────────────────────────
   1 │       1  1978-01-22       3             0
   2 │       2  1978-01-23       8             0
   3 │       3  1978-01-24      26             0
   4 │       4  1978-01-25      76             0
   5 │       5  1978-01-26     225             9
   6 │       6  1978-01-27     298            17
   7 │       7  1978-01-28     258           105
   8 │       8  1978-01-29     233           162
   9 │       9  1978-01-30     189           176
  10 │      10  1978-01-31     128           166
  11 │      11  1978-02-01      68           150
  12 │      12  1978-02-02      29            85
  13 │      13  1978-02-03      14            47
  14 │      14  1978-02-04       4            20
#+end_example

Notice that each of the columns have associated types

#+REVEAL: split

Let's visualize the samples:

#+begin_src julia
using StatsPlots
#+end_src

#+RESULTS:

#+begin_src julia
# StatsPlots.jl provides this convenient macro `@df` for plotting a `DataFrame`.
@df data scatter(:date, :in_bed, label=nothing, ylabel="Number of students in bed")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/76b3c441b3673b484565c95d7ebbe15d9d3e3c29.svg]]

* Differential equations

#+REVEAL: split

Suppose we have some function $f$ which describes how a state $x$ evolves wrt. $t$
\begin{equation*}
\frac{\mathrm{d} x}{\mathrm{d} t} = f(x, t)
\end{equation*}
which we then need to integrate to obtain the actual state at some time $t$
\begin{equation*}
x(t) = \int_{0}^{t} \frac{\mathrm{d} x}{\mathrm{d} t} \mathrm{d} t = \int_{0}^{t} f(x, t) \mathrm{d} t
\end{equation*}

In many interesting scenarios numerical methods are required to obtain $x(t)$

** In Julia
Everything related to differential equations is provided by [[https://docs.sciml.ai/DiffEqDocs/stable/][=DifferentialEquations.jl=]]

#+REVEAL: split

And I really do mean [[https://docs.sciml.ai/DiffEqDocs/stable/][/everything/]]

#+HTML: <div class="side-by-side">

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230119_194737.png @ 2023-01-19 19:48:23
[[file:.notes/attachments/Differential_equations/2023-01-19_19-48-23_Screenshot_20230119_194737.png]]

#+DOWNLOADED: file:///tmp/Spectacle.jWiYMk/Screenshot_20230119_194838.png @ 2023-01-19 19:48:41
[[file:.notes/attachments/Differential_equations/2023-01-19_19-48-41_Screenshot_20230119_194838.png]]

#+HTML: </div>

** Example: SIR model
One particular example of an (ordinary) differential equation that you might have seen recently is the *SIR model* used in epidemiology

#+DOWNLOADED: file:///home/tor/Downloads/sir_illu.png @ 2023-01-19 19:56:00
#+ATTR_ORG: :width 600
#+CAPTION: https://covid19.uclaml.org/model.html (2023-01-19)
[[file:.notes/attachments/Differential_equations/2023-01-19_19-56-00_sir_illu.png]]

#+REVEAL: split

The temporal dynamics of the sizes of each of the compartments are governed by the following system of ODEs:
\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= \beta S \frac{I}{N} - \gamma I \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= \gamma I
\end{split}
\end{equation*}
where
- $S(t)$ is the number of people susceptible to becoming infected,
- $I(t)$ is the number of people currently infected,
- $R(t)$ is the number of recovered people,
- $β$ is the constant rate of infectious contact between people,
- $\gamma$ the constant recovery rate of infected individuals

#+REVEAL: split

Converting this ODE into code is just

#+begin_src julia
using DifferentialEquations

function SIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population
    S, I, R = u
    β, γ = p

    du[1] = dS = -β * I * S / N
    du[2] = dI = β * I * S / N - γ * I
    du[3] = dR = γ * I
end
#+end_src

#+RESULTS:
: SIR! (generic function with 1 method)

Not too bad!

#+REVEAL: split

Initial conditions are then
\begin{equation*}
\begin{split}
  S(0) &= N - 1 \\
  I(0) &= 1 \\
  R(0) &= 0
\end{split}
\end{equation*}
and we want to integrate from $t = 0$ to $t = 14$

#+begin_src julia
# Include 0 because that's the initial condition before any observations.
tspan = (0.0, 14.0)

# Initial conditions are:
#   S(0) = N - 1; I(0) = 1; R(0) = 0
u0 = [N - 1, 1, 0.0]
#+end_src

#+RESULTS:
: 3-element Vector{Float64}:
:  762.0
:    1.0
:    0.0

#+REVEAL: split

Now we just need to define the overall problem and we can solve:

#+begin_src julia
# Just to check that everything works, we'll just use some "totally random" values for β and γ:
problem_sir = let β = 2.0, γ = 0.6
    ODEProblem(SIR!, u0, tspan, (β, γ))
end
#+end_src

#+RESULTS:
: ODEProblem with uType Vector{Float64} and tType Float64. In-place: true
: timespan: (0.0, 14.0)
: u0: 3-element Vector{Float64}:
:  762.0
:    1.0
:    0.0

#+REVEAL: split

Aaaand

#+begin_src julia
sol = solve(problem_sir)
#+end_src

#+RESULTS:
#+begin_example
retcode: Success
Interpolation: specialized 4th order "free" interpolation, specialized 2nd order "free" stiffness-aware interpolation
t: 23-element Vector{Float64}:
  0.0
  0.0023558376404244326
  0.025914214044668756
  0.11176872871946908
  0.26714420676761075
  0.47653584778586056
  0.7436981238065388
  1.0701182881347182
  1.4556696154809898
  1.8994815718103506
  2.4015425820305163
  2.9657488203418048
  3.6046024613854746
  4.325611232479916
  5.234036476235002
  6.073132270491685
  7.323851265223563
  8.23100744184026
  9.66046960467715
 11.027717843180652
 12.506967592177675
 13.98890399536329
 14.0
u: 23-element Vector{Vector{Float64}}:
 [762.0, 1.0, 0.0]
 [761.9952867607622, 1.003297407481751, 0.001415831756055325]
 [761.9472927630898, 1.036873767352754, 0.015833469557440357]
 [761.7584189579304, 1.1690001128296739, 0.0725809292398516]
 [761.353498610305, 1.4522140137552049, 0.19428737593979384]
 [760.6490369821046, 1.9447820690728455, 0.4061809488225752]
 [759.3950815454128, 2.8210768113583082, 0.7838416432288186]
 [757.0795798160242, 4.437564277195732, 1.4828559067800167]
 [752.6094742865345, 7.552145919430467, 2.8383797940350495]
 [743.573784947305, 13.823077731564027, 5.603137321131049]
 [724.5575481927715, 26.909267078762316, 11.533184728466205]
 [683.6474029897502, 54.51612001957392, 24.836476990675976]
 [598.1841629858786, 109.41164143668018, 55.40419557744127]
 [450.08652743810205, 192.396449154863, 120.51702340703504]
 [259.11626253270623, 256.9925778114915, 246.89115965580237]
 [148.3573731526537, 240.10301213899098, 374.53961470835543]
 [76.52998017846475, 160.6373332952353, 525.8326865263001]
 [55.70519994004921, 108.7634182279299, 598.531381832021]
 [41.39587834423381, 55.09512088924873, 666.5090007665176]
 [35.87067243374374, 27.821838135708532, 699.3074894305479]
 [33.252184333490774, 13.087185981359177, 716.6606296851502]
 [32.08996839417716, 6.105264616193066, 724.8047669896299]
 [32.08428686823946, 6.070415830241046, 724.8452973015196]
#+end_example


#+REVEAL: split

We didn't specify a solver

DifferentialEquations.jl uses =AutoTsit5(Rosenbrock32())= by default 

Which is a composition between

- =Tsit5= (4th order Runge-Kutta), and
- =Rosenbrock32= (3rd order stiff solver)

with automatic switching between the two

#+REVEAL: split

=AutoTsit5(Rosenbrock32())= covers many use-cases well, but see

- https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/
- https://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/

for more info on choosing a solver

#+REVEAL: split

This is the resulting solution

#+begin_src julia
plot(
    sol,
    linewidth=2, xaxis="Time in days", label=["Suspectible" "Infected" "Recovered"],
    alpha=0.5, size=(500, 300)
)
scatter!(1:14, data.in_bed, label="Data", color="black")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2406ad698441a9739a05b3b204699e473fae2cbb.svg]]

This doesn't really match the data though; let's do better

#+REVEAL: split

Approach #1: find optimal values of $\beta$ and $\gamma$ by minimizing some loss, e.g. sum-of-squares

\begin{equation*}
\ell(\beta, \gamma) = \sum_{i = 1}^{14} \bigg( F(u_0, t_i;\ \beta, \gamma) - y_i \bigg)^2
\end{equation*}

where $\big( y_i \big)_{i = 1}^{14}$ are the observations, $F$ is the integrated system

#+HTML: <div class="fragment (appear)">

First we define the loss

#+begin_src julia
# Define the loss function.
function loss_sir(problem_orig, p)
    # `remake` just, well, remakes the `problem` with `p` replaced.
    problem = remake(problem_orig, p=p)
    # To ensure we get solutions _exactly_ at the timesteps of interest,
    # i.e. every day we have observations, we use `saveat=1` to tell `solve`
    # to save at every timestep (which is one day).
    sol = solve(problem, saveat=1)
    # Extract the 2nd state, the (I)infected, for the dates with observations.
    sol_for_observed = sol[2, 2:15]
    # Compute the sum-of-squares of the infected vs. data.
    sum(abs2.(sol_for_observed - data.in_bed))
end
#+end_src

#+RESULTS:
: loss_sir (generic function with 1 method)

#+HTML: </div>

#+REVEAL: split

And the go-to for optimization in Julia is [[https://julianlsolvers.github.io/Optim.jl/stable/][Optim.jl]]

#+begin_src julia
using Optim
# An alternative to writing `y -> f(x, y)` is `Base.Fix1(f, x)` which
# avoids potential performance issues with global variables (as our `problem` here).
opt = optimize(
    p -> loss_sir(problem_sir, p), # function to minimize
    [0, 0],                # lower bounds on variables
    [Inf, Inf],            # upper bounds on variables
    [2.0, 0.5],            # initial values
    Fminbox(NelderMead())  # optimization alg
) 
#+end_src

#+RESULTS:
#+begin_example
,* Status: success

,* Candidate solution
   Final objective value:     4.116433e+03

,* Found with
   Algorithm:     Fminbox with Nelder-Mead

,* Convergence measures
   |x - x'|               = 0.00e+00 ≤ 0.0e+00
   |x - x'|/|x'|          = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|         = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|/|f(x')| = 0.00e+00 ≤ 0.0e+00
   |g(x)|                 = 7.86e+04 ≰ 1.0e-08

,* Work counters
   Seconds run:   4  (vs limit Inf)
   Iterations:    4
   f(x) calls:    565
   ∇f(x) calls:   1
#+end_example

#+REVEAL: split

We can extract the minimizers of the loss

#+begin_src julia
β, λ = Optim.minimizer(opt)
β, λ
#+end_src

#+RESULTS:
| 1.6692320164955483 | 0.44348639177622445 |

#+REVEAL: split

#+begin_src julia
# Solve for the obtained parameters.
problem = remake(problem_sir, p=(β, λ))
sol = solve(problem_sir)

# Plot the solution.
plot(sol, linewidth=2, xaxis="Time in days", label=["Suspectible" "Infected" "Recovered"], alpha=0.5)
# And the data.
scatter!(1:14, data.in_bed, label="Data", color="black")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e1964721d2842e2f7eb34bc2421180a4249b16ed.svg]]

That's better than our /totally/ "random" guess from earlier!

** Example: SEIR model

Adding another compartment to our SIR model: the _(E)xposed_ state

\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} {\color{blue} E}}{\mathrm{d} t} &= \beta S \frac{I}{N} - {\color{orange} \sigma} {\color{blue} E} \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= {\color{orange} \sigma} {\color{blue} E} - \gamma I \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= \gamma I
\end{split}
\end{equation*}

where we've added a new parameter ${\color{orange} \sigma}$ describing the fraction of people who develop observable symptoms in this time

** TASK Solve the SEIR model using Julia

#+begin_src julia :eval no
function SEIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population

    S, E, I, R = u  # have ourselves an additional state!
    β, γ, σ = p     # and an additional parameter!

    # TODO: Implement yah fool!
    du[1] = nothing
    du[2] = nothing
    du[3] = nothing
    du[4] = nothing
end
#+end_src

*BONUS:* Use =Optim.jl= to find minimizers of sum-of-squares

** SOLUTION Solve the SEIR model using Julia

#+begin_src julia
function SEIR!(
    du,  # buffer for the updated differential equation
    u,   # current state
    p,   # parameters
    t    # current time
)
    N = 763  # population
    S, E, I, R = u  # have ourselves an additional state!
    β, γ, σ = p     # and an additional parameter!

    # Might as well cache these computations.
    βSI = β * S * I / N
    σE = σ * E
    γI = γ * I

    du[1] = -βSI
    du[2] = βSI - σE
    du[3] = σE - γI
    du[4] = γI
end
#+end_src

#+RESULTS:
: SEIR! (generic function with 1 method)

#+REVEAL: split

#+begin_src julia
problem_seir = let u0 = [N - 1, 0, 1, 0], β = 2.0, γ = 0.6, σ = 0.8
    ODEProblem(SEIR!, u0, tspan, (β, γ, σ))
end
#+end_src

#+RESULTS:
: ODEProblem with uType Vector{Int64} and tType Float64. In-place: true
: timespan: (0.0, 14.0)
: u0: 4-element Vector{Int64}:
:  762
:    0
:    1
:    0

#+begin_src julia
sol_seir = solve(problem_seir, saveat=1)
#+end_src

#+RESULTS:
#+begin_example
retcode: Success
Interpolation: 1st order linear
t: 15-element Vector{Float64}:
  0.0
  1.0
  2.0
  3.0
  4.0
  5.0
  6.0
  7.0
  8.0
  9.0
 10.0
 11.0
 12.0
 13.0
 14.0
u: 15-element Vector{Vector{Float64}}:
 [762.0, 0.0, 1.0, 0.0]
 [760.1497035901518, 1.277915971753478, 1.0158871356490553, 0.5564933024456415]
 [757.5476928906271, 2.425869618233348, 1.6850698824327135, 1.341367608706787]
 [753.081189706403, 4.277014534677882, 2.9468385687120784, 2.6949571902067637]
 [745.3234082630842, 7.455598293492679, 5.155811621098981, 5.065181822323938]
 [731.9851682751213, 12.855816151849933, 8.960337047554939, 9.198678525473571]
 [709.5042941973462, 21.77178343781762, 15.384985521594787, 16.338936843241182]
 [672.8733895183619, 35.77263271085456, 25.88133104438007, 28.472646726403138]
 [616.390571176038, 55.97177756967422, 42.09614416178476, 48.54150709250279]
 [536.453596476594, 81.2428045994271, 64.9673325777641, 80.33626634621449]
 [436.43708330634297, 106.04037246704702, 92.9550757379631, 127.56746848864664]
 [329.60092931771436, 121.08020372279418, 120.48402926084937, 191.83483769864185]
 [233.8471941518982, 119.43669383157659, 139.3233304893263, 270.3927815271987]
 [160.88805352426687, 102.7399386960996, 143.3826208089892, 355.9893869706441]
 [111.72261866282292, 79.02493776169311, 132.78384886713565, 439.46859470834806]
#+end_example

#+REVEAL: split

#+begin_src julia
plot(sol_seir, linewidth=2, xaxis="Time in days", label=["Suspectible" "Exposed" "Infected" "Recovered"], alpha=0.5)
scatter!(1:14, data.in_bed, label="Data")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6beb1075d3532a1661547d43a899196144da6c81.svg]]

Don't look so good. Let's try Optim.jl again.

#+REVEAL: split

#+begin_src julia
function loss_seir(problem, p)
    problem = remake(problem, p=p)
    sol = solve(problem, saveat=1)
    # NOTE: 3rd state is now the (I)nfectious compartment!!!
    sol_for_observed = sol[3, 2:15]
    return sum(abs2.(sol_for_observed - data.in_bed))
end
#+end_src

#+RESULTS:
: loss_seir (generic function with 1 method)

#+begin_src julia
opt = optimize(Base.Fix1(loss_seir, problem_seir), [0, 0, 0], [Inf, Inf, Inf], [2.0, 0.5, 0.9], Fminbox(NelderMead()))
#+end_src

#+RESULTS:
#+begin_example
,* Status: success (reached maximum number of iterations)

,* Candidate solution
   Final objective value:     3.115978e+03

,* Found with
   Algorithm:     Fminbox with Nelder-Mead

,* Convergence measures
   |x - x'|               = 0.00e+00 ≤ 0.0e+00
   |x - x'|/|x'|          = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|         = 0.00e+00 ≤ 0.0e+00
   |f(x) - f(x')|/|f(x')| = 0.00e+00 ≤ 0.0e+00
   |g(x)|                 = 1.77e+05 ≰ 1.0e-08

,* Work counters
   Seconds run:   2  (vs limit Inf)
   Iterations:    3
   f(x) calls:    13259
   ∇f(x) calls:   1
#+end_example

#+REVEAL: split

#+begin_src julia
β, γ, σ = Optim.minimizer(opt)
#+end_src

#+RESULTS:
: 3-element Vector{Float64}:
:  4.853872993924619
:  0.4671485850111774
:  0.8150294098438762

#+begin_src julia
sol_seir = solve(remake(problem_seir, p=(β, γ, σ)), saveat=1)
plot(sol_seir, linewidth=2, xaxis="Time in days", label=["Suspectible" "Exposed" "Infected" "Recovered"], alpha=0.5)
scatter!(1:14, data.in_bed, label="Data", color="black")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4c80e61dcdf0e96a1b96caac7b63ee65df62cc4c.svg]]

#+REVEAL: split

#+begin_quote
But...but these are _point estimates_! What about distributions? WHAT ABOUT UNCERTAINTY?!
#+end_quote

No, no that's fair.

Let's do some Bayesian inference then.

BUT FIRST!

** Making our future selves less annoyed

It's annoying to have all these different loss-functions for /both/ =SIR!= and =SEIR!=

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# Abstract type which we can use to dispatch on.
abstract type AbstractEpidemicProblem end

struct SIRProblem{P} <: AbstractEpidemicProblem
    problem::P
    N::Int
end

function SIRProblem(N::Int; u0 = [N - 1, 1, 0.], tspan = (0, 14), p = [2.0, 0.6])
    return SIRProblem(ODEProblem(SIR!, u0, tspan, p), N)
end
#+end_src

#+RESULTS:
: SIRProblem

Then we can just construct the problem as

#+begin_src julia
sir = SIRProblem(N);
#+end_src

#+RESULTS:

#+HTML: </div>

#+REVEAL: split

And to make it a bit easier to work with, we add some utility functions

#+begin_src julia
# General.
parameters(prob::AbstractEpidemicProblem) = prob.problem.p
initial_state(prob::AbstractEpidemicProblem) = prob.problem.u0
population(prob::AbstractEpidemicProblem) = prob.N

# Specializations.
susceptible(::SIRProblem, u::AbstractMatrix) = u[1, :]
infected(::SIRProblem, u::AbstractMatrix) = u[2, :]
recovered(::SIRProblem, u::AbstractMatrix) = u[3, :]
#+end_src

#+RESULTS:
: recovered (generic function with 1 method)

So that once we've solved the problem, we can easily extract the compartment we want, e.g.

#+begin_src julia
sol = solve(sir.problem, saveat=1)
infected(sir, sol)
#+end_src

#+RESULTS:
#+begin_example
15-element Vector{Float64}:
   1.0
   4.026799533924021
  15.824575905720002
  56.779007685250534
 154.4310579906169
 248.98982384839158
 243.67838619968524
 181.93939659551987
 120.64627375763271
  75.92085282572398
  46.58644927641269
  28.214678599716418
  16.96318676577873
  10.158687874394722
   6.070415830241046
#+end_example

** TASK Implement =SEIRProblem=

#+begin_src julia :eval no
struct SEIRProblem <: AbstractEpidemicProblem
    # ...
end

function SEIRProblem end

susceptible
exposed
infected
recovered
#+end_src

** SOLUTION Implement =SEIRProblem=

#+begin_src julia
struct SEIRProblem{P} <: AbstractEpidemicProblem
    problem::P
    N::Int
end

function SEIRProblem(N::Int; u0 = [N - 1, 0, 1, 0.], tspan = (0, 14), p = [4.5, 0.45, 0.8])
    return SEIRProblem(ODEProblem(SEIR!, u0, tspan, p), N)
end

susceptible(::SEIRProblem, u::AbstractMatrix) = u[1, :]
exposed(::SEIRProblem, u::AbstractMatrix) = u[2, :]
infected(::SEIRProblem, u::AbstractMatrix) = u[3, :]
recovered(::SEIRProblem, u::AbstractMatrix) = u[4, :]
#+end_src

#+RESULTS:
: recovered (generic function with 2 methods)

#+REVEAL: split

Now, given a =problem= and a =sol=, we can query the =sol= for the =infected= state without explicit handling of which =problem= we're working with

#+begin_src julia
seir = SEIRProblem(N);
sol = solve(seir.problem, saveat=1)
infected(seir, sol)
#+end_src

#+RESULTS:
#+begin_example
15-element Vector{Float64}:
   1.0
   1.9941817088874336
   6.958582307202902
  23.9262335176065
  74.23638542794971
 176.98368495653585
 276.06126059898344
 293.92632518571605
 249.92836195453708
 189.07578975511504
 134.2373192679034
  91.82578430804273
  61.38108478932363
  40.42264366743211
  26.357816296754425
#+end_example

** Same =loss= for both!

#+begin_src julia
function loss(problem_wrapper::AbstractEpidemicProblem, p)
    # NOTE: Extract the `problem` from `problem_wrapper`.
    problem = remake(problem_wrapper.problem, p=p)
    sol = solve(problem, saveat=1)
    # NOTE: Now this is completely general!
    sol_for_observed = infected(problem_wrapper, sol)[2:end]
    return sum(abs2.(sol_for_observed - data.in_bed))
end
#+end_src

#+RESULTS:
: loss (generic function with 1 method)

Now we can call the same =loss= for both =SIR= and =SEIR=

#+begin_src julia 
loss(SIRProblem(N), [2.0, 0.6])
#+end_src

#+RESULTS:
: 50257.83978134881

#+begin_src julia 
loss(SEIRProblem(N), [2.0, 0.6, 0.8])
#+end_src

#+RESULTS:
: 287325.105532706

* Bayesian inference

#+REVEAL: split

First off

#+begin_src julia
using Turing
#+end_src

#+RESULTS:

#+REVEAL: split

This dataset really doesn't have too many observations

#+begin_src julia
nrow(data)
#+end_src

#+RESULTS:
: 14

So reporting a single number for parameters is maybe being a /bit/ too confident

#+REVEAL: split

We'll use the following model
\begin{equation*}
\begin{split}
  \beta &\sim \mathcal{N}_{ + }(2, 1) \\
  \gamma &\sim \mathcal{N}_{ + }(0.4, 0.5) \\
  \phi^{-1} &\sim \mathrm{Exponential}(1/5) \\
   y_i &\sim \mathrm{NegativeBinomial2}\big(F(u_0, t_i;\ \beta, \gamma), \phi \big)
\end{split}
\end{equation*}
where 
- $\big( y_i \big)_{i = 1}^{14}$ are the observations, 
- $F$ is the integrated system, and
- $\phi$ is the over-dispersion parameter.

#+REVEAL: split

#+begin_src julia
plot(
    plot(truncated(Normal(2, 1); lower=0), label=nothing, title="β"),
    plot(truncated(Normal(0.4, 0.5); lower=0), label=nothing, title="γ"),
    plot(Exponential(1/5), label=nothing, title="ϕ⁻¹"),
    layout=(3, 1)
)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4f496cf7a148e14689ce9215ef986981ad7a05ac.svg]]

#+REVEAL: split

A =NegativeBinomial(r, p)= represents the number of trials to achieve $r$ successes, where each trial has a probability $p$ of success

A =NegativeBinomial2(μ, ϕ)= is the same, but parameterized using the mean $μ$ and /dispersion/ $\phi$

#+begin_src julia
# `NegativeBinomial` already exists, so let's just make an alternative constructor instead.
function NegativeBinomial2(μ, ϕ)
    p = 1/(1 + μ/ϕ)
    r = ϕ
    return NegativeBinomial(r, p)
end
#+end_src

#+RESULTS:
: NegativeBinomial2 (generic function with 1 method)

#+begin_src julia
# Let's just make sure we didn't do something stupid.
μ = 2; ϕ = 3;
dist = NegativeBinomial2(μ, ϕ)
# Source: https://mc-stan.org/docs/2_20/functions-reference/nbalt.html
mean(dist) ≈ μ && var(dist) ≈ μ + μ^2 / ϕ
#+end_src

#+RESULTS:
: true

#+REVEAL: split

Can be considered a generalization of =Poisson=

#+begin_src julia
μ = 2.0
anim = @animate for ϕ ∈ [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 25.0, 100.0]
    p = plot(size=(500, 300))
    plot!(p, Poisson(μ); label="Poisson($μ)")
    plot!(p, NegativeBinomial2(μ, ϕ), label="NegativeBinomial2($μ, $ϕ)")
    xlims!(0, 20); ylims!(0, 0.35);
    p
end
gif(anim, "negative_binomial.gif", fps=2);
#+end_src

#+RESULTS:
: [ Info: Saved animation to /home/tor/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/Part-2-Turing-and-other-things/negative_binomial.gif

[[./negative_binomial.gif]]

#+REVEAL: split

#+begin_src julia
@model function sir_model(
    num_days;                                  # Number of days to model
    tspan = (0.0, float(num_days)),            # Timespan to model
    u0 = [N - 1, 1, 0.0],                      # Initial state
    p0 = [2.0, 0.6],                           # Placeholder parameters
    problem = ODEProblem(SIR!, u0, tspan, p0)  # Create problem once so we can `remake`.
)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)
    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem, p=[β, γ])  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)       # Solve!

    sol_for_observed = sol[2, 2:num_days + 1]  # Timesteps we have observations for.
    in_bed = Vector{Int}(undef, num_days)
    for i = 1:length(sol_for_observed)
        # Add a small constant to `sol_for_observed` to make things more stable.
        in_bed[i] ~ NegativeBinomial2(sol_for_observed[i] + 1e-5, ϕ)
    end

    # Some quantities we might be interested in.
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
end
#+end_src

#+RESULTS:
: sir_model (generic function with 2 methods)

Let's break it down

#+REVEAL: split

#+begin_src julia :eval no :tangle no
β ~ truncated(Normal(2, 1); lower=0)
γ ~ truncated(Normal(0.4, 0.5); lower=0)
ϕ⁻¹ ~ Exponential(1/5)
ϕ = inv(ϕ⁻¹)
#+end_src

defines our prior

=truncated= is just a way of restricting the domain of the distribution you pass it

#+REVEAL: split

#+begin_src julia :eval no :tangle no
problem_new = remake(problem, p=[β, γ])  # Replace parameters `p`.
sol = solve(problem_new, saveat=1)       # Solve!
#+end_src

We then remake the problem, now with the parameters =[β, γ]= sampled above

=saveat = 1= gets us the solution at the timesteps =[0, 1, 2, ..., 14]=

#+REVEAL: split

Then we extract the timesteps we have observations for

#+begin_src julia :eval no :tangle no
sol_for_observed = sol[2, 2:num_days + 1]  # Timesteps we have observations for.
#+end_src

and define what's going to be a likelihood (once we add observations)

#+begin_src julia :eval no :tangle no
in_bed = Vector{Int}(undef, num_days)
for i = 1:length(sol_for_observed)
    # Add a small constant to `sol_for_observed` to make things more stable.
    in_bed[i] ~ NegativeBinomial2(sol_for_observed[i] + 1e-5, ϕ)
end
#+end_src

#+REVEAL: split

Finally we return some values that might be of interest to

#+begin_src julia :eval no :tangle no
# Some quantities we might be interested in.
return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
#+end_src

This is useful for a post-sampling diagnostics, debugging, etc.

#+REVEAL: split

#+begin_src julia
model = sir_model(length(data.in_bed))
#+end_src

#+RESULTS:
: Model(
:   args = (:num_days, :tspan, :u0, :p0, :problem)
:   defaults = (:tspan, :u0, :p0, :problem)
:   context = DynamicPPL.DefaultContext()
: )

The model is just another function, so we can call it to check that it works

#+HTML: <div class="fragment (appear)">

#+begin_src julia
model().infected
#+end_src

#+RESULTS:
#+begin_example
14-element Vector{Float64}:
   3.2501452711810925
  10.455893319084339
  32.571431669526035
  92.36503270365371
 209.26158360881826
 330.35154814029784
 370.73847609010966
 339.6516880058519
 282.666942413407
 225.17897188954973
 175.61406211173988
 135.44339750539046
 103.79994367641493
  79.2451661386156
#+end_example

Hey, it does!

#+HTML: </div>

** Is the prior reasonable?

Before we do any inference, we should check if the prior is reasonable

From domain knowledge we know that (for influenza at least)
#+ATTR_REVEAL: :frag (appear)
- $R_0$ is typically between 1 and 2
- =recovery_time= ($1 / \gamma$) is usually ~1 week

#+HTML: <div class="fragment (appear)">

We want to make sure that your prior belief reflects this knowledge while still being flexible enough to accommodate the observations

#+HTML: </div>

#+REVEAL: split

To check this we'll just simulate some draws from our prior model, i.e. the model /without/ conditioning on =in_bed=

There are two ways to sample form the prior

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# 1. By just calling the `model`, which returns a `NamedTuple` containing the quantities of interest
print(model())
#+end_src

#+RESULTS:
: (R0 = 5.562476995767097, recovery_time = 1.6670393200262643, infected = [15.029702782985455, 162.2310059867884, 390.229443134878, 294.3259866370429, 175.49637212007642, 99.93026648954434, 56.13849136636166, 31.372688143530105, 17.490416296503806, 9.739782488346645, 5.420708326260716, 3.0160667830132084, 1.67756217950019, 0.9331202806381096])

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

Or by just calling =sample= using =Prior=

#+begin_src julia
# Sample from prior.
chain_prior = sample(model, Prior(), 10_000);
#+end_src

#+RESULTS:
: Sampling:  10%|███▉                                     |  ETA: 0:00:01Sampling: 100%|█████████████████████████████████████████| Time: 0:00:01

#+HTML: </div>

#+REVEAL: split

Let's have a look at the prior predictive

#+begin_src julia
p = plot(legend=false, size=(600, 300))
plot_trajectories!(p, group(chain_prior, :in_bed); n = 1000)
hline!([N], color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e96907081d18b2f94c5940fb71808b0aa3ee5cc1.svg]]

#+ATTR_REVEAL: :frag (appear)
For certain values we get number of infected /larger/ than the actual population

#+ATTR_REVEAL: :frag (appear)
But this is includes the randomness from =NegativeBinomial2= likelihood

#+ATTR_REVEAL: :frag (appear)
Maybe more useful to inspect the (I)nfected state from the ODE solution?

#+REVEAL: split

We can also look at the =generated_quantities=, i.e. the values from the =return= statement in our model

Our =return= looked like this

#+begin_src julia :eval no :tangle no
# Some quantities we might be interested in.
return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
#+end_src

and so =generated_quantities= (conditioned on =chain_prior=) gives us

#+begin_src julia
quantities_prior = generated_quantities(
    model,
    MCMCChains.get_sections(chain_prior, :parameters)
)
print(quantities_prior[1])
#+end_src

#+RESULTS:
: (R0 = 2.9458726205843213, recovery_time = 2.134609053594171, infected = [2.4794748712200407, 6.107429460529428, 14.804391188885294, 34.55267666860773, 74.21684509444948, 136.17598788230885, 197.96647215192334, 224.3844616799282, 209.18994484659507, 172.14663235222972, 131.60271611451893, 96.3923921630688, 68.83231677462278, 48.39088768484993])

#+REVEAL: split

We can convert it into a =Chains= using a utility function of mine

#+begin_src julia
# Convert to `Chains`.
chain_quantities_prior = to_chains(quantities_prior);

# Plot.
p = plot(legend=false, size=(600, 300))
plot_trajectories!(p, group(chain_quantities_prior, :infected); n = 1000)
hline!([N], color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/bc5288ac9408caec4cd67ec31b1d6a283cbe7af0.svg]]

#+HTML: <div class="x-small-text">

*NOTE:* =to_chains= is not part of "official" Turing.jl because the =return= can contain /whatever/ you want, and so it's not always possible to convert into a =Chains=

#+HTML: </div>

#+REVEAL: split

And the quantiles for the trajectories

#+begin_src julia
p = plot(legend=false, size=(600, 300))
plot_trajectory_quantiles!(p, group(chain_quantities_prior, :infected))
hline!(p, [N], color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b51f6dc0f998168efb9b0fc6b8dc02f7e9aa11f9.svg]]

#+REVEAL: split


#+begin_src julia :display text/plain
DataFrame(quantile(chain_quantities_prior[:, [:R0, :recovery_time], :]))
#+end_src

#+RESULTS:
: 2×6 DataFrame
:  Row │ parameters     2.5%      25.0%    50.0%    75.0%    97.5%   
:      │ Symbol         Float64   Float64  Float64  Float64  Float64 
: ─────┼─────────────────────────────────────────────────────────────
:    1 │ R0             0.538606  2.09862  3.64561  7.05169  56.6921
:    2 │ recovery_time  0.705198  1.20171  1.85285  3.4475   27.4865

Compare to our prior knowledge of $R_0 \in [1, 2]$ and $(1/\gamma) \approx 1$ for influenza

Do we really need probability mass on $R_0 \ge 10$?

** TASK What's wrong with the current prior?

#+HTML: <div class="side-by-side">

#+HTML: <div style="margin: auto;">

The SIR model

\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= \beta S \frac{I}{N} - \gamma I \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= \gamma I
\end{split}
\end{equation*}

#+HTML: </div>

#+HTML: <div>

And here's the current priors

#+HTML: <div class="x-small-text">

#+begin_src julia 
plot(
    plot(truncated(Normal(2, 1); lower=0), label=nothing, title="β"),
    plot(truncated(Normal(0.4, 0.5); lower=0), label=nothing, title="γ"),
    plot(Exponential(1/5), label=nothing, title="ϕ⁻¹"),
    layout=(3, 1)
)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/02a79b7bda9c84578095836671eb1f04551856f3.svg]]

#+HTML: </div>

#+HTML: </div>

#+HTML: </div>

** SOLUTION Recovery time shouldn't be several years

We mentioned that =recovery_time=, which is expressed as $1 / \gamma$, is ~1 week

We're clearly putting high probability on regions near 0, i.e. /long/ recovery times

#+begin_src julia
plot(truncated(Normal(0.4, 0.5); lower=0), label=nothing, title="γ", size=(500, 300))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e9e5d7726b97f5ee1e54ad31634f20fa74704d61.svg]]

_Should probably be putting less probability mass near 0_

** SOLUTION ${\color{red} \gamma}$ should not be larger than 1

\begin{equation*}
\begin{split}
  \frac{\mathrm{d} S}{\mathrm{d} t} &= - \beta S \frac{I}{N} \\
  \frac{\mathrm{d} I}{\mathrm{d} t} &= \beta S \frac{I}{N} - {\color{red} \gamma I} \\
  \frac{\mathrm{d} R}{\mathrm{d} t} &= {\color{red} \gamma I}
\end{split}
\end{equation*}

If ${\color{red} \gamma} > 1$ ⟹ (R)ecovered increase by /more/ than the (I)nfected

⟹ _healthy people are recovering_

#+REVEAL: :frag (appear)
Now, I'm no epidemiologist, but that doesn't seem right

#+REVEAL: split

Maybe something like

#+begin_src julia
plot(Beta(2, 5), label="new", size=(500, 300))
plot!(truncated(Normal(0.4, 0.5); lower=0), label="old", color="red")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/def222d8857f10ca58c43a6b7fcd9014afd3ee35.svg]]

- [X] Bounded at 1
- [X] Allows smaller values (i.e. longer recovery time) but rapidly decreases near zero

** SOLUTION What if ${\color{red} \beta} > N$?
Then for $t = 0$ we have
\begin{equation*}
\frac{\mathrm{d} S}{\mathrm{d} t} \bigg|_{t = 0} = - {\color{red} \beta} S \frac{I}{N} > - N (N - 1) \frac{1}{N} = - (N - 1)
\end{equation*}

i.e. we /immediately/ infect everyone on the very first time-step

Also doesn't seem very realistic

#+REVEAL: split

/But/ under our current prior does this matter?

#+begin_src julia
# ℙ(β > N) = 1 - ℙ(β ≤ N)
1 - cdf(truncated(Normal(2, 1); lower=0), N)
#+end_src

#+RESULTS:
: 0.0

Better yet

#+begin_src julia
quantile(truncated(Normal(2, 1); lower=0), 0.95)
#+end_src

#+RESULTS:
: 3.6559843567138275

i.e. 95% of the probability mass falls below ~3.65

⟹ _Current prior for $\beta$ seems fine (✓)_

#+REVEAL: split

Before we change the prior, let's also make it a bit easier to change the prior using =@submodel=

#+HTML: <div class="fragment (appear)">

=@submodel= allows you call models within models, e.g.

#+begin_src julia
@model function A()
    x_hidden_from_B ~ Normal()
    x = x_hidden_from_B + 100
    return x
end

@model function B()
    @submodel x = A()
    y ~ Normal(x, 1)

    return (; x, y)
end
#+end_src

#+RESULTS:
: B (generic function with 2 methods)

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# So if we call `B` we only see `x` and `y`
println(B()())
#+end_src

#+RESULTS:
: (x = 100.45479956794702, y = 101.24168726053745)

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

#+begin_src julia
# While if we sample from `B` we get the latent variables
println(rand(B()))
#+end_src

#+RESULTS:
: (x_hidden_from_B = 1.0042833461744456, y = 99.45592488832759)

#+HTML: </div>

#+REVEAL: split

To avoid clashes of variable-names, we can specify a =prefix=

#+begin_src julia
@model A() = (x ~ Normal(); return x + 100)

@model function B()
    # Given it a prefix to use for the variables in `A`.
    @submodel prefix=:inner x_inner = A()
    x ~ Normal(x_inner, 1)

    return (; x_inner, x)
end
#+end_src

#+RESULTS:
: B (generic function with 2 methods)

#+begin_src julia
print(rand(B()))
#+end_src

#+RESULTS:
: (var"inner.x" = 0.8886628454453581, x = 100.58952461485181)

#+REVEAL: split

=@submodel= is useful as it allows you to:
1. Easy to swap out certain parts of your model.
2. Can re-use models across projects and packages.

When working on larger projects, this really shines

#+REVEAL: split

Equipped with =@submodel= we can replace

#+begin_src julia :eval no :tangle no
β ~ truncated(Normal(2, 1); lower=0)
γ ~ truncated(Normal(0.4, 0.5); lower=0)
#+end_src

with

#+begin_src julia :eval no :tangle no
@submodel p = prior(problem_wrapper)
#+end_src

#+HTML: <div class="fragment (appear)">

where =prior= can be something like

#+begin_src julia
@model function prior_original(problem_wrapper::SIRProblem)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)

    return [β, γ]
end

@model function prior_improved(problem_wrapper::SIRProblem)
    # NOTE: Should probably also lower mean for `β` since
    # more probability mass on small `γ` ⟹ `R0 =  β / γ` grows.
    β ~ truncated(Normal(1, 1); lower=0)
    # NOTE: New prior for `γ`.
    γ ~ Beta(2, 5)

    return [β, γ]
end
#+end_src

#+RESULTS:
: prior_improved (generic function with 2 methods)

#+HTML: </div>

#+REVEAL: split

#+begin_src julia
@model function epidemic_model(
    problem_wrapper::AbstractEpidemicProblem,
    prior  # NOTE: now we just pass the prior as an argument
)
    # NOTE: And use `@submodel` to embed the `prior` in our model.
    @submodel p = prior(problem_wrapper)

    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem_wrapper.problem, p=p)  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)                  # Solve!

    # Extract the `infected`.
    sol_for_observed = infected(problem_wrapper, sol)[2:end]

    # NOTE: `arraydist` is faster for larger dimensional problems,
    # and it does not require explicit allocation of the vector.
    in_bed ~ arraydist(NegativeBinomial2.(sol_for_observed .+ 1e-5, ϕ))

    β, γ = p[1:2]
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
end
#+end_src

#+RESULTS:
: epidemic_model (generic function with 2 methods)

#+REVEAL: split

#+HTML: <div class="x-small-text">

Another neat trick is to return early if integration fail

#+HTML: </div>

#+begin_src julia
@model function epidemic_model(
    problem_wrapper::AbstractEpidemicProblem,
    prior  # now we just pass the prior as an argument
)
    # And use `@submodel` to embed the `prior` in our model.
    @submodel p = prior(problem_wrapper)

    ϕ⁻¹ ~ Exponential(1/5)
    ϕ = inv(ϕ⁻¹)

    problem_new = remake(problem_wrapper.problem, p=p)  # Replace parameters `p`.
    sol = solve(problem_new, saveat=1)                  # Solve!

    # NOTE: Return early if integration failed.
    if !issuccess(sol)
        Turing.@addlogprob! -Inf  # NOTE: Causes automatic rejection.
        return nothing
    end

    # Extract the `infected`.
    sol_for_observed = infected(problem_wrapper, sol)[2:end]

    # `arraydist` is faster for larger dimensional problems,
    # and it does not require explicit allocation of the vector.
    in_bed ~ arraydist(NegativeBinomial2.(sol_for_observed .+ 1e-5, ϕ))

    β, γ = p[1:2]
    return (R0 = β / γ, recovery_time = 1 / γ, infected = sol_for_observed)
end
#+end_src

#+RESULTS:
: epidemic_model (generic function with 2 methods)

#+REVEAL: split

Equipped with this we can now easily construct /two/ models using different priors

#+begin_src julia
sir = SIRProblem(N);
model_original = epidemic_model(sir, prior_original);
model_improved = epidemic_model(sir, prior_improved);
#+end_src

#+RESULTS:

but using the same underlying =epidemic_model=

#+begin_src julia
chain_prior_original = sample(model_original, Prior(), 10_000; progress=false);
chain_prior_improved = sample(model_improved, Prior(), 10_000; progress=false);
#+end_src

#+RESULTS:

Let's compare the resulting priors over some of the quantities of interest

#+REVEAL: split

Let's compare the =generated_quantities=, e.g. $R_0$

#+HTML: <div class="small-text">

#+begin_src julia
chain_quantities_original = to_chains(
    generated_quantities(
        model_original,
        MCMCChains.get_sections(chain_prior_original, :parameters)
    );
);

chain_quantities_improved = to_chains(
    generated_quantities(
        model_improved,
        MCMCChains.get_sections(chain_prior_improved, :parameters)
    );
);
#+end_src

#+RESULTS:

#+begin_src julia
p = plot(; legend=false, size=(500, 200))
plot_trajectories!(p, group(chain_quantities_original, :infected); n = 100, trajectory_color="red")
plot_trajectories!(p, group(chain_quantities_improved, :infected); n = 100, trajectory_color="blue")
hline!([N], color="red", linestyle=:dash)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/78734296c79bf5b1a9db5fc659113a826bc3e755.svg]]

#+HTML: </div>

#+REVEAL: split

#+HTML: <div class="small-text">

#+begin_src julia
plt1 = plot(legend=false)
plot_trajectory_quantiles!(plt1, group(chain_quantities_original, :infected))
hline!(plt1, [N], color="red", linestyle=:dash)

plt2 = plot(legend=false)
plot_trajectory_quantiles!(plt2, group(chain_quantities_improved, :infected))
hline!(plt2, [N], color="red", linestyle=:dash)

plot(plt1, plt2, layout=(2, 1))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/39e964b171498adc4e16e33a39f0624d62e4bbbc.svg]]

#+HTML: </div>

This makes sense: if half of the population is immediately infected ⟹ number of infected tapers wrt. time as they recover

#+REVEAL: split

For =model_improved= we then have

#+begin_src julia :display text/plain
DataFrame(quantile(chain_quantities_improved[:, [:R0, :recovery_time], :]))
#+end_src

#+RESULTS:
: 2×6 DataFrame
:  Row │ parameters     2.5%      25.0%    50.0%    75.0%    97.5%   
:      │ Symbol         Float64   Float64  Float64  Float64  Float64 
: ─────┼─────────────────────────────────────────────────────────────
:    1 │ R0             0.275864  2.28468  4.54819  8.4219   32.2905
:    2 │ recovery_time  1.55451   2.58601  3.81071  6.23257  22.6117

Compare to =model_original=

#+begin_src julia :display text/plain
DataFrame(quantile(chain_quantities_original[:, [:R0, :recovery_time], :]))
#+end_src

#+RESULTS:
: 2×6 DataFrame
:  Row │ parameters     2.5%      25.0%    50.0%    75.0%    97.5%   
:      │ Symbol         Float64   Float64  Float64  Float64  Float64 
: ─────┼─────────────────────────────────────────────────────────────
:    1 │ R0             0.474029  2.05722  3.6595   7.07962  58.7499
:    2 │ recovery_time  0.702591  1.19806  1.84327  3.38522  29.1268

** TASK Make =epidemic_model= work for =SEIRProblem=
1. [ ] Implement a prior which also includes $\sigma$ and execute
   =epidemic_model= with it
2. [ ] Can we make a better prior for $\sigma$? Do we even need one?

#+begin_src julia :eval no
@model function prior_original(problem_wrapper::SEIRProblem)
    # TODO: Implement
end
#+end_src

** SOLUTION
#+begin_src julia
@model function prior_original(problem_wrapper::SEIRProblem)
    β ~ truncated(Normal(2, 1); lower=0)
    γ ~ truncated(Normal(0.4, 0.5); lower=0)
    σ ~ truncated(Normal(0.8, 0.5); lower=0)

    return [β, γ, σ]
end
#+end_src

#+RESULTS:
: prior_original (generic function with 4 methods)

#+begin_src julia
model_seir = epidemic_model(SEIRProblem(N), prior_original)
print(model_seir())
#+end_src

#+RESULTS:
: (R0 = 0.6700501295944913, recovery_time = 1.0901942371566566, infected = [0.5213444916656381, 0.3810290084639285, 0.31054137255091063, 0.25978493734698727, 0.21857189599956686, 0.18411486190485007, 0.15512301438524617, 0.13069594477644395, 0.11011048983304582, 0.09276634476231031, 0.07814805610294369, 0.06583444725522701, 0.05546230986389766, 0.04671938554390765])

** WARNING Consult with domain experts
This guy should _not_ be the one setting your priors!

#+ATTR_HTML: :height 400px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/A_litle_Norwegian_boy/2023-01-18_14-49-24_471337_3317365246956_1262712540_o.jpg]]

Get an actual scientist to do that...

** Condition
Now let's actually involve the data

#+HTML: <div class="fragment (appear)">

We can condition a =Model= as so

#+begin_src julia
# Condition on the observations.
model = epidemic_model(SIRProblem(N), prior_improved)
model_conditioned = model | (in_bed = data.in_bed,)
#+end_src

#+RESULTS:
: Model(
:   args = (:problem_wrapper, :prior)
:   defaults = ()
:   context = ConditionContext((in_bed = [3, 8, 26, 76, 225, 298, 258, 233, 189, 128, 68, 29, 14, 4],), DynamicPPL.DefaultContext())
: )

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

You know what time it is: /inference time/!

#+HTML: </div>


** Metropolis-Hastings (MH)

#+begin_src julia
chain_mh = sample(model_conditioned, MH(), MCMCThreads(), 10_000, 4; discard_initial=5_000);
#+end_src

#+RESULTS:

Rhat is /okay-ish/ but not great, and ESS is pretty low innit?

#+REVEAL: split

#+begin_src julia
plot(chain_mh; size=(800, 500))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b18435200145ec903346c210fa7a7e82df2a3de6.svg]]

Eeehh doesn't look the greatest

#+REVEAL: split

Difficult to trust these results, but let's check if it at least did /something/ useful

#+begin_src julia
# We're using the unconditioned model!
predictions_mh = predict(model, chain_mh)
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (10000×14×4 Array{Float64, 3}):

Iterations        = 1:1:10000
Number of chains  = 4
Samples per chain = 10000
parameters        = in_bed[1], in_bed[2], in_bed[3], in_bed[4], in_bed[5], in_bed[6], in_bed[7], in_bed[8], in_bed[9], in_bed[10], in_bed[11], in_bed[12], in_bed[13], in_bed[14]
internals         = 

Summary Statistics
  parameters       mean       std   naive_se      mcse          ess      rhat 
      Symbol    Float64   Float64    Float64   Float64      Float64   Float64 

   in_bed[1]     3.2990    2.2187     0.0111    0.0154   32852.3435    1.0003
   in_bed[2]    10.7475    5.4398     0.0272    0.0703    5041.9920    1.0013
   in_bed[3]    33.4392   15.4385     0.0772    0.3076    1683.5019    1.0024
   in_bed[4]    91.2122   40.6445     0.2032    0.9281    1164.8701    1.0045
   in_bed[5]   183.8851   78.3475     0.3917    1.6154    1480.7767    1.0028
   in_bed[6]   245.7439   97.5276     0.4876    1.3333    3867.4724    1.0013
   in_bed[7]   234.9157   92.3874     0.4619    1.0007    8341.8076    1.0008
   in_bed[8]   183.6337   73.2085     0.3660    0.8712    5995.5836    1.0011
   in_bed[9]   130.5828   53.1825     0.2659    0.7635    3522.4780    1.0019
  in_bed[10]    88.8337   37.3017     0.1865    0.6316    2168.6193    1.0031
  in_bed[11]    58.4622   25.0851     0.1254    0.4625    1728.2776    1.0030
  in_bed[12]    37.9201   16.9006     0.0845    0.3315    1585.8829    1.0038
  in_bed[13]    24.6013   11.6250     0.0581    0.2498    1263.5764    1.0042
  in_bed[14]    15.7370    7.9250     0.0396    0.1736    1228.7318    1.0049

Quantiles
  parameters      2.5%      25.0%      50.0%      75.0%      97.5% 
      Symbol   Float64    Float64    Float64    Float64    Float64 

   in_bed[1]    0.0000     2.0000     3.0000     5.0000     8.0000
   in_bed[2]    2.0000     7.0000    10.0000    14.0000    23.0000
   in_bed[3]   10.0000    23.0000    31.0000    41.0000    70.0000
   in_bed[4]   30.0000    64.0000    86.0000   112.0000   186.0000
   in_bed[5]   63.0000   131.0000   174.0000   224.0000   368.0000
   in_bed[6]   88.0000   180.0000   235.0000   298.0000   474.0000
   in_bed[7]   83.9750   172.0000   226.0000   286.0000   443.0000
   in_bed[8]   65.0000   134.0000   176.0000   223.0000   352.0000
   in_bed[9]   46.0000    94.0000   125.0000   159.0000   252.0000
  in_bed[10]   30.0000    63.0000    84.0000   109.0000   176.0250
  in_bed[11]   19.0000    41.0000    55.0000    72.0000   117.0000
  in_bed[12]   12.0000    26.0000    36.0000    47.0000    77.0000
  in_bed[13]    7.0000    16.0000    23.0000    31.0000    52.0000
  in_bed[14]    4.0000    10.0000    15.0000    20.0000    34.0000
#+end_example

#+REVEAL: split

#+begin_src julia
plot_trajectories!(plot(legend=false, size=(600, 300)), predictions_mh; data=data)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c81e11df9ce74be911a9a1bf92b66b6a8388b1d3.svg]]

#+begin_src julia
plot_trajectory_quantiles!(plot(legend=false, size=(600, 300)), predictions_mh; data=data)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/694d03f8cf3fbbd6775b942047bac9132cd2bdbd.svg]]

Okay, it's not /completely/ useless, but my trust-issues are still present.

Metropolis-Hastings have disappointed me one too many times before.

** So instead, let's go =NUTS=
That's right, we're reaching to the *No U-Turn sampler (NUTS)*

*** 
:PROPERTIES:
:reveal_background_iframe: file:///home/tor/Projects/public/mcmc-demo/app.html?closeControls=true&algorithm=HamiltonianMH&target=standard&seed=1&autoplay=true&histBins=100
:END:

#+ATTR_REVEAL: :frag (appear)
[[https://chi-feng.github.io/mcmc-demo/app.html][https://chi-feng.github.io/mcmc-demo/app.html]]

** 

#+begin_quote
Wooaah there! =NUTS= requires gradient information!

How are you going to get that through that =solve=?
#+end_quote

Good question, voice in my head

#+REVEAL: :frag (appear)
I'm obviously not going to it myself

** Automatic differentiation (AD) in Julia
- [[https://github.com/JuliaDiff/ForwardDiff.jl][ForwardDiff.jl]]: forward-mode AD /(default in Turing.jl)/
- [[https://github.com/JuliaDiff/ReverseDiff.jl][ReverseDiff.jl]]: tape-based reverse-mode AD
- [[https://github.com/FluxML/Zygote.jl][Zygote.jl]]: source-to-source reverse-mode AD
- And more...

#+HTML: <div class="fragment (appear)">

Up-and-coming

- [[https://github.com/EnzymeAD/Enzyme.jl][Enzyme.jl]]: Julia bindings for [[https://github.com/EnzymeAD/Enzyme.jl][Enzyme]] which ADs LLVM (low-level)
- [[https://github.com/JuliaDiff/Diffractor.jl][Diffractor.jl]]: experimental mixed-mode AD meant to replace Zygote.jl

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

Of importance
- [[https://github.com/JuliaDiff/ChainRulesCore.jl][ChainRulesCore.jl]]: light-weight package for defining rules, compatible with many of the above

#+HTML: </div>

#+REVEAL: split

*Important*

#+begin_quote
When you write code, you don't have to make a choice which one you
want to use!
#+end_quote

All the (stable) ones, will (mostly) work

/But/ how you write code will affect performance characteristics

Takes a bit of know-how + a bit of digging to go properly "vroom!"

** Differentiating through =solve=
With that being said, differentiating through numerical =solve= is not necessarily trivial to do efficiently

There are numerous ways of approaching this problem

#+ATTR_HTML: :width 400px
#+ATTR_ORG: :width 400
[[file:.notes/attachments/Bayesian_inference/2023-01-22_12-30-07_Screenshot_20230122_122936.png]]

[[https://arxiv.org/abs/1812.01892][https://arxiv.org/abs/1812.01892]] is /great/ resource

#+HTML: <div class="fragment (appear)">

But this is why we have [[https://github.com/SciML/SciMLSensitivity.jl][=SciMLSensitivity.jl=]]

[[https://docs.sciml.ai/SciMLSensitivity/stable/manual/differential_equation_sensitivities/#Choosing-a-Sensitivity-Algorithm][SciMLSensitivity.jl docs]] also provides a great overview of different approaches

#+HTML: </div>

#+REVEAL: split

#+begin_src julia
using SciMLSensitivity
#+end_src

#+RESULTS:

It offers

1. /Discrete sensitivity analysis/ or the /"Direct" method/: just use
   =ForwardDiff.Dual= in the =solve=.
2. /Continuous local sensitivity analysis (CSA)/: extends the original
   system such that the =solve= gives you both the solution and the the
   gradient simultaenously.
3. /Adjoint methods/: construct a backwards system whose solution gives
   us the gradient.

Just do =solve(problem, solver, sensealg = ...)=

** Back to being =NUTS=
   :PROPERTIES:
   :CUSTOM_ID: back-to-being-nuts
   :END:

#+begin_src julia
chain = sample(model_conditioned, NUTS(0.8), MCMCThreads(), 1000, 4);
#+end_src

#+RESULTS:
#+begin_example
┌ Info: Found initial step size
└   ϵ = 0.05
┌ Info: Found initial step size
└   ϵ = 0.4
┌ Info: Found initial step size
└   ϵ = 0.05
┌ Info: Found initial step size
└   ϵ = 0.025
┌ Warning: The current proposal will be rejected due to numerical error(s).
│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
└ @ AdvancedHMC ~/.julia/packages/AdvancedHMC/4fByY/src/hamiltonian.jl:49
┌ Warning: The current proposal will be rejected due to numerical error(s).
│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
└ @ AdvancedHMC ~/.julia/packages/AdvancedHMC/4fByY/src/hamiltonian.jl:49
┌ Warning: The current proposal will be rejected due to numerical error(s).
│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
└ @ AdvancedHMC ~/.julia/packages/AdvancedHMC/4fByY/src/hamiltonian.jl:49
#+end_example

#+REVEAL: split

#+begin_src julia
chain
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (1000×15×4 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 4
Samples per chain = 1000
Wall duration     = 28.36 seconds
Compute duration  = 111.68 seconds
parameters        = β, γ, ϕ⁻¹
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
  parameters      mean       std   naive_se      mcse         ess      rhat    ⋯
      Symbol   Float64   Float64    Float64   Float64     Float64   Float64    ⋯

           β    1.7309    0.0564     0.0009    0.0012   2182.5882    1.0020    ⋯
           γ    0.5283    0.0435     0.0007    0.0009   2780.8101    1.0013    ⋯
         ϕ⁻¹    0.1402    0.0760     0.0012    0.0017   2360.8255    1.0014    ⋯
                                                                1 column omitted

Quantiles
  parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
      Symbol   Float64   Float64   Float64   Float64   Float64 

           β    1.6255    1.6944    1.7287    1.7653    1.8521
           γ    0.4423    0.5004    0.5279    0.5553    0.6149
         ϕ⁻¹    0.0448    0.0858    0.1232    0.1750    0.3330
#+end_example

Muuuch better! Both ESS and Rhat is looking good

#+REVEAL: split

#+begin_src julia
plot(chain; size=(800, 500))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c0f7e066dd415a7064a8f4c01c7ccc121f84e6fb.svg]]

#+REVEAL: split

#+begin_src julia
# Predict using the results from NUTS.
predictions = predict(model, chain)
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (1000×14×4 Array{Float64, 3}):

Iterations        = 1:1:1000
Number of chains  = 4
Samples per chain = 1000
parameters        = in_bed[1], in_bed[2], in_bed[3], in_bed[4], in_bed[5], in_bed[6], in_bed[7], in_bed[8], in_bed[9], in_bed[10], in_bed[11], in_bed[12], in_bed[13], in_bed[14]
internals         = 

Summary Statistics
  parameters       mean        std   naive_se      mcse         ess      rhat 
      Symbol    Float64    Float64    Float64   Float64     Float64   Float64 

   in_bed[1]     3.3418     2.2426     0.0355    0.0362   3830.2084    1.0001
   in_bed[2]    10.9663     5.5453     0.0877    0.0983   3907.2285    1.0000
   in_bed[3]    34.6763    15.9992     0.2530    0.2653   3416.4090    0.9995
   in_bed[4]    93.4123    43.0313     0.6804    0.7287   3019.1782    0.9994
   in_bed[5]   186.5725    78.7630     1.2454    1.2187   3450.5851    1.0001
   in_bed[6]   249.2475   100.0565     1.5820    1.3922   4153.9680    0.9996
   in_bed[7]   236.4625    90.7187     1.4344    1.3282   4008.6157    0.9997
   in_bed[8]   185.0895    72.7277     1.1499    1.2999   3312.6661    1.0004
   in_bed[9]   131.9975    53.6638     0.8485    0.8638   3096.3136    0.9998
  in_bed[10]    89.1760    37.1940     0.5881    0.5062   3619.9705    0.9996
  in_bed[11]    59.0603    25.8026     0.4080    0.3705   3883.1772    0.9995
  in_bed[12]    38.9195    17.5534     0.2775    0.2742   3711.4720    0.9993
  in_bed[13]    24.8420    11.7549     0.1859    0.2195   3638.4219    1.0005
  in_bed[14]    15.8900     8.0498     0.1273    0.1206   3803.7421    0.9994

Quantiles
  parameters      2.5%      25.0%      50.0%      75.0%      97.5% 
      Symbol   Float64    Float64    Float64    Float64    Float64 

   in_bed[1]    0.0000     2.0000     3.0000     5.0000     9.0000
   in_bed[2]    3.0000     7.0000    10.0000    14.0000    24.0000
   in_bed[3]   11.0000    24.0000    32.0000    43.0000    73.0250
   in_bed[4]   31.0000    65.0000    87.0000   113.0000   201.0500
   in_bed[5]   66.0000   133.0000   176.0000   225.2500   375.0250
   in_bed[6]   91.9750   181.0000   239.0000   300.0000   482.0500
   in_bed[7]   88.0000   176.0000   226.0000   284.0000   442.0000
   in_bed[8]   67.0000   136.0000   178.0000   223.0000   347.0250
   in_bed[9]   46.0000    97.0000   126.0000   159.0000   262.0000
  in_bed[10]   30.9750    64.0000    85.0000   108.0000   175.0250
  in_bed[11]   21.0000    41.0000    55.0000    72.0000   119.0250
  in_bed[12]   12.0000    27.0000    37.0000    48.0000    80.0000
  in_bed[13]    7.0000    17.0000    23.0000    31.0000    54.0000
  in_bed[14]    4.0000    10.0000    15.0000    20.0000    35.0000
#+end_example

#+REVEAL: split

#+begin_src julia
plot_trajectories!(plot(legend=false, size=(600, 300)), predictions; n = 1000, data=data)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/71a3b442b7fe25108002d775390020de6bccd13c.svg]]

#+REVEAL: split

#+begin_src julia
plot_trajectory_quantiles!(plot(legend=false, size=(600, 300)), predictions; data=data)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/507eb8c01aed01455ade0122146c9ec05d0b291a.svg]]

** Simulation-based calibration (SBC) [[https://arxiv.org/abs/1804.06788][Talts et. al. (2018)]]
1. Sample from prior $\theta_1, \dots, \theta_n \sim p(\theta)$.
2. Sample datasets $\mathcal{D}_i \sim p(\cdot \mid \theta_i)$ for $i = 1, \dots, n$.
3. Obtain (approximate) $p(\theta \mid \mathcal{D}_i)$ for $i = 1, \dots, n$.

For large enough (n), the "combination" of the posteriors should recover the prior!

"Combination" here usually means computing some statistic and comparing against what it should be

#+ATTR_HTML: :width 800px
#+ATTR_ORG: :width 400
[[file:.notes/attachments/Bayesian_inference/2023-01-22_12-09-24_Screenshot_20230122_120848.png]]

#+REVEAL: split

That's very expensive → in practice we just do this once or twice

#+begin_src julia
# Sample from the conditioned model so we don't get the `in_bed` variables too
using Random  # Just making usre the numbers of somewhat interesting
rng = MersenneTwister(43);
test_values = rand(rng, NamedTuple, model_conditioned)
#+end_src

#+RESULTS:
| β | = | 1.2254566808077714 | γ | = | 0.27594266205681933 | ϕ⁻¹ | = | 0.13984179162984164 |

Now we condition on those values and run once to generate data

#+begin_src julia
model_test = model | test_values
#+end_src

#+RESULTS:
: Model(
:   args = (:problem_wrapper, :prior)
:   defaults = ()
:   context = ConditionContext((β = 1.2254566808077714, γ = 0.27594266205681933, ϕ⁻¹ = 0.13984179162984164), DynamicPPL.DefaultContext())
: )

#+begin_src julia
in_best_test = rand(rng, model_test).in_bed;
#+end_src

#+RESULTS:

#+REVEAL: split

Next, inference!

#+begin_src julia
model_test_conditioned = model | (in_bed = in_best_test,)
#+end_src

#+RESULTS:
: Model(
:   args = (:problem_wrapper, :prior)
:   defaults = ()
:   context = ConditionContext((in_bed = [1, 9, 11, 45, 159, 136, 270, 123, 463, 376, 231, 148, 99, 162],), DynamicPPL.DefaultContext())
: )

#+begin_src julia
# Let's just do a single chain here.
chain_test = sample(model_test_conditioned, NUTS(0.8), 1000);
#+end_src

#+RESULTS:
: ┌ Info: Found initial step size
: └   ϵ = 0.05
: Sampling:   3%|█▏                                       |  ETA: 0:00:03Sampling:   6%|██▌                                      |  ETA: 0:00:03Sampling:  12%|████▊                                    |  ETA: 0:00:02Sampling:  19%|███████▉                                 |  ETA: 0:00:02Sampling:  28%|███████████▌                             |  ETA: 0:00:01Sampling:  36%|██████████████▉                          |  ETA: 0:00:01Sampling:  45%|██████████████████▍                      |  ETA: 0:00:01Sampling:  54%|██████████████████████                   |  ETA: 0:00:01Sampling:  63%|█████████████████████████▉               |  ETA: 0:00:01Sampling:  72%|█████████████████████████████▌           |  ETA: 0:00:00Sampling:  81%|█████████████████████████████████▎       |  ETA: 0:00:00Sampling:  90%|█████████████████████████████████████▏   |  ETA: 0:00:00Sampling:  99%|████████████████████████████████████████▊|  ETA: 0:00:00Sampling: 100%|█████████████████████████████████████████| Time: 0:00:01

#+REVEAL: split

Did we recover the parameters?

#+HTML: <div class="small-text">

#+begin_src julia
ps = []
for sym in [:β, :γ, :ϕ⁻¹]
    p = density(chain_test[:, [sym], :])
    vline!([test_values[sym]])
    push!(ps, p)
end
plot(ps..., layout=(3, 1), size=(600, 400))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0712c6aeaa21246ea95d70171b4e5164c4fe2288.svg]]

#+HTML: </div>

Yay!

** Samplers in Turing.jl
- Metropolis-Hastings, emcee, SGLD ([[https://github.com/TuringLang/AdvancedMH.jl][AdvancedMH.jl]])
- Hamiltonian Monte Carlo, NUTS ([[https://github.com/TuringLang/AdvancedMH.jl][AdvancedHMC.jl]])
- SMC ([[https://github.com/TuringLang/AdvancedPS.jl][AdvancedPS.jl]])
- Elliptical Slice Sampling ([[https://github.com/TuringLang/EllipticalSliceSampling.jl][EllipticalSliceSampling.jl]])
- Nested sampling ([[https://github.com/TuringLang/NestedSamplers.jl][NestedSamplers.jl]])

#+REVEAL: split

You can also combine some of these in Turing.jl

#+HTML: <div class="small-text">

#+begin_src julia
using LinearAlgebra: I

@model function linear_regression(X)
    num_params = size(X, 1)
    β ~ MvNormal(ones(num_params))
    σ² ~ InverseGamma(2, 3)
    y ~ MvNormal(vec(β' * X), σ² * I)
end

# Generate some dummy data.
X = randn(2, 1_000); lin_reg = linear_regression(X); true_vals = rand(lin_reg)

# Condition.
lin_reg_conditioned = lin_reg | (y = true_vals.y,);
#+end_src

#+RESULTS:

#+HTML: </div>

We can then do =Gibbs= but sampling $β$ using =ESS= and $\sigma^2$ using =HMC=

#+begin_src julia
chain_ess_hmc = sample(lin_reg_conditioned, Gibbs(ESS(:β), HMC(1e-3, 16, :σ²)), 1_000)
#+end_src

#+RESULTS:
:RESULTS:
: Sampling:  62%|█████████████████████████▎               |  ETA: 0:00:00Sampling: 100%|█████████████████████████████████████████| Time: 0:00:00
#+begin_example
Chains MCMC chain (1000×4×1 Array{Float64, 3}):

Iterations        = 1:1:1000
Number of chains  = 1
Samples per chain = 1000
Wall duration     = 8.28 seconds
Compute duration  = 8.28 seconds
parameters        = β[1], β[2], σ²
internals         = lp

Summary Statistics
  parameters      mean       std   naive_se      mcse        ess      rhat   e ⋯
      Symbol   Float64   Float64    Float64   Float64    Float64   Float64     ⋯

        β[1]   -0.7419    0.0715     0.0023    0.0031   639.5590    1.0019     ⋯
        β[2]   -0.8169    0.1099     0.0035    0.0079   214.9170    1.0006     ⋯
          σ²    2.4829    0.1352     0.0043    0.0172    44.9962    1.0031     ⋯
                                                                1 column omitted

Quantiles
  parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
      Symbol   Float64   Float64   Float64   Float64   Float64 

        β[1]   -0.8420   -0.7733   -0.7409   -0.7109   -0.6400
        β[2]   -0.9161   -0.8559   -0.8252   -0.7914   -0.7150
          σ²    2.2621    2.3988    2.4778    2.5482    2.7134
#+end_example
:END:

Could potentially lead to improvements

*NOTE:* Usually /very/ difficult to choose sampler parameters in this case

#+REVEAL: split

Means one can also mix discrete and continuous

#+HTML: <div class="small-text">

#+begin_src julia 
@model function mixture(n)
    cluster ~ filldist(Categorical([0.25, 0.75]), n)
    μ ~ MvNormal([-10.0, 10.0], I)
    x ~ arraydist(Normal.(μ[cluster], 1))
end

model_mixture = mixture(10)
fake_values_mixture = rand(model_mixture)
model_mixture_conditioned = model_mixture | (x = fake_values_mixture.x, )
chain_discrete = sample(
    model_mixture_conditioned, Gibbs(PG(10, :cluster), HMC(1e-3, 16, :μ)), MCMCThreads(), 1_000, 4
)
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (1000×13×4 Array{Float64, 3}):

Iterations        = 1:1:1000
Number of chains  = 4
Samples per chain = 1000
Wall duration     = 23.74 seconds
Compute duration  = 93.67 seconds
parameters        = cluster[1], cluster[2], cluster[3], cluster[4], cluster[5], cluster[6], cluster[7], cluster[8], cluster[9], cluster[10], μ[1], μ[2]
internals         = lp

Summary Statistics
   parameters       mean       std   naive_se      mcse         ess      rhat  ⋯
       Symbol    Float64   Float64    Float64   Float64     Float64   Float64  ⋯

   cluster[1]     2.0000    0.0000     0.0000    0.0000         NaN       NaN  ⋯
   cluster[2]     1.2575    0.4373     0.0069    0.0529     10.0242    2.1231  ⋯
   cluster[3]     2.0000    0.0000     0.0000    0.0000         NaN       NaN  ⋯
   cluster[4]     1.0010    0.0316     0.0005    0.0006   2673.9440    1.0001  ⋯
   cluster[5]     1.0163    0.1265     0.0020    0.0093     67.6485    1.0458  ⋯
   cluster[6]     1.9990    0.0316     0.0005    0.0008   1268.6067    1.0013  ⋯
   cluster[7]     1.9990    0.0316     0.0005    0.0007   1003.0392    1.0030  ⋯
   cluster[8]     1.9995    0.0224     0.0004    0.0005   1602.5641    1.0010  ⋯
   cluster[9]     1.0017    0.0418     0.0007    0.0013    727.4519    1.0028  ⋯
  cluster[10]     1.0413    0.1989     0.0031    0.0212     39.5203    1.0645  ⋯
         μ[1]   -10.2066    0.8357     0.0132    0.1051      8.1822    6.1168  ⋯
         μ[2]     9.9259    1.2519     0.0198    0.1577      8.2192    5.2214  ⋯
                                                                1 column omitted

Quantiles
   parameters       2.5%      25.0%      50.0%     75.0%     97.5% 
       Symbol    Float64    Float64    Float64   Float64   Float64 

   cluster[1]     2.0000     2.0000     2.0000    2.0000    2.0000
   cluster[2]     1.0000     1.0000     1.0000    2.0000    2.0000
   cluster[3]     2.0000     2.0000     2.0000    2.0000    2.0000
   cluster[4]     1.0000     1.0000     1.0000    1.0000    1.0000
   cluster[5]     1.0000     1.0000     1.0000    1.0000    1.0000
   cluster[6]     2.0000     2.0000     2.0000    2.0000    2.0000
   cluster[7]     2.0000     2.0000     2.0000    2.0000    2.0000
   cluster[8]     2.0000     2.0000     2.0000    2.0000    2.0000
   cluster[9]     1.0000     1.0000     1.0000    1.0000    1.0000
  cluster[10]     1.0000     1.0000     1.0000    1.0000    2.0000
         μ[1]   -11.4340   -10.8574   -10.3972   -9.5975   -8.7305
         μ[2]     8.7176     9.0552     9.3299   10.4724   12.5237
#+end_example

#+HTML: </div>

#+REVEAL: split

#+HTML: <div class="x-small-text">

#+begin_src julia 
ps = []
for (i, realizations) in enumerate(eachcol(Array(group(chain_discrete, :cluster))))
    p = density(realizations, legend=false, ticks=false); vline!(p, [fake_values_mixture.cluster[i]])
    push!(ps, p)
end
plot(ps..., layout=(length(ps) ÷ 2, 2), size=(600, 40 * length(ps)))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0326c9f547e0070fd4019ee24b3f721e52c624fd.svg]]

#+HTML: </div>

Again, this is difficult to get to work properly on non-trivial examples

_But_ it is possible

** Other utilities for Turing.jl
- [[https://github.com/TuringLang/TuringGLM.jl][TuringGLM.jl]]: GLMs using the formula-syntax from R but using Turing.jl under the hood
- [[https://github.com/TuringLang/TuringBenchmarking.jl][TuringBenchmarking.jl]]: useful for benchmarking Turing.jl models
- [[https://github.com/TuringLang/TuringCallbacks.jl][TuringCallbacks.jl]]: on-the-fly visualizations using =tensorboard=


#+DOWNLOADED: file:///home/tor/Downloads/tensorboard_demo_histograms_screen.png @ 2023-01-25 20:50:11
#+ATTR_HTML: :width 600px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/Bayesian_inference/2023-01-25_20-50-11_tensorboard_demo_histograms_screen.png]]


** Downsides of using Turing.jl

#+ATTR_REVEAL: :frag (appear)
- Don't do any depedency-extraction of the model ⟹ can't do things like automatic marginalization
  - /But/ it's not impossible; just a matter of development effort
  - Ongoing work in =TuringLang= to make a [[https://www.mrc-bsu.cam.ac.uk/software/bugs/][BUGS]] compatible model "compiler" / parser (in colab with Andrew Thomas & others)
- NUTS performance is at the mercy of AD in Julia
- You _can_ put anything in your model, but whether you _should_ is a another matter

* Benchmarking
#+begin_src julia
using SciMLSensitivity
using BenchmarkTools
using TuringBenchmarking
#+end_src

#+RESULTS:

#+begin_src julia
using ReverseDiff, Zygote
#+end_src

#+RESULTS:

#+begin_src julia
suite = TuringBenchmarking.make_turing_suite(
    model_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
        TuringBenchmarking.ReverseDiffAD{false}(),
        TuringBenchmarking.ZygoteAD()
    ]
);
run(suite)
#+end_src

#+RESULTS:
#+begin_example
2-element BenchmarkTools.BenchmarkGroup:
  tags: []
  "linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(356.923 μs)
	  "evaluation" => Trial(24.673 μs)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(113.188 μs)
	  "Turing.Essential.ZygoteAD()" => Trial(2.003 ms)
  "not_linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(393.649 μs)
	  "evaluation" => Trial(25.355 μs)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(135.424 μs)
	  "Turing.Essential.ZygoteAD()" => Trial(2.042 ms)
#+end_example

** More data

#+begin_src julia 
# NOTE: We now use 10 000 days instead of just 14.
model_fake = epidemic_model(SIRProblem(N; tspan=(0, 10_000)), prior_improved);
#+end_src

#+RESULTS:

#+begin_src julia 
res = rand(model_fake)
model_fake_conditioned = model_fake | (in_bed = res.in_bed,);
#+end_src

#+RESULTS:

#+begin_src julia 
model_fake_conditioned().infected
#+end_src

#+RESULTS:
#+begin_example
10000-element Vector{Float64}:
   2.689857328681779
   7.192885249170802
  18.93778911198292
  47.9207523624666
 110.48565402384146
 212.25730828303838
 313.99502232842093
 360.80690953040556
 349.2563152565911
 307.5321751212898
 257.7537210831753
 210.53136214611402
 169.50260736383447
   ⋮
  -6.625317900285437e-16
  -6.188489641030978e-16
  -5.7514852846908935e-16
  -5.314304831265556e-16
  -4.876948280754131e-16
  -4.4394156331569873e-16
  -4.001706888474591e-16
  -3.5638220467061994e-16
  -3.1257611078519976e-16
  -2.6875240719122637e-16
  -2.2491109388870915e-16
  -1.8105217087760165e-16
#+end_example

#+begin_src julia 
suite = TuringBenchmarking.make_turing_suite(
    model_fake_conditioned;
    adbackends=[
        TuringBenchmarking.ForwardDiffAD{40,true}(),
        TuringBenchmarking.ReverseDiffAD{false}(),
        TuringBenchmarking.ZygoteAD()
    ]
);
run(suite)
#+end_src

#+RESULTS:
#+begin_example
2-element BenchmarkTools.BenchmarkGroup:
  tags: []
  "linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(31.573 ms)
	  "evaluation" => Trial(1.691 ms)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(3.170 ms)
	  "Turing.Essential.ZygoteAD()" => Trial(23.770 ms)
  "not_linked" => 4-element BenchmarkTools.BenchmarkGroup:
	  tags: []
	  "Turing.Essential.ReverseDiffAD{false}()" => Trial(31.622 ms)
	  "evaluation" => Trial(1.694 ms)
	  "Turing.Essential.ForwardDiffAD{40, true}()" => Trial(3.098 ms)
	  "Turing.Essential.ZygoteAD()" => Trial(23.542 ms)
#+end_example

* Case: spatio-temporal COVID modeling in UK                       :noexport:
Main model looked like this

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_022312.png @ 2023-01-25 02:23:23
#+ATTR_HTML: :width 600px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/Use-case:_COVID_modeling/2023-01-25_02-23-23_Screenshot_20230125_022312.png]]

Roughly 50 000 parameters

#+REVEAL: split

Output, for different approaches, looked like this

#+begin_export html
<video controls width="1000">
    <source src="file:///home/tor/Dropbox/tmp/epimap-vs-epimap-debiased-vs-debiased-different-coloring.mp4" type="video/mp4">
    Sorry, your browser doesn't support embedded videos.
</video>
#+end_export

#+REVEAL: split

#+begin_src julia :eval no :tangle no
    # GP-model for R-value.
    @submodel R = SpatioTemporalGP(K_spatial, K_local, K_time, T; σ_spatial, σ_local, ρ_spatial, ρ_time)

    # Latent infections.
    @submodel X = RegionalFlux(F_id, F_in, F_out, W, R, X_cond, T; days_per_step, σ_ξ)

    # Likelihood.
    @submodel C = NegBinomialWeeklyAdjustedTesting(C, X, D, num_cond, T)
#+end_src

with

#+HTML: <div class="small-text">

#+begin_src julia :eval no :tangle no
@model function SpatioTemporalGP(
    K_spatial, K_local, K_time,
    ::Type{T} = Float64;
) where {T}
    num_steps = size(K_time, 1)
    num_regions = size(K_spatial, 1)

    # Length scales
    ρ_spatial ~ 𝒩₊(T(0), T(5))
    ρ_time ~ 𝒩₊(T(0), T(5))

    # Scales
    σ_spatial ~ 𝒩₊(T(0), T(0.5))
    σ_local ~ 𝒩₊(T(0), T(0.5))

    # GP
    E_vec ~ MvNormal(num_regions * num_steps, one(T))
    E = reshape(E_vec, (num_regions, num_steps))

    # Get cholesky decomps using precomputed kernel matrices
    L_space = spatial_L(K_spatial, K_local, σ_spatial, σ_local, ρ_spatial)
    U_time = time_U(K_time, ρ_time)

    # Obtain realization of log-R.
    f = L_space * E * U_time

    # Compute R.
    R = exp.(f)
    return R
end
#+end_src

#+HTML: </div>

* Julia: The Good, the Bad, and the Ugly

An honest take from a little 27-year old Norwegian boy

*** The Good
- Speed
- Composability (thank you multiple dispatch)
- No need to tie yourself to an underlying computational framework
- Interactive
- Transparency
- Very easy to call into other languages

*** Speed

I think you got this already...

*** Composability

We've seen some of that

Defining =infected(problem_wrapper, u)= allowed us to abstract away how to extract the compartment of interest

*** Transparency

For starters, almost all the code you'll end up using is pure Julia

Hence, you can always look at the code

You can find the implementation by using =@which=

#+begin_src julia 
# Without arguments
@which sum
#+end_src

#+RESULTS:
: Base

#+begin_src julia :display text/plain
# With arguments
@which sum([1.0])
#+end_src

#+RESULTS:
: sum(a::AbstractArray; dims, kw...) in Base at reducedim.jl:994

#+REVEAL: split

And yeah, you can even look into the macros

#+HTML: <div class="small-text">

#+begin_src julia 
@macroexpand @model f() = x ~ Normal()
#+end_src

#+RESULTS:
#+begin_example
quote
    function f(__model__::DynamicPPL.Model, __varinfo__::DynamicPPL.AbstractVarInfo, __context__::AbstractPPL.AbstractContext; )
        #= In[105]:1 =#
        begin
            var"##dist#1212" = Normal()
            var"##vn#1209" = (DynamicPPL.resolve_varnames)((AbstractPPL.VarName){:x}(), var"##dist#1212")
            var"##isassumption#1210" = begin
                    if (DynamicPPL.contextual_isassumption)(__context__, var"##vn#1209")
                        if !((DynamicPPL.inargnames)(var"##vn#1209", __model__)) || (DynamicPPL.inmissings)(var"##vn#1209", __model__)
                            true
                        else
                            x === missing
                        end
                    else
                        false
                    end
                end
            begin
                #= /home/tor/.julia/packages/DynamicPPL/WBmMU/src/compiler.jl:539 =#
                var"##retval#1214" = if var"##isassumption#1210"
                        begin
                            (var"##value#1213", __varinfo__) = (DynamicPPL.tilde_assume!!)(__context__, (DynamicPPL.unwrap_right_vn)((DynamicPPL.check_tilde_rhs)(var"##dist#1212"), var"##vn#1209")..., __varinfo__)
                            x = var"##value#1213"
                            var"##value#1213"
                        end
                    else
                        if !((DynamicPPL.inargnames)(var"##vn#1209", __model__))
                            x = (DynamicPPL.getvalue_nested)(__context__, var"##vn#1209")
                        end
                        (var"##value#1211", __varinfo__) = (DynamicPPL.tilde_observe!!)(__context__, (DynamicPPL.check_tilde_rhs)(var"##dist#1212"), x, var"##vn#1209", __varinfo__)
                        var"##value#1211"
                    end
                #= /home/tor/.julia/packages/DynamicPPL/WBmMU/src/compiler.jl:540 =#
                return (var"##retval#1214", __varinfo__)
            end
        end
    end
    begin
        $(Expr(:meta, :doc))
        function f(; )
            #= In[105]:1 =#
            return (DynamicPPL.Model)(f, NamedTuple(), NamedTuple())
        end
    end
end
#+end_example

#+HTML: </div>

#+REVEAL: split

I told you didn't want to see that.

Can make it /a bit/ cleaner by removing linenums:

#+HTML: <div class="x-small-text">

#+begin_src julia 
@macroexpand(@model f() = x ~ Normal()) |> Base.remove_linenums!
#+end_src

#+RESULTS:
#+begin_example
quote
    function f(__model__::DynamicPPL.Model, __varinfo__::DynamicPPL.AbstractVarInfo, __context__::AbstractPPL.AbstractContext; )
        begin
            var"##dist#1218" = Normal()
            var"##vn#1215" = (DynamicPPL.resolve_varnames)((AbstractPPL.VarName){:x}(), var"##dist#1218")
            var"##isassumption#1216" = begin
                    if (DynamicPPL.contextual_isassumption)(__context__, var"##vn#1215")
                        if !((DynamicPPL.inargnames)(var"##vn#1215", __model__)) || (DynamicPPL.inmissings)(var"##vn#1215", __model__)
                            true
                        else
                            x === missing
                        end
                    else
                        false
                    end
                end
            begin
                var"##retval#1220" = if var"##isassumption#1216"
                        begin
                            (var"##value#1219", __varinfo__) = (DynamicPPL.tilde_assume!!)(__context__, (DynamicPPL.unwrap_right_vn)((DynamicPPL.check_tilde_rhs)(var"##dist#1218"), var"##vn#1215")..., __varinfo__)
                            x = var"##value#1219"
                            var"##value#1219"
                        end
                    else
                        if !((DynamicPPL.inargnames)(var"##vn#1215", __model__))
                            x = (DynamicPPL.getvalue_nested)(__context__, var"##vn#1215")
                        end
                        (var"##value#1217", __varinfo__) = (DynamicPPL.tilde_observe!!)(__context__, (DynamicPPL.check_tilde_rhs)(var"##dist#1218"), x, var"##vn#1215", __varinfo__)
                        var"##value#1217"
                    end
                return (var"##retval#1220", __varinfo__)
            end
        end
    end
    begin
        $(Expr(:meta, :doc))
        function f(; )
            return (DynamicPPL.Model)(f, NamedTuple(), NamedTuple())
        end
    end
end
#+end_example

#+HTML: </div>

#+REVEAL: split

#+begin_src julia
f(x) = 2x
#+end_src

#+RESULTS:
: f (generic function with 1 method)

You can inspect the type-inferred and lowered code

#+begin_src julia
@code_typed f(1)
#+end_src

#+RESULTS:
: CodeInfo(
: 1 ─ %1 = Base.mul_int(2, x)::Int64
: └──      return %1
: ) => Int64

#+REVEAL: split

You can inspect the LLVM code

#+begin_src julia
@code_llvm f(1)
#+end_src

#+RESULTS:
: ;  @ In[107]:1 within `f`
: define i64 @julia_f_46850(i64 signext %0) #0 {
: top:
: ; ┌ @ int.jl:88 within `*`
:    %1 = shl i64 %0, 1
: ; └
:   ret i64 %1
: }

#+REVEAL: split

And even the resulting machine code

#+begin_src julia
@code_native f(1)
#+end_src

#+RESULTS:
#+begin_example
	.text
	.file	"f"
	.globl	julia_f_46887                   # -- Begin function julia_f_46887
	.p2align	4, 0x90
	.type	julia_f_46887,@function
julia_f_46887:                          # @julia_f_46887
; ┌ @ In[107]:1 within `f`
	.cfi_startproc
# %bb.0:                                # %top
; │┌ @ int.jl:88 within `*`
	leaq	(%rdi,%rdi), %rax
; │└
	retq
.Lfunc_end0:
	.size	julia_f_46887, .Lfunc_end0-julia_f_46887
	.cfi_endproc
; └
                                        # -- End function
	.section	".note.GNU-stack","",@progbits
#+end_example

It really just depends on which level of "I hate my life" you're currently at

*** Calling into other languages
- [[https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/][C and Fortran comes built-in stdlib]]
- [[https://juliainterop.github.io/RCall.jl/stable/][RCall.jl]]: call into =R=
- [[https://github.com/JuliaPy/PyCall.jl][PyCall.jl]]: call into =python=
- Etc.

When working with =Array=, etc. memory is usually shared ⟹ fairly low overhead

*** C and Fortran
#+begin_src julia 
# Define the Julia function
function mycompare(a, b)::Cint
    println("mycompare($a, $b)")  # NOTE: Let's look at the comparisons made.
    return (a < b) ? -1 : ((a > b) ? +1 : 0)
end

# Get the corresponding C function pointer.
mycompare_c = @cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}))

# Array to sort.
A = [1.3, -2.7, 4.4, 3.1];

# Call in-place quicksort.
ccall(:qsort, Cvoid, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Cvoid}),
      A, length(A), sizeof(eltype(A)), mycompare_c)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: invalid redefinition of constant A
: 
: Stacktrace:
:  [1] top-level scope
:    @ In[111]:11
:END:

#+begin_src julia 
# All sorted!
A
#+end_src

#+RESULTS:
: A (generic function with 2 methods)

[[https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/#Creating-C-Compatible-Julia-Function-Pointers][Example is from Julia docs]]

*** RCall.jl                                                       :noexport:

*** PyCall.jl                                                      :noexport:

*** The Bad
Sometimes
- your code might just slow down without a seemingly good reason,
- someone did bad, and Julia can't tell which method to call, or
- someone forces the Julia compiler to compile insane amounts of code

*** "Why is my code suddenly slow?"

One word: *type-instability*

Sometimes the Julia compiler can't quite infer what types fully

#+HTML: <div class="fragment (appear)">

*Result:* python-like performance (for those particular function calls)

#+begin_src julia 
# NOTE: this is NOT `const`, and so it could become some other type
# at any given point without `my_func` knowing about it!
global_variable = 1
my_func_unstable(x) = global_variable * x
#+end_src

#+RESULTS:
: my_func_unstable (generic function with 1 method)

#+begin_src julia 
@btime my_func_unstable(2.0);
#+end_src

#+RESULTS:
:   25.260 ns (2 allocations: 32 bytes)

#+HTML: </div>

#+REVEAL: split

Luckily there are tools for inspecting this

#+begin_src julia 
@code_warntype my_func_unstable(2.0)
#+end_src

#+RESULTS:
: MethodInstance for my_func_unstable(::Float64)
:   from my_func_unstable(x) in Main at In[113]:4
: Arguments
:   #self#::Core.Const(my_func_unstable)
:   x::Float64
: Body::Any
: 1 ─ %1 = (Main.global_variable * x)::Any
: └──      return %1
: 

See that =Any= there? _'tis a big no-no!_

#+REVEAL: split

Once discovered, it can be fixed

#+begin_src julia 
const constant_global_variable = 1
my_func_fixed(x) = constant_global_variable * x
@code_warntype my_func_fixed(2.0)
#+end_src

#+RESULTS:
: MethodInstance for my_func_fixed(::Float64)
:   from my_func_fixed(x) in Main at In[116]:2
: Arguments
:   #self#::Core.Const(my_func_fixed)
:   x::Float64
: Body::Float64
: 1 ─ %1 = (Main.constant_global_variable * x)::Float64
: └──      return %1
: 

So long Python performance!

#+begin_src julia 
@btime my_func_fixed(2.0);
#+end_src

#+RESULTS:
:   1.493 ns (0 allocations: 0 bytes)


#+REVEAL: split

/But/ this is not always so easy to discover (though this is generally rare)

#+begin_src julia 
# HACK: Here we explicitly tell Julia what type `my_func_unstable`
# returns. This is _very_ rarely a good idea because it just hides
# the underlying problem from `@code_warntype`!
my_func_forced(x) = my_func_unstable(x)::typeof(x)
@code_warntype my_func_forced(2.0)
#+end_src

#+RESULTS:
#+begin_example
MethodInstance for my_func_forced(::Float64)
  from my_func_forced(x) in Main at In[118]:4
Arguments
  #self#::Core.Const(my_func_forced)
  x::Float64
Body::Float64
1 ─ %1 = Main.my_func_unstable(x)::Any
│   %2 = Main.typeof(x)::Core.Const(Float64)
│   %3 = Core.typeassert(%1, %2)::Float64
└──      return %3
#+end_example

We can still see the =Any= in there, but on a first glance it looks like =my_func_forced= is type-stable

There are more natural cases where this might occur, e.g. unfortunate closures deep in your callstack

#+REVEAL: split

To discovery these there are a couple of more advanced tools:
- [[https://github.com/JuliaDebug/Cthulhu.jl][Cthulhu.jl]]: Allows you to step through your code like a debugger and perform =@code_warntype=
- [[https://github.com/aviatesk/JET.jl][JET.jl]]: Experimental package which attempts to automate the process

And even simpler: profile using [[https://github.com/timholy/ProfileView.jl][ProfileView.jl]] and look for code-paths that /should/ be fast but take up a lot of the runtime

#+REVEAL: split

#+begin_src julia 
using ProfileView
#+end_src

#+RESULTS:

#+begin_src julia :eval no
@profview foreach(_ -> my_func_unstable(2.0), 1_000_000)
#+end_src

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_011603.png @ 2023-01-25 01:16:13
#+ATTR_HTML: :height 350px
#+ATTR_ORG: :width 600
[[file:.notes/attachments/Julia:_The_Good,_the_Bad,_and_the_Ugly/2023-01-25_01-16-13_Screenshot_20230125_011603.png]]

Note that there's no sign of multiplication here

But most of the runtime is the =./reflection.jl= at the top there

That's Julia looking up the type at runtime

*** Method ambiguity
#+begin_src julia 
ambiguous_function(x, y::Int) = y
ambiguous_function(x::Int, y) = x

# NOTE: Here we have `ambiguous_function(x::Int, y::Int)`
# Which one should we hit?!
ambiguous_function(1, 2)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: MethodError: ambiguous_function(::Int64, ::Int64) is ambiguous. Candidates:
:   ambiguous_function(x, y::Int64) in Main at In[120]:1
:   ambiguous_function(x::Int64, y) in Main at In[120]:2
: Possible fix, define
:   ambiguous_function(::Int64, ::Int64)
: 
: Stacktrace:
:  [1] top-level scope
:    @ In[120]:6
:END:

But here Julia warns us, and so we can fix this by just doing as it says: define =ambiguous_function(::Int64, ::Int64)=

#+begin_src julia 
ambiguous_function(::Int64, ::Int64) = "neato"
ambiguous_function(1, 2)
#+end_src

#+RESULTS:
: "neato"

*** Long compilation times
In Julia, for better or worse, we can generate code

*Problem:* it can be /lots/ of code of we really want to

*Result:* first execution can be /slow/

#+HTML: <div class="fragment (appear)">

*Time to first plot (TTFP)* is Julia's worst enemy

But things are always improving

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_012853.png @ 2023-01-25 01:29:05
[[file:.notes/attachments/Julia:_The_Good,_the_Bad,_and_the_Ugly/2023-01-25_01-29-05_Screenshot_20230125_012853.png]]

#+HTML: </div>

*** Another example: mis-use of =@generated=

#+begin_src julia 
# NOTE: `@generated` only has access to static information, e.g. types of arguments.
# Here I'm using the special type `Val` to make a number `N` static.
@generated function unrolled_addition(::Val{N}) where {N}
    expr = Expr(:block)
    push!(expr.args, :(x = 0))
    for i = 1:N
        push!(expr.args, :(x += $(3.14 * i)))
    end

    return expr
end
#+end_src

#+RESULTS:
: unrolled_addition (generic function with 1 method)

When I call this with some =Val(N)=, Julia will execute this /at compile-time/!

#+begin_src julia 
# NOTE: At runtime, it then just returns the result immediately
@code_typed unrolled_addition(Val(10))
#+end_src

#+RESULTS:
: CodeInfo(
: 1 ─     return 172.70000000000002
: ) => Float64

But if I just change the value =10= to =11=, it's a /completely/ different type!

#+REVEAL: split

So Julia has to compile =unrolled_addition= from scratch

#+begin_src julia 
@time @eval unrolled_addition(Val(11));
#+end_src

#+RESULTS:
:   0.007295 seconds (11.61 k allocations: 654.885 KiB, 21.24% compilation time)

Or a bit crazier

#+begin_src julia 
@time @eval unrolled_addition(Val(10_001));
#+end_src

#+RESULTS:
:   0.259412 seconds (1.19 M allocations: 48.946 MiB, 99.93% compilation time)

Here it took ~0.4s, of which 99.95% was compilation time

I think you get the idea

#+REVEAL: split

But boy is it fast to run!

#+begin_src julia 
@btime unrolled_addition(Val(10_001));
#+end_src

#+RESULTS:
:   1.538 ns (0 allocations: 0 bytes)

#+begin_src julia 
function not_unrolled_addition(N)
    x = 0
    for i = 1:N
        x += 3.14 * i
    end

    return x
end
#+end_src

#+RESULTS:
: not_unrolled_addition (generic function with 1 method)

#+begin_src julia 
@btime not_unrolled_addition(10_001);
#+end_src

#+RESULTS:
:   10.280 μs (0 allocations: 0 bytes)

#+REVEAL: split

*Funny side-note:* at first I did the following

#+begin_src julia 
@generated function unrolled_addition_old(::Val{N}) where {N}
    expr = Expr(:block)
    push!(expr.args, :(x = 0))
    for i = 1:N
        push!(expr.args, :(x += $i))  # NOTE: No 3.14!
    end
    return expr
end
function not_unrolled_addition_old(N)
    x = 0
    for i = 1:N
        x += i  # NOTE: No 3.14!
    end
    return x
end
#+end_src

#+RESULTS:
: not_unrolled_addition_old (generic function with 1 method)

#+begin_src julia 
@btime unrolled_addition_old(Val(10_001));
@btime not_unrolled_addition_old(10_001);
#+end_src

#+RESULTS:
:   1.507 ns (0 allocations: 0 bytes)
:   2.521 ns (0 allocations: 0 bytes)

LLVM probably recognized the pattern of =not_unrolled_addition_old= and unrolls it for us

Let's check!

#+REVEAL: split

#+begin_src julia 
# NOTE: The one LLVM failed to unroll
@code_llvm not_unrolled_addition(10_001)
#+end_src

#+RESULTS:
#+begin_example
;  @ In[127]:1 within `not_unrolled_addition`
define { {}*, i8 } @julia_not_unrolled_addition_48122([8 x i8]* noalias nocapture align 8 dereferenceable(8) %0, i64 signext %1) #0 {
top:
;  @ In[127]:3 within `not_unrolled_addition`
; ┌ @ range.jl:5 within `Colon`
; │┌ @ range.jl:393 within `UnitRange`
; ││┌ @ range.jl:400 within `unitrange_last`
     %.inv = icmp sgt i64 %1, 0
     %. = select i1 %.inv, i64 %1, i64 0
; └└└
  br i1 %.inv, label %L18.preheader, label %union_move16

L18.preheader:                                    ; preds = %top
;  @ In[127]:5 within `not_unrolled_addition`
; ┌ @ range.jl:883 within `iterate`
; │┌ @ promotion.jl:477 within `==`
    %.not30 = icmp eq i64 %., 1
; └└
  br i1 %.not30, label %union_move, label %L51

L51:                                              ; preds = %L51, %L18.preheader
  %value_phi1032 = phi double [ %value_phi10, %L51 ], [ 3.140000e+00, %L18.preheader ]
  %value_phi431 = phi i64 [ %2, %L51 ], [ 1, %L18.preheader ]
; ┌ @ range.jl:883 within `iterate`
   %2 = add i64 %value_phi431, 1
; └
;  @ In[127]:4 within `not_unrolled_addition`
; ┌ @ promotion.jl:389 within `*`
; │┌ @ promotion.jl:359 within `promote`
; ││┌ @ promotion.jl:336 within `_promote`
; │││┌ @ number.jl:7 within `convert`
; ││││┌ @ float.jl:146 within `Float64`
       %3 = sitofp i64 %2 to double
; │└└└└
; │ @ promotion.jl:389 within `*` @ float.jl:385
   %4 = fmul double %3, 3.140000e+00
; └
;  @ In[127] within `not_unrolled_addition`
  %value_phi10 = fadd double %value_phi1032, %4
;  @ In[127]:5 within `not_unrolled_addition`
; ┌ @ range.jl:883 within `iterate`
; │┌ @ promotion.jl:477 within `==`
    %.not = icmp eq i64 %2, %.
; └└
  br i1 %.not, label %L18.union_move_crit_edge, label %L51

post_union_move:                                  ; preds = %union_move16, %union_move
  %tindex_phi1429 = phi i8 [ 2, %union_move16 ], [ 1, %union_move ]
;  @ In[127]:7 within `not_unrolled_addition`
  %5 = insertvalue { {}*, i8 } { {}* null, i8 undef }, i8 %tindex_phi1429, 1
  ret { {}*, i8 } %5

L18.union_move_crit_edge:                         ; preds = %L51
;  @ In[127]:5 within `not_unrolled_addition`
  %phi.cast = bitcast double %value_phi10 to i64
  br label %union_move

union_move:                                       ; preds = %L18.union_move_crit_edge, %L18.preheader
  %value_phi10.lcssa = phi i64 [ %phi.cast, %L18.union_move_crit_edge ], [ 4614253070214989087, %L18.preheader ]
;  @ In[127]:7 within `not_unrolled_addition`
  %6 = bitcast [8 x i8]* %0 to i64*
  store i64 %value_phi10.lcssa, i64* %6, align 8
  br label %post_union_move

union_move16:                                     ; preds = %top
  %7 = bitcast [8 x i8]* %0 to i64*
  store i64 0, i64* %7, align 8
  br label %post_union_move
}
#+end_example

#+REVEAL: split

#+begin_src julia 
# NOTE: The one LLVM seems to have unrolled.
@code_llvm not_unrolled_addition_old(10_001)
#+end_src

#+RESULTS:
#+begin_example
;  @ In[129]:9 within `not_unrolled_addition_old`
define i64 @julia_not_unrolled_addition_old_48124(i64 signext %0) #0 {
top:
;  @ In[129]:11 within `not_unrolled_addition_old`
; ┌ @ range.jl:5 within `Colon`
; │┌ @ range.jl:393 within `UnitRange`
; ││┌ @ range.jl:400 within `unitrange_last`
     %.inv = icmp sgt i64 %0, 0
     %. = select i1 %.inv, i64 %0, i64 0
; └└└
  br i1 %.inv, label %L18.preheader, label %L35

L18.preheader:                                    ; preds = %top
;  @ In[129]:13 within `not_unrolled_addition_old`
  %1 = shl nuw i64 %., 1
  %2 = add nsw i64 %., -1
  %3 = zext i64 %2 to i65
  %4 = add nsw i64 %., -2
  %5 = zext i64 %4 to i65
  %6 = mul i65 %3, %5
  %7 = lshr i65 %6, 1
  %8 = trunc i65 %7 to i64
  %9 = add i64 %1, %8
  %10 = add i64 %9, -1
;  @ In[129]:14 within `not_unrolled_addition_old`
  br label %L35

L35:                                              ; preds = %L18.preheader, %top
  %value_phi10 = phi i64 [ 0, %top ], [ %10, %L18.preheader ]
  ret i64 %value_phi10
}
#+end_example

*** The Ugly

#+REVEAL: split

_*Reverse-mode automatic differentiation*_

ForwardDiff.jl is a pure joy, but slows down as dimensionality grows

Then one should reach for ReverseDiff.jl or Zygote.jl

#+HTML: <div class="fragment (appear)">
Most of the time it works really well, but sometimes you hit a real sharp edge

And sharp edges cut; they cut /deep/

Like _"16X slower when the function is implemented more efficiently"-deep_

#+DOWNLOADED: file:///tmp/Spectacle.wcviMK/Screenshot_20230125_010111.png @ 2023-01-25 01:01:31
[[file:.notes/attachments/Julia:_The_Good,_the_Bad,_and_the_Ugly/2023-01-25_01-01-31_Screenshot_20230125_010111.png]]

#+HTML: </div>

#+HTML: <div class="fragment (appear)">

If you want to see a man in pain, you can find the full issue [[https://github.com/TuringLang/Turing.jl/issues/1934][here]]

On the flip-side, once addressed (a type-instability), it's [[https://github.com/TuringLang/DistributionsAD.jl/pull/231][3X faster than before]]

#+HTML: </div>

*** Overall

Julia is pretty darn awesome

Easy to get going, and you can always make it faster by just optimizing your Julia code

No need to drop down to C++

#+REVEAL: split
Buuuut it can't beat Python at deep learning

#+REVEAL: split
Otherwise, it's worth a try

Godspeed to you

#+REVEAL: split
Fin.


* Debugging                                                        :noexport:
- [[/home/tor/.julia/packages/SciMLSensitivity/DSyJO/src/reversediff.jl::67]]
  - [ ] Add definition for =AbstractArray{<:ReverseDiff.TrackedReal}=?
- [[/home/tor/.julia/packages/SciMLSensitivity/DSyJO/src/reversediff.jl::99]]
  - Adjoint definition
- [[~/.julia/packages/ReverseDiff/YkVxM/src/tracked.jl::77]]
  - Complains because =IndexStyle= is incorrect

* Hacks                                                            :noexport:
:PROPERTIES:
:header-args:julia: :session geilo-winter-school :tangle utils.jl :exports both
:END:
** ReverseDiff.jl
*** Allow support of linear indexing
#+begin_src julia :eval no
Pkg.add(url="https://github.com/torfjelde/ReverseDiff.jl", rev="torfjelde/sort-of-support-non-linear-indexing")
#+end_src

#+RESULTS:
#+begin_example
    Updating git-repo `https://github.com/torfjelde/ReverseDiff.jl`
    Updating registry at `~/.julia/registries/General`
    Updating git-repo `https://github.com/JuliaRegistries/General.git`
   Resolving package versions...
  No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
  No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
Precompiling project...
  ✓ Turing
  ✓ TuringBenchmarking
  2 dependencies successfully precompiled in 18 seconds. 356 already precompiled.
#+end_example

** SciMLSensitivity.jl
*** DONE Allow =AbstractArray{<:ReverseDiff.TrackedReal}=
#+begin_src julia :eval no
# Also allow `AbstractArray{<:ReverseDiff.TrackedReal}`.
# PR: https://github.com/SciML/SciMLSensitivity.jl/pull/769
using ReverseDiff: ReverseDiff

using DiffEqBase: DiffEqBase
using SciMLSensitivity: SciMLSensitivity
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0::AbstractArray{<:ReverseDiff.TrackedReal},
    p::AbstractArray{<:ReverseDiff.TrackedReal},
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0,
    p::AbstractArray{<:ReverseDiff.TrackedReal},
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(
    prob::DiffEqBase.DEProblem,
    sensealg::Union{AbstractOverloadingSensitivityAlgorithm,Nothing},
    u0::AbstractArray{<:ReverseDiff.TrackedReal},
    p,
    args...;
    kwargs...
)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end
#+end_src

#+RESULTS:

*** TODO Allow =TrackedArray(::ODESolution)= (depends on https://github.com/JuliaDiff/ReverseDiff.jl/pull/216)
#+begin_src julia :eval no
if isdefined(ReverseDiff, :supports_linear_indexing)
    using DiffEqBase
    ReverseDiff.supports_linear_indexing(::DiffEqBase.ODESolution) = true
end
#+end_src

#+RESULTS:

** DONE TuringBenchmarking.jl
#+begin_src julia :eval no
Pkg.add(url="https://github.com/torfjelde/TuringBenchmarking.jl.git")
#+end_src

#+RESULTS:
:     Updating git-repo `https://github.com/torfjelde/TuringBenchmarking.jl.git`
:    Resolving package versions...
:   No Changes to `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
:   No Changes to `~/Projects/public/Turing-Workshop/202#+begin_srcter-School/03-advanced-turing/Manifest.toml`

** TODO DistributionsAD.jl
#+begin_src julia :eval no
Pkg.add(url="https://github.com/TuringLang/DistributionsAD.jl.git", rev="torfjelde/lazy-array-perf")
#+end_src

#+RESULTS:
#+begin_example
    Updating git-repo `https://github.com/TuringLang/DistributionsAD.jl.git`
   Resolving package versions...
    Updating `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
  [ced4e74d] ~ DistributionsAD v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf` ⇒ v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf`
    Updating `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
  [ced4e74d] ~ DistributionsAD v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf` ⇒ v0.6.44 `https://github.com/TuringLang/DistributionsAD.jl.git#torfjelde/lazy-array-perf`
Precompiling project...
  ✓ DistributionsAD
  ✓ AdvancedVI
  ✓ Turing
  ✓ TuringBenchmarking
  4 dependencies successfully precompiled in 26 seconds. 352 already precompiled.
#+end_example

** MCMCChains.jl
*** Converting into a =Matrix{<:NamedTuple}= into =MCMCChains.Chains=
#+begin_src julia :eval no
using Turing

function unravel(x::NamedTuple, vns=Iterators.map(DynamicPPL.VarName, keys(x)))
    vn_iter = Iterators.flatten(DynamicPPL.TestUtils.varname_leaves(vn, get(x, vn)) for vn in vns)
    return vn_iter, Iterators.map(Base.Fix1(get, x), vn_iter)
end

"""
    to_chains(results; exclude, include)

Return a `MCMCChains.Chains` constructed from `results`.

If `exclude` is specified, then those keys will be excluded.
If `include` is specified, then those keys will be included.
"""
function to_chains(results::AbstractVector{<:NamedTuple}; exclude=nothing, include=nothing)
    @assert !isempty(results)

    # TODO: Handle ragged arrays.
    # Probably best done my first just mapping everything to flatten dictionaries, e.g.
    #
    #     x_vns, x_vals = unravel(x)
    #     OrderedDict(zip(map(Symbol, x_vns), x_vals))
    #
    # (or using Dictionaries.jl for better perf), and then basically `hcat`ing these
    # and insertin `missing` where necessary.

    example = first(results)

    # Construct names once.
    syms = collect(keys(example))
    # Filter out if desired.
    if !isnothing(include)
        syms = filter(∈(include), syms)
    end
    if !isnothing(exclude)
        syms = filter(∉(exclude), syms)
    end
    # Convert to `VarName`.
    names = collect(first(unravel(example, map(DynamicPPL.VarName, syms))))

    # Extract the values.
    vals = mapreduce(hcat, results) do x
        # NOTE: Providing the `names` here assumes every sample has the same variables.
        collect(last(unravel(x, names)))
    end
    vals_transposed = transpose(vals)
    # Shape: iterations × num_vars × num_chains
    chain_array = reshape(vals_transposed, size(vals_transposed)..., 1)
    return MCMCChains.Chains(chain_array, names)
end

function to_chains(results::AbstractMatrix{<:NamedTuple}; kwargs...)
    return reduce(MCMCChains.chainscat, map(col -> to_chains(col; kwargs...), eachcol(results));)
end
#+end_src

#+RESULTS:
: to_chains (generic function with 2 methods)

#+begin_src julia :eval no
# TODO: Make PR to DPPL.
function DynamicPPL.TestUtils.varname_leaves(vn::DynamicPPL.VarName, val::NamedTuple)
    iter = Iterators.map(keys(val)) do sym
        lens = DynamicPPL.Setfield.PropertyLens{sym}()
        DynamicPPL.TestUtils.varname_leaves(vn ∘ lens, get(val, lens))
    end
    return Iterators.flatten(iter)
end
#+end_src

#+RESULTS:

#+begin_src julia :eval no
to_chains([(x = 1, y = [2,2], z = (w = [5],)), (x = 3, y = [4,4], z = (w = [6],))])
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (2×4×1 reshape(transpose(::Matrix{Int64}), 2, 4, 1) with eltype Int64):

Iterations        = 1:1:2
Number of chains  = 1
Samples per chain = 2
parameters        = x, y[1], y[2], z.w[1]

Summary Statistics
  parameters      mean       std   naive_se      mcse       ess      rhat 
      Symbol   Float64   Float64    Float64   Float64   Missing   Missing 

           x    2.0000    1.4142     1.0000    1.0000   missing   missing
        y[1]    3.0000    1.4142     1.0000    1.0000   missing   missing
        y[2]    3.0000    1.4142     1.0000    1.0000   missing   missing
      z.w[1]    5.5000    0.7071     0.5000    0.5000   missing   missing

Quantiles
  parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
      Symbol   Float64   Float64   Float64   Float64   Float64 

           x    1.0500    1.5000    2.0000    2.5000    2.9500
        y[1]    2.0500    2.5000    3.0000    3.5000    3.9500
        y[2]    2.0500    2.5000    3.0000    3.5000    3.9500
      z.w[1]    5.0250    5.2500    5.5000    5.7500    5.9750
#+end_example

** Turing.jl
* Debug                                                            :noexport:
:PROPERTIES:
:header-args:julia: :session geilo-winter-school :tangle no :exports both
:END:
** https://github.com/JuliaDiff/ReverseDiff.jl/pull/216?notification_referrer_id=NT_kwDOAKj85LM1MzQ1OTA1MDM5OjExMDc0Nzg4
#+begin_src julia :eval no
using ReverseDiff: ReverseDiff

import SciMLBase
import DiffEqBase
import DiffEqBase: solve_up
ReverseDiff.@grad function solve_up(prob, sensealg, u0, p, args...; kwargs...)
    out = DiffEqBase._solve_adjoint(prob, sensealg, ReverseDiff.value(u0),
                                    ReverseDiff.value(p),
                                    SciMLBase.ReverseDiffOriginator(), args...; kwargs...)
    function actual_adjoint(_args...)
        original_adjoint = out[2](_args...)
        if isempty(args) # alg is missing
            tuple(original_adjoint[1:4]..., original_adjoint[6:end]...)
        else
            original_adjoint
        end
    end
    out[1], actual_adjoint
end

function ReverseDiff.TrackedArray(sol::DiffEqBase.ODESolution)
    DiffEqBase.ODESolution(
        TrackedArray(sol.u),
        sol.u_analytic,
        sol.errors,
        sol.t,
        sol.k,
        sol.prob,
        sol.alg,
        sol.interp,
        sol.dense,
        sol.tslocation,
        sol.destats,
        sol.alg_choice,
        sol.retcode
    )
end

expr = @macroexpand ReverseDiff.@grad function f(x; y=1)
    return x, identity
end
expr |> Base.remove_linenums!

# This ends up being called in the forward pass (see the expansion of the `ReverseDiff.@grad` above),
# and so we could potentially overload this `track` to call to just track the internal solution instead.
# FIXME: Currently doesn't work because a) `sol.u isa Vector{<:Vector}` and b) `ODESolution(::Vector{<:TrackedVector})`
# doesn't work either.
function ReverseDiff.track(::ODESolution{T,N}, tp::Vector{ReverseDiff.AbstractInstruction}=ReverseDiff.InstructionTape()) where {T,N}

    u_tracked = map(Base.Fix2(ReverseDiff.track, tp), sol.u)
    Ttracked = eltype(eltype(u_tracked))  # TODO: Infer from `T` instead?
    DiffEqBase.ODESolution{Ttracked,N}(
        u_tracked,
        sol.u_analytic,
        sol.errors,
        sol.t,
        sol.k,
        sol.prob,
        sol.alg,
        sol.interp,
        sol.dense,
        sol.tslocation,
        sol.destats,
        sol.alg_choice,
        sol.retcode
    )
end

function ReverseDiff.track(::typeof(solve_up), _args...; kwargs...)
    # TODO: Insert adjoint def here.
    sol_up_pullback(args...; kwargs...) = 0, identity
    args = (x,)
    tp = ReverseDiff.tape(args...)
    output_value, back = sol_up_pullback(args...; kwargs...)
    output = ReverseDiff.track(output_value, tp)
    ReverseDiff.record!(
        tp,
        ReverseDiff.SpecialInstruction,
        solve_up,
        args,
        output,
        (back, sol_up_pullback, kwargs)
    )
    return output
end

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
sol_tracked = solve(problem_tracked)

DiffEqBase.ODESolution(
    map(ReverseDiff.track, sol.u),
    sol.u_analytic,
    sol.errors,
    sol.t,
    sol.k,
    sol.prob,
    sol.alg,
    sol.interp,
    sol.dense,
    sol.tslocation,
    sol.destats,
    sol.alg_choice,
    sol.retcode
)
typeof(sol)

sol.u


#+end_src

#+RESULTS:

** https://github.com/TuringLang/Turing.jl/issues/1934
#+begin_src julia :eval no
Pkg.develop(path="/home/tor/Projects/public/ReverseDiff.jl/")
#+end_src

#+RESULTS:
: [32m[1m   Resolving[22m[39m package versions...
: [32m[1m    Updating[22m[39m `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Project.toml`
:  [90m [37e2e3b7] [39m[93m~ ReverseDiff v1.14.4 ⇒ v1.14.4 `~/Projects/public/ReverseDiff.jl`[39m
: [32m[1m    Updating[22m[39m `~/Projects/public/Turing-Workshop/2023-Geilo-Winter-School/03-advanced-turing/Manifest.toml`
:  [90m [37e2e3b7] [39m[93m~ ReverseDiff v1.14.4 ⇒ v1.14.4 `~/Projects/public/ReverseDiff.jl`[39m

#+begin_src julia :eval no
using ForwardDiff: ForwardDiff
using ReverseDiff: ReverseDiff
using Zygote: Zygote

# Also allow `AbstractArray{<:ReverseDiff.TrackedReal}`.
# PR: https://github.com/SciML/SciMLSensitivity.jl/pull/769
using SciMLSensitivity: SciMLSensitivity
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

# Allow 
const RT = AbstractArray{<:ReverseDiff.TrackedReal}
function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT,
                             p::RT, args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0, p::RT,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT, p,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end
#+end_src

#+begin_src julia :eval no
problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
# problem_tracked = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
sol_tracked = solve(problem_tracked)
sol_tracked = DiffEqBase.solve_up(problem_tracked, nothing, u0, ReverseDiff.track([0.001, 0.01]))

sol_tracked

ReverseDiff.value(sol_tracked)

f(p) = sum(solve(remake(problem, p=p)))

x = [1.75,0 .7]
ReverseDiff.gradient(f, x)
first(Zygote.gradient(f, [0.1, 0.1])) ≈ ReverseDiff.gradient(f, [0.1, 0.1])

ForwardDiff.gradient(f, [0.001, 0.01])

#+end_src

#+begin_src julia :eval no
using LogDensityProblems, LogDensityProblemsAD
using SciMLSensitivity

@model demo() = (x ~ truncated(Normal(); lower=0); y ~ Normal(x, 1))

m = demo() | (y = 1.0,)
f = Turing.LogDensityFunction(m)

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f; compile=Val(true)), f.varinfo[:])

function Turing.LogDensityFunction(model::DynamicPPL.Model)
    return Turing.LogDensityFunction(
        DynamicPPL.VarInfo(model),
        model,
        DynamicPPL.SampleFromPrior(),
        DynamicPPL.DefaultContext(),
    )
end

f = Turing.LogDensityFunction(model_v2_conditioned)
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f; compile=Val(true)), f.varinfo[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), f.varinfo[:])


LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), f.varinfo[:])

LogDensityProblems.logdensity(::typeof(h), θ::AbstractVector) = h(θ)
LogDensityProblems.capabilities(::typeof(h)) = LogDensityProblems.LogDensityOrder{0}()
LogDensityProblems.dimension(::typeof(h)) = 2
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(true)), vi[:][1:2])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, h; compile=Val(false)), vi[:][1:2])


∂f = ADgradient(:ReverseDiff, f; compile=Val(true))
LogDensityProblems.logdensity_and_gradient(∂f, vi[:])

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f), vi[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ForwardDiff, f), vi[:])

LogDensityProblems.logdensity_and_gradient(ADgradient(:ReverseDiff, f), vi[:])
LogDensityProblems.logdensity_and_gradient(ADgradient(:ForwardDiff, f), vi[:])

∂f = ADgradient(:ReverseDiff, f)
LogDensityProblems.logdensity_and_gradient(∂f, vi[:])

Zygote.gradient(loss, [0.001, 0.01])
ReverseDiff.gradient(loss, [0.001, 0.01])

problem = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
problem.f(zero(u0), u0, ReverseDiff.track([0.001, 0.01]), 1)
problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)
Array(sol)
sol[2, 1:14]
typeof(sol)

?solve

@code_warntype solve(problem)

import SciMLBase
import DiffEqBase
import DiffEqBase: solve_up
ReverseDiff.@grad function solve_up(prob, sensealg, u0, p, args...; kwargs...)
    out = DiffEqBase._solve_adjoint(prob, sensealg, ReverseDiff.value(u0),
                                    ReverseDiff.value(p),
                                    SciMLBase.ReverseDiffOriginator(), args...; kwargs...)
    function actual_adjoint(_args...)
        original_adjoint = out[2](_args...)
        if isempty(args) # alg is missing
            tuple(original_adjoint[1:4]..., original_adjoint[6:end]...)
        else
            original_adjoint
        end
    end
    Array(out[1]), actual_adjoint
end

Base.IndexStyle(::ODESolution) = IndexCartesian()

problem = ODEProblem(SIR!, u0, tspan, [0.001, 0.01])
sol = solve(problem)

problem_tracked = remake(problem, p=ReverseDiff.track([0.001, 0.01]))
problem_tracked = ODEProblem(SIR!, u0, tspan, ReverseDiff.track([0.001, 0.01]))
sol_tracked = DiffEqBase.solve_up(problem_tracked, nothing, u0, ReverseDiff.track([0.001, 0.01]))
sol_tracked.value.retcode

sol_tracked.deriv

ReverseDiff.gradient(loss, [0.001, 0.01])

IndexStyle(sol)
typeof(sol)
typeof(sol_tracked)
typeof(sol_tracked.value)
print(sol_tracked.value)

size(sol_tracked)

@which IndexStyle(sol)

IndexStyle(typeof(sol))
IndexStyle(Matrix{Float64})

IndexStyle(sol.u)

function h(θ)
    sol = solve(remake(problem, p=[θ[1], θ[2]]), saveat=1)
    # @assert ReverseDiff.value(sol) isa ODESolution
    sum(sol)
end
ReverseDiff.gradient(h, [0.001, 0.01])

p_tracked = ReverseDiff.track([0.001, 0.01])
vcat(p_tracked[1], p_tracked[2])
[p_tracked[1], p_tracked[2]]

# ATTEMPT
import SciMLSensitivity: AbstractOverloadingSensitivityAlgorithm

const RT = AbstractArray{<:ReverseDiff.TrackedReal}
function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT,
                             p::RT, args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0, p::RT,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, u0, reduce(vcat, p), args...; kwargs...)
end

function DiffEqBase.solve_up(prob::DiffEqBase.DEProblem,
                             sensealg::Union{AbstractOverloadingSensitivityAlgorithm,
                                             Nothing}, u0::RT, p,
                             args...; kwargs...)
    DiffEqBase.solve_up(prob, sensealg, reduce(vcat, u0), p, args...; kwargs...)
end

ReverseDiff.collect(p_tracked)
vcat(p_tracked[1], p_tracked[2])

reduce(vcat, [p_tracked[1], p_tracked[2]])


## ReverseDiff.jl debugging
tape = ReverseDiff.GradientTape(f, (f.varinfo[:], ))
compiled_tape = ReverseDiff.compile(tape)
compiled_tape.tape.tape
compiled_tape.forward_exec
compiled_tape.reverse_exec[end]()
#+end_src

** ReverseDiffDebugUtils.jl
#+begin_src julia :eval no
using Pkg; Pkg.activate(mktempdir())
Pkg.develop("GraphGraphviz")
Pkg.develop("ReverseDiffDebugUtils")
# Pkg.add(name="Distributions", version="0.25.76")
using GraphGraphviz, ReverseDiffDebugUtils
using Turing, LogDensityProblems, LogDensityProblemsAD
using ReverseDiff

function Turing.LogDensityFunction(model::DynamicPPL.Model)
    return Turing.LogDensityFunction(
        DynamicPPL.VarInfo(model),
        model,
        DynamicPPL.SampleFromPrior(),
        DynamicPPL.DefaultContext(),
    )
end

### Setup ###
function sim(I, P)
    yvec = Vector{Int}(undef, I * P)
    ivec = similar(yvec)
    pvec = similar(yvec)

    beta = rand(Normal(), I)
    theta = rand(Normal(), P)

    n = 0
    for i in 1:I, p in 1:P
        n += 1
        ivec[n] = i
        pvec[n] = p
        yvec[n] = rand(BernoulliLogit(theta[p] - beta[i]))
    end

    return yvec, ivec, pvec, theta, beta
end

P = 1000
y, i, p, _, _ = sim(20, P);

### Turing ###
# naive implementation
@model function irt_naive(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)

    for n in eachindex(y)
        y[n] ~ Bernoulli(logistic(theta[p[n]] - beta[i[n]]))
    end
end

# performant model
@model function irt(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)
    Turing.@addlogprob! sum(logpdf.(BernoulliLogit.(theta[p] .- beta[i]), y))

    return (; theta, beta)
end

# Instantiate
model = irt(y, i, p);

ℓ = Turing.LogDensityFunction(model)
θ = ℓ.varinfo[:]
f = Base.Fix1(LogDensityProblems.logdensity, ℓ)

plotgraphviz(f, θ; display=true)

# Check if ForwardDiff breaks.
using UnPack
beta, theta = model();
x = vcat(theta, beta)

function evaluate(model::Turing.Model, x)
    @unpack y, i, p, I, P = model.args
    theta, beta = x[1:P], x[P + 1:end]
    return sum(logpdf.(BernoulliLogit.(theta[p] - beta[i]), y))
end

using ForwardDiff
ForwardDiff.gradient(Base.Fix1(evaluate, model), x)

## ReverseDiff
# pre-record a GradientTape for `f` using inputs of shape 100x100 with Float64 elements
const f_tape = GradientTape(f, (rand(100, 100), rand(100, 100)))

# compile `f_tape` into a more optimized representation
const compiled_f_tape = compile(f_tape)

# some inputs and work buffers to play around with
a, b = rand(100, 100), rand(100, 100)
inputs = (a, b)
results = (similar(a), similar(b))
all_results = map(DiffResults.GradientResult, results)
cfg = GradientConfig(inputs)


julia> tape = ReverseDiff.GradientTape(prob, (θ,));

julia> ctape = ReverseDiff.compile(tape);

julia> inputs = (θ,);

julia> results = (similar(θ), );

julia> cfg = ReverseDiff.GradientConfig(inputs);

julia> ReverseDiff.gradient!(results, ctape, inputs)
([2.1135668756925874, 6.145143149741308, 1.48401765986875, 0.6022383996781915, -0.5138652356820355, -8.103361690307636, 7.128312271724506, 12.584105906811907, -0.7254654355635614, 5.5804778350827045  …  -380.5829914906268, -123.15954482703319, 24.61418749530236, 307.33373871567056, 355.8706214939681, 117.79962719545168, 137.4162416377521, 121.1634598283426, 89.1211227217943, 47.44409385216913],)


# Using `DistributionsAD.flatten` to address performance.
using Distributions, DistributionsAD
using ConstructionBase
using ConcreteStructs

"""
    get_logpdf_expr(Tdist)

Return a flattened method for computing the logpdf of `Tdist`.
"""
function get_logpdf_expr(Tdist)
    x = gensym()
    fnames = fieldnames(Tdist)
    func = Expr(:->, 
                Expr(:tuple, fnames..., x), 
                Expr(:block,
                     Expr(:call, :logpdf,
                          Expr(:call, :($(Tdist)), fnames...),
                          x,
                          )
                     )
                )
    return :(flatten(::Type{<:$Tdist}) = $func)
end

make_logpdf_closure(::Type{D}) where {D} = (x, args...) -> logpdf(D(args...), x)

# 1. Use `flatten` to extract a, well, flattened `logpdf`.
eval(get_logpdf_expr(BernoulliLogit))

# 2. [OPTIONAL] Use `StructArrays.jl` to avoid the initial call to the constructor entirely.

# 3. Define a "fast" logpdf method.
@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NamedTuple{names}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,names}
    # Get the flatten expression.
    f = flatten(D)

    args = [:(dist.v.$n) for n in names]
    return :(sum($f.($(args...), x)))
end

# HACK: Constructor which doesn't apply the schema.
function StructArrayNoSchema(::Type{T}, cols::C) where {T, C<:StructArrays.Tup}
    N = isempty(cols) ? 1 : ndims(cols[1])
    StructArrays.StructArray{T, N, typeof(cols)}(cols)
end

@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NamedTuple{names}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,names}
    # Get the flatten expression.
    f = make_logpdf_closure(D)

    args = [:(dist.v.$n) for n in names]
    return :(sum($f.(x, $(args...))))
end

@generated function fast_logpdf(
    dist::Product{V,D,<:StructVector{<:Any,<:NTuple{N}}},
    x::AbstractArray
) where {V,D<:UnivariateDistribution,N}
    # Get the flatten expression.
    f = make_logpdf_closure(D)

    args = [:(StructArrays.component(dist.v, $i)) for i = 1:N]
    return :(sum($f.(x, $(args...))))
end


# 4. Convenience method for constructing `StructArray` without 
function DistributionsAD.arraydist(::Type{D}, args...) where {D<:Distribution}
    return DistributionsAD.arraydist(D, args)
end
DistributionsAD.arraydist(::Type{D}; args...) where {D<:Distribution} = DistributionsAD.arraydists(D, NamedTuple(args))
function DistributionsAD.arraydist(d::Type{D}, args::NamedTuple) where {D<:Distribution}
    return DistributionsAD.arraydist(StructArrayNoSchema(d, args))
end
function DistributionsAD.arraydist(d::Type{D}, args::Tuple) where {D<:Distribution}
    return DistributionsAD.arraydist(StructArrayNoSchema(d, args))
end

# 5. Type-piracy so we can make use of `~`.
function Distributions.logpdf(dist::Product{<:Any,<:UnivariateDistribution,<:StructVector}, x::AbstractVector{<:Real})
    return fast_logpdf(dist, x)
end


@model function irt_vroom(y, i, p; I = maximum(i), P = maximum(p))
    theta ~ filldist(Normal(), P)
    beta ~ filldist(Normal(), I)
    y ~ arraydist(BernoulliLogit, theta[p] - beta[i])

    return (; theta, beta)
end
model = irt_vroom(y, i, p);
suite = TuringBenchmarking.make_turing_suite(
    model,
    adbackends = [TuringBenchmarking.ForwardDiffAD{40}(), TuringBenchmarking.ReverseDiffAD{true}()]
);
run(suite)
#+end_src

** Implementation of ABC

#+begin_src julia :eval no
using Turing: OrderedDict
using Turing.DynamicPPL: AbstractPPL

@model function demo()
    x ~ Normal()
    y ~ Normal(x, 1)
end

model = demo() | (y = 2.0, )

function split_latent_data(d::OrderedDict, data_variable)
    ks = collect(keys(d))
    data_keys = filter(ks) do k
        AbstractPPL.subsumes(data_variable, k)
    end
    θ = map(Base.Fix1(getindex, d), filter(∉(data_keys), ks))
    data = map(Base.Fix1(getindex, d), data_keys)

    return θ, data
end


struct ABC{F,V,T} <: AbstractMCMC.AbstractSampler
    stat::F
    data_variable::V
    threshold::T
end

ABC(data_var, threshold) = ABC(identity, data_var, threshold)

compute_distance(sampler::ABC, data_true, data_candidate) = mean(abs2.(data_true .- data_candidate))

function AbstractMCMC.step(rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::ABC; kwargs...)
    # NOTE: Only works if you've used the `model | (x=..., )` conditioning functionality.
    data_true = get(DynamicPPL.conditioned(model), sampler.data_variable)

    joint_model = DynamicPPL.decondition(model, sampler.data_variable)
    d = rand(Turing.OrderedDict, joint_model)
    # Figure out which variables represents data.
    θ, _ = split_latent_data(d, sampler.data_variable)
    return θ, θ
end

function AbstractMCMC.step(rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::ABC, θ_current; kwargs...)
    # NOTE: Only works if you've used the `model | (x=..., )` conditioning functionality.
    data_true = get(DynamicPPL.conditioned(model), sampler.data_variable)

    joint_model = DynamicPPL.decondition(model, sampler.data_variable)
    d = rand(Turing.OrderedDict, joint_model)
    θ_candidate, data_candidate = split_latent_data(d, sampler.data_variable)

    dist = compute_distance(sampler, data_true, data_candidate)

    # TODO Use `threshold` from sampler.
    threshold = 0.1
    θ_next = dist < threshold ? θ_candidate : θ_current

    return θ_next, θ_next
end

function AbstractMCMC.bundle_samples(
    samples::AbstractVector{<:AbstractVector{<:Real}}, model::DynamicPPL.Model, sampler::ABC, ::Any, ::Type{MCMCChains.Chains};
    param_names=missing, discard_initial=0, thinning=1
)
    # Check if we received any parameter names.
    if ismissing(param_names)
        param_names = [Symbol(:param_, i) for i in 1:length(keys(samples[1]))]
    else
        # Generate new array to be thread safe.
        param_names = Symbol.(param_names)
    end

    return MCMCChains.Chains(samples, param_names, (parameters = param_names,); start=discard_initial + 1, thin=thinning)
end
#+end_src

#+RESULTS:

*** Testing it
#+begin_src julia :eval no
rng = Random.MersenneTwister(42)
spl = ABC(@varname(y), 0.1)
θ, _ = AbstractMCMC.step(rng, model, spl)
θ, _ = AbstractMCMC.step(rng, model, spl, θ);
θ
#+end_src

#+RESULTS:
: 1-element Vector{Float64}:
:  -0.3010545352363764


#+begin_src julia :eval no
samples = AbstractMCMC.sample(model, spl, 10_000)
chain = AbstractMCMC.bundle_samples(samples, model, spl, first(samples), MCMCChains.Chains; param_names=[:x])
#+end_src

#+RESULTS:
#+begin_example
Chains MCMC chain (10000×1×1 Array{Float64, 3}):

Iterations        = 1:1:10000
Number of chains  = 1
Samples per chain = 10000
parameters        = x

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m naive_se [0m [1m    mcse [0m [1m      ess [0m [1m    rhat [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m Float64 [0m

           x    0.9199    0.7270     0.0073    0.0340   395.2847    0.9999

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

           x   -0.4766    0.4041    0.9247    1.3853    2.2981
#+end_example

#+begin_src julia :eval no
plot(chain)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b12d5fdf6ab17538f62e35571fde7d083632df95.svg]]
